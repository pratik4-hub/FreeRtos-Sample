
can.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002874  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000112  00800060  00002874  00002908  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000049  00800172  00800172  00002a1a  2**0
                  ALLOC
  3 .stab         000062e8  00000000  00000000  00002a1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002b0b  00000000  00000000  00008d04  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000020  00000000  00000000  0000b80f  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	2a c0       	rjmp	.+84     	; 0x56 <__ctors_end>
       2:	00 00       	nop
       4:	50 c0       	rjmp	.+160    	; 0xa6 <__vector_1>
       6:	00 00       	nop
       8:	bd c0       	rjmp	.+378    	; 0x184 <__vector_2>
       a:	00 00       	nop
       c:	4b c0       	rjmp	.+150    	; 0xa4 <__bad_interrupt>
       e:	00 00       	nop
      10:	49 c0       	rjmp	.+146    	; 0xa4 <__bad_interrupt>
      12:	00 00       	nop
      14:	47 c0       	rjmp	.+142    	; 0xa4 <__bad_interrupt>
      16:	00 00       	nop
      18:	45 c0       	rjmp	.+138    	; 0xa4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	43 c0       	rjmp	.+134    	; 0xa4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	41 c0       	rjmp	.+130    	; 0xa4 <__bad_interrupt>
      22:	00 00       	nop
      24:	3f c0       	rjmp	.+126    	; 0xa4 <__bad_interrupt>
      26:	00 00       	nop
      28:	3d c0       	rjmp	.+122    	; 0xa4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	3b c0       	rjmp	.+118    	; 0xa4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	39 c0       	rjmp	.+114    	; 0xa4 <__bad_interrupt>
      32:	00 00       	nop
      34:	37 c0       	rjmp	.+110    	; 0xa4 <__bad_interrupt>
      36:	00 00       	nop
      38:	35 c0       	rjmp	.+106    	; 0xa4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	33 c0       	rjmp	.+102    	; 0xa4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	31 c0       	rjmp	.+98     	; 0xa4 <__bad_interrupt>
      42:	00 00       	nop
      44:	2f c0       	rjmp	.+94     	; 0xa4 <__bad_interrupt>
      46:	00 00       	nop
      48:	2d c0       	rjmp	.+90     	; 0xa4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	2b c0       	rjmp	.+86     	; 0xa4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	29 c0       	rjmp	.+82     	; 0xa4 <__bad_interrupt>
	...

00000054 <__ctors_start>:
      54:	8b 05       	cpc	r24, r11

00000056 <__ctors_end>:
      56:	11 24       	eor	r1, r1
      58:	1f be       	out	0x3f, r1	; 63
      5a:	cf e5       	ldi	r28, 0x5F	; 95
      5c:	d8 e0       	ldi	r29, 0x08	; 8
      5e:	de bf       	out	0x3e, r29	; 62
      60:	cd bf       	out	0x3d, r28	; 61

00000062 <__do_copy_data>:
      62:	11 e0       	ldi	r17, 0x01	; 1
      64:	a0 e6       	ldi	r26, 0x60	; 96
      66:	b0 e0       	ldi	r27, 0x00	; 0
      68:	e4 e7       	ldi	r30, 0x74	; 116
      6a:	f8 e2       	ldi	r31, 0x28	; 40
      6c:	02 c0       	rjmp	.+4      	; 0x72 <__do_copy_data+0x10>
      6e:	05 90       	lpm	r0, Z+
      70:	0d 92       	st	X+, r0
      72:	a2 37       	cpi	r26, 0x72	; 114
      74:	b1 07       	cpc	r27, r17
      76:	d9 f7       	brne	.-10     	; 0x6e <__do_copy_data+0xc>

00000078 <__do_clear_bss>:
      78:	11 e0       	ldi	r17, 0x01	; 1
      7a:	a2 e7       	ldi	r26, 0x72	; 114
      7c:	b1 e0       	ldi	r27, 0x01	; 1
      7e:	01 c0       	rjmp	.+2      	; 0x82 <.do_clear_bss_start>

00000080 <.do_clear_bss_loop>:
      80:	1d 92       	st	X+, r1

00000082 <.do_clear_bss_start>:
      82:	ab 3b       	cpi	r26, 0xBB	; 187
      84:	b1 07       	cpc	r27, r17
      86:	e1 f7       	brne	.-8      	; 0x80 <.do_clear_bss_loop>

00000088 <__do_global_ctors>:
      88:	10 e0       	ldi	r17, 0x00	; 0
      8a:	cb e2       	ldi	r28, 0x2B	; 43
      8c:	d0 e0       	ldi	r29, 0x00	; 0
      8e:	04 c0       	rjmp	.+8      	; 0x98 <__do_global_ctors+0x10>
      90:	21 97       	sbiw	r28, 0x01	; 1
      92:	fe 01       	movw	r30, r28
      94:	0e 94 be 12 	call	0x257c	; 0x257c <__tablejump2__>
      98:	ca 32       	cpi	r28, 0x2A	; 42
      9a:	d1 07       	cpc	r29, r17
      9c:	c9 f7       	brne	.-14     	; 0x90 <__do_global_ctors+0x8>
      9e:	e1 d0       	rcall	.+450    	; 0x262 <main>
      a0:	0c 94 38 14 	jmp	0x2870	; 0x2870 <_exit>

000000a4 <__bad_interrupt>:
      a4:	ad cf       	rjmp	.-166    	; 0x0 <__vectors>

000000a6 <__vector_1>:
char* itoa(int num, char* str, int base);
int mystrcmp(char *s1,char *s2);


ISR(INT0_vect)
{
      a6:	1f 92       	push	r1
      a8:	0f 92       	push	r0
      aa:	00 90 5f 00 	lds	r0, 0x005F
      ae:	0f 92       	push	r0
      b0:	11 24       	eor	r1, r1
      b2:	ef 92       	push	r14
      b4:	ff 92       	push	r15
      b6:	0f 93       	push	r16
      b8:	2f 93       	push	r18
      ba:	3f 93       	push	r19
      bc:	4f 93       	push	r20
      be:	5f 93       	push	r21
      c0:	6f 93       	push	r22
      c2:	7f 93       	push	r23
      c4:	8f 93       	push	r24
      c6:	9f 93       	push	r25
      c8:	af 93       	push	r26
      ca:	bf 93       	push	r27
      cc:	ef 93       	push	r30
      ce:	ff 93       	push	r31
      d0:	cf 93       	push	r28
      d2:	df 93       	push	r29
      d4:	cd b7       	in	r28, 0x3d	; 61
      d6:	de b7       	in	r29, 0x3e	; 62
      d8:	2a 97       	sbiw	r28, 0x0a	; 10
      da:	de bf       	out	0x3e, r29	; 62
      dc:	cd bf       	out	0x3d, r28	; 61
	INT32U length = 8;
      de:	88 e0       	ldi	r24, 0x08	; 8
      e0:	90 e0       	ldi	r25, 0x00	; 0
      e2:	a0 e0       	ldi	r26, 0x00	; 0
      e4:	b0 e0       	ldi	r27, 0x00	; 0
      e6:	89 83       	std	Y+1, r24	; 0x01
      e8:	9a 83       	std	Y+2, r25	; 0x02
      ea:	ab 83       	std	Y+3, r26	; 0x03
      ec:	bc 83       	std	Y+4, r27	; 0x04
	INT8U exFlag = 0;
      ee:	1d 82       	std	Y+5, r1	; 0x05
	INT8U can_ID = 1;
      f0:	81 e0       	ldi	r24, 0x01	; 1
      f2:	8e 83       	std	Y+6, r24	; 0x06

	char *str= "STOP";
      f4:	80 e6       	ldi	r24, 0x60	; 96
      f6:	90 e0       	ldi	r25, 0x00	; 0
      f8:	98 87       	std	Y+8, r25	; 0x08
      fa:	8f 83       	std	Y+7, r24	; 0x07
	uart_puts("Interrupt Arrived\r\n");
      fc:	85 e6       	ldi	r24, 0x65	; 101
      fe:	90 e0       	ldi	r25, 0x00	; 0
     100:	0e 94 4d 12 	call	0x249a	; 0x249a <_Z9uart_putsPc>

	int res = can.sendMsgBuf(can_ID,exFlag,length,(unsigned char*)str);
     104:	49 81       	ldd	r20, Y+1	; 0x01
     106:	8e 81       	ldd	r24, Y+6	; 0x06
     108:	88 2f       	mov	r24, r24
     10a:	90 e0       	ldi	r25, 0x00	; 0
     10c:	a0 e0       	ldi	r26, 0x00	; 0
     10e:	b0 e0       	ldi	r27, 0x00	; 0
     110:	2f 81       	ldd	r18, Y+7	; 0x07
     112:	38 85       	ldd	r19, Y+8	; 0x08
     114:	79 01       	movw	r14, r18
     116:	04 2f       	mov	r16, r20
     118:	2d 81       	ldd	r18, Y+5	; 0x05
     11a:	ac 01       	movw	r20, r24
     11c:	bd 01       	movw	r22, r26
     11e:	82 e7       	ldi	r24, 0x72	; 114
     120:	91 e0       	ldi	r25, 0x01	; 1
     122:	0e 94 48 10 	call	0x2090	; 0x2090 <_ZN7MCP_CAN10sendMsgBufEmhhPh>
     126:	88 2f       	mov	r24, r24
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	9a 87       	std	Y+10, r25	; 0x0a
     12c:	89 87       	std	Y+9, r24	; 0x09
	if(res == CAN_OK)
     12e:	89 85       	ldd	r24, Y+9	; 0x09
     130:	9a 85       	ldd	r25, Y+10	; 0x0a
     132:	00 97       	sbiw	r24, 0x00	; 0
     134:	29 f4       	brne	.+10     	; 0x140 <__vector_1+0x9a>
		uart_puts("sendMsgBuf successful\r\n");
     136:	89 e7       	ldi	r24, 0x79	; 121
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	0e 94 4d 12 	call	0x249a	; 0x249a <_Z9uart_putsPc>
     13e:	04 c0       	rjmp	.+8      	; 0x148 <__vector_1+0xa2>
	else
		uart_puts("sendMsgBuf unsuccessful\r\n");
     140:	81 e9       	ldi	r24, 0x91	; 145
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	0e 94 4d 12 	call	0x249a	; 0x249a <_Z9uart_putsPc>
		return;
     148:	00 00       	nop
		_delay_ms(10);
	return;
}
     14a:	2a 96       	adiw	r28, 0x0a	; 10
     14c:	0f b6       	in	r0, 0x3f	; 63
     14e:	f8 94       	cli
     150:	de bf       	out	0x3e, r29	; 62
     152:	0f be       	out	0x3f, r0	; 63
     154:	cd bf       	out	0x3d, r28	; 61
     156:	df 91       	pop	r29
     158:	cf 91       	pop	r28
     15a:	ff 91       	pop	r31
     15c:	ef 91       	pop	r30
     15e:	bf 91       	pop	r27
     160:	af 91       	pop	r26
     162:	9f 91       	pop	r25
     164:	8f 91       	pop	r24
     166:	7f 91       	pop	r23
     168:	6f 91       	pop	r22
     16a:	5f 91       	pop	r21
     16c:	4f 91       	pop	r20
     16e:	3f 91       	pop	r19
     170:	2f 91       	pop	r18
     172:	0f 91       	pop	r16
     174:	ff 90       	pop	r15
     176:	ef 90       	pop	r14
     178:	0f 90       	pop	r0
     17a:	00 92 5f 00 	sts	0x005F, r0
     17e:	0f 90       	pop	r0
     180:	1f 90       	pop	r1
     182:	18 95       	reti

00000184 <__vector_2>:

ISR (INT1_vect)        //External interrupt_one ISR
{
     184:	1f 92       	push	r1
     186:	0f 92       	push	r0
     188:	00 90 5f 00 	lds	r0, 0x005F
     18c:	0f 92       	push	r0
     18e:	11 24       	eor	r1, r1
     190:	ef 92       	push	r14
     192:	ff 92       	push	r15
     194:	0f 93       	push	r16
     196:	2f 93       	push	r18
     198:	3f 93       	push	r19
     19a:	4f 93       	push	r20
     19c:	5f 93       	push	r21
     19e:	6f 93       	push	r22
     1a0:	7f 93       	push	r23
     1a2:	8f 93       	push	r24
     1a4:	9f 93       	push	r25
     1a6:	af 93       	push	r26
     1a8:	bf 93       	push	r27
     1aa:	ef 93       	push	r30
     1ac:	ff 93       	push	r31
     1ae:	cf 93       	push	r28
     1b0:	df 93       	push	r29
     1b2:	cd b7       	in	r28, 0x3d	; 61
     1b4:	de b7       	in	r29, 0x3e	; 62
     1b6:	2a 97       	sbiw	r28, 0x0a	; 10
     1b8:	de bf       	out	0x3e, r29	; 62
     1ba:	cd bf       	out	0x3d, r28	; 61
	INT8U can_ID = 3;
     1bc:	83 e0       	ldi	r24, 0x03	; 3
     1be:	89 83       	std	Y+1, r24	; 0x01
	INT32U length = 8;
     1c0:	88 e0       	ldi	r24, 0x08	; 8
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	a0 e0       	ldi	r26, 0x00	; 0
     1c6:	b0 e0       	ldi	r27, 0x00	; 0
     1c8:	8a 83       	std	Y+2, r24	; 0x02
     1ca:	9b 83       	std	Y+3, r25	; 0x03
     1cc:	ac 83       	std	Y+4, r26	; 0x04
     1ce:	bd 83       	std	Y+5, r27	; 0x05
	INT8U exFlag = 0;
     1d0:	1e 82       	std	Y+6, r1	; 0x06

	char *str= "START";
     1d2:	8b ea       	ldi	r24, 0xAB	; 171
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	98 87       	std	Y+8, r25	; 0x08
     1d8:	8f 83       	std	Y+7, r24	; 0x07
	uart_puts("Interrupt Arrived\r\n");
     1da:	85 e6       	ldi	r24, 0x65	; 101
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	0e 94 4d 12 	call	0x249a	; 0x249a <_Z9uart_putsPc>

	int res = can.sendMsgBuf(can_ID,exFlag,length,(unsigned char*)str);
     1e2:	4a 81       	ldd	r20, Y+2	; 0x02
     1e4:	89 81       	ldd	r24, Y+1	; 0x01
     1e6:	88 2f       	mov	r24, r24
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	a0 e0       	ldi	r26, 0x00	; 0
     1ec:	b0 e0       	ldi	r27, 0x00	; 0
     1ee:	2f 81       	ldd	r18, Y+7	; 0x07
     1f0:	38 85       	ldd	r19, Y+8	; 0x08
     1f2:	79 01       	movw	r14, r18
     1f4:	04 2f       	mov	r16, r20
     1f6:	2e 81       	ldd	r18, Y+6	; 0x06
     1f8:	ac 01       	movw	r20, r24
     1fa:	bd 01       	movw	r22, r26
     1fc:	82 e7       	ldi	r24, 0x72	; 114
     1fe:	91 e0       	ldi	r25, 0x01	; 1
     200:	0e 94 48 10 	call	0x2090	; 0x2090 <_ZN7MCP_CAN10sendMsgBufEmhhPh>
     204:	88 2f       	mov	r24, r24
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	9a 87       	std	Y+10, r25	; 0x0a
     20a:	89 87       	std	Y+9, r24	; 0x09
	if(res == CAN_OK)
     20c:	89 85       	ldd	r24, Y+9	; 0x09
     20e:	9a 85       	ldd	r25, Y+10	; 0x0a
     210:	00 97       	sbiw	r24, 0x00	; 0
     212:	29 f4       	brne	.+10     	; 0x21e <__vector_2+0x9a>
		uart_puts("START VEHICLE \r\n");
     214:	81 eb       	ldi	r24, 0xB1	; 177
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	0e 94 4d 12 	call	0x249a	; 0x249a <_Z9uart_putsPc>
     21c:	04 c0       	rjmp	.+8      	; 0x226 <__vector_2+0xa2>
	else
		uart_puts("Button Press unsuccessful\r\n");
     21e:	82 ec       	ldi	r24, 0xC2	; 194
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	0e 94 4d 12 	call	0x249a	; 0x249a <_Z9uart_putsPc>
		return;
     226:	00 00       	nop
	_delay_ms(10);
	return;

}
     228:	2a 96       	adiw	r28, 0x0a	; 10
     22a:	0f b6       	in	r0, 0x3f	; 63
     22c:	f8 94       	cli
     22e:	de bf       	out	0x3e, r29	; 62
     230:	0f be       	out	0x3f, r0	; 63
     232:	cd bf       	out	0x3d, r28	; 61
     234:	df 91       	pop	r29
     236:	cf 91       	pop	r28
     238:	ff 91       	pop	r31
     23a:	ef 91       	pop	r30
     23c:	bf 91       	pop	r27
     23e:	af 91       	pop	r26
     240:	9f 91       	pop	r25
     242:	8f 91       	pop	r24
     244:	7f 91       	pop	r23
     246:	6f 91       	pop	r22
     248:	5f 91       	pop	r21
     24a:	4f 91       	pop	r20
     24c:	3f 91       	pop	r19
     24e:	2f 91       	pop	r18
     250:	0f 91       	pop	r16
     252:	ff 90       	pop	r15
     254:	ef 90       	pop	r14
     256:	0f 90       	pop	r0
     258:	00 92 5f 00 	sts	0x005F, r0
     25c:	0f 90       	pop	r0
     25e:	1f 90       	pop	r1
     260:	18 95       	reti

00000262 <main>:

int main()
{
     262:	ef 92       	push	r14
     264:	ff 92       	push	r15
     266:	0f 93       	push	r16
     268:	cf 93       	push	r28
     26a:	df 93       	push	r29
     26c:	cd b7       	in	r28, 0x3d	; 61
     26e:	de b7       	in	r29, 0x3e	; 62
     270:	e8 97       	sbiw	r28, 0x38	; 56
     272:	0f b6       	in	r0, 0x3f	; 63
     274:	f8 94       	cli
     276:	de bf       	out	0x3e, r29	; 62
     278:	0f be       	out	0x3f, r0	; 63
     27a:	cd bf       	out	0x3d, r28	; 61
	int temp = 0;
     27c:	1c 82       	std	Y+4, r1	; 0x04
     27e:	1b 82       	std	Y+3, r1	; 0x03
	char *str;
	char *str1 = "Temperature";
     280:	8e ed       	ldi	r24, 0xDE	; 222
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	9e 83       	std	Y+6, r25	; 0x06
     286:	8d 83       	std	Y+5, r24	; 0x05

	lm35_init();
     288:	f5 d1       	rcall	.+1002   	; 0x674 <_Z9lm35_initv>
     28a:	60 e8       	ldi	r22, 0x80	; 128
	uart_init(9600);
     28c:	75 e2       	ldi	r23, 0x25	; 37
     28e:	80 e0       	ldi	r24, 0x00	; 0
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <_Z9uart_initm>
     296:	0e 94 7f 10 	call	0x20fe	; 0x20fe <_Z15spi_init_masterv>
	spi_init_master();
     29a:	88 e3       	ldi	r24, 0x38	; 56

	PORTB=(1<<SS);
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	20 e1       	ldi	r18, 0x10	; 16
     2a0:	fc 01       	movw	r30, r24
     2a2:	20 83       	st	Z, r18
     2a4:	81 e3       	ldi	r24, 0x31	; 49
	DDRD=0;
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	fc 01       	movw	r30, r24
     2aa:	10 82       	st	Z, r1
     2ac:	82 e3       	ldi	r24, 0x32	; 50
	PORTD=0xFF;
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	2f ef       	ldi	r18, 0xFF	; 255
     2b2:	fc 01       	movw	r30, r24
     2b4:	20 83       	st	Z, r18
     2b6:	8b e5       	ldi	r24, 0x5B	; 91

	GICR = 1<<INT0| 1<<INT1;
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	20 ec       	ldi	r18, 0xC0	; 192
     2bc:	fc 01       	movw	r30, r24
     2be:	20 83       	st	Z, r18
     2c0:	85 e5       	ldi	r24, 0x55	; 85
	MCUCR = 1<<ISC01 | 1<<ISC00 | 1<<ISC10 | 1<< ISC11;
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	2f e0       	ldi	r18, 0x0F	; 15
     2c6:	fc 01       	movw	r30, r24
     2c8:	20 83       	st	Z, r18
     2ca:	78 94       	sei

	sei();
     2cc:	8a ee       	ldi	r24, 0xEA	; 234
	//while(1);

	uart_puts("CAN begin \r\n");
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	0e 94 4d 12 	call	0x249a	; 0x249a <_Z9uart_putsPc>
     2d4:	42 e0       	ldi	r20, 0x02	; 2
	unsigned int res =can.begin(CAN_100KBPS,MCP_8MHz);
     2d6:	68 e0       	ldi	r22, 0x08	; 8
     2d8:	82 e7       	ldi	r24, 0x72	; 114
     2da:	91 e0       	ldi	r25, 0x01	; 1
     2dc:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <_ZN7MCP_CAN5beginEhh>
     2e0:	88 2f       	mov	r24, r24
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	98 87       	std	Y+8, r25	; 0x08
     2e6:	8f 83       	std	Y+7, r24	; 0x07
     2e8:	8f 81       	ldd	r24, Y+7	; 0x07
	if(res == CAN_OK)
     2ea:	98 85       	ldd	r25, Y+8	; 0x08
     2ec:	00 97       	sbiw	r24, 0x00	; 0
     2ee:	09 f0       	breq	.+2      	; 0x2f2 <main+0x90>
     2f0:	77 c0       	rjmp	.+238    	; 0x3e0 <main+0x17e>
     2f2:	87 ef       	ldi	r24, 0xF7	; 247
	{
		uart_puts("init : Successful\r\n");
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	0e 94 4d 12 	call	0x249a	; 0x249a <_Z9uart_putsPc>
     2fa:	80 e0       	ldi	r24, 0x00	; 0
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	a8 ec       	ldi	r26, 0xC8	; 200
     300:	b2 e4       	ldi	r27, 0x42	; 66
     302:	8f 87       	std	Y+15, r24	; 0x0f
     304:	98 8b       	std	Y+16, r25	; 0x10
     306:	a9 8b       	std	Y+17, r26	; 0x11
     308:	ba 8b       	std	Y+18, r27	; 0x12
     30a:	20 e0       	ldi	r18, 0x00	; 0
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     30c:	30 e0       	ldi	r19, 0x00	; 0
     30e:	4a ef       	ldi	r20, 0xFA	; 250
     310:	54 e4       	ldi	r21, 0x44	; 68
     312:	6f 85       	ldd	r22, Y+15	; 0x0f
     314:	78 89       	ldd	r23, Y+16	; 0x10
     316:	89 89       	ldd	r24, Y+17	; 0x11
     318:	9a 89       	ldd	r25, Y+18	; 0x12
     31a:	0e 94 d5 13 	call	0x27aa	; 0x27aa <__mulsf3>
     31e:	dc 01       	movw	r26, r24
     320:	cb 01       	movw	r24, r22
     322:	8b 8b       	std	Y+19, r24	; 0x13
     324:	9c 8b       	std	Y+20, r25	; 0x14
     326:	ad 8b       	std	Y+21, r26	; 0x15
     328:	be 8b       	std	Y+22, r27	; 0x16
     32a:	20 e0       	ldi	r18, 0x00	; 0
	if (__tmp < 1.0)
     32c:	30 e0       	ldi	r19, 0x00	; 0
     32e:	40 e8       	ldi	r20, 0x80	; 128
     330:	5f e3       	ldi	r21, 0x3F	; 63
     332:	6b 89       	ldd	r22, Y+19	; 0x13
     334:	7c 89       	ldd	r23, Y+20	; 0x14
     336:	8d 89       	ldd	r24, Y+21	; 0x15
     338:	9e 89       	ldd	r25, Y+22	; 0x16
     33a:	0e 94 c4 12 	call	0x2588	; 0x2588 <__cmpsf2>
     33e:	88 23       	and	r24, r24
     340:	2c f4       	brge	.+10     	; 0x34c <main+0xea>
     342:	81 e0       	ldi	r24, 0x01	; 1
		__ticks = 1;
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	98 8f       	std	Y+24, r25	; 0x18
     348:	8f 8b       	std	Y+23, r24	; 0x17
     34a:	3f c0       	rjmp	.+126    	; 0x3ca <main+0x168>
     34c:	20 e0       	ldi	r18, 0x00	; 0
	else if (__tmp > 65535)
     34e:	3f ef       	ldi	r19, 0xFF	; 255
     350:	4f e7       	ldi	r20, 0x7F	; 127
     352:	57 e4       	ldi	r21, 0x47	; 71
     354:	6b 89       	ldd	r22, Y+19	; 0x13
     356:	7c 89       	ldd	r23, Y+20	; 0x14
     358:	8d 89       	ldd	r24, Y+21	; 0x15
     35a:	9e 89       	ldd	r25, Y+22	; 0x16
     35c:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <__gesf2>
     360:	18 16       	cp	r1, r24
     362:	4c f5       	brge	.+82     	; 0x3b6 <main+0x154>
     364:	20 e0       	ldi	r18, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     366:	30 e0       	ldi	r19, 0x00	; 0
     368:	40 e2       	ldi	r20, 0x20	; 32
     36a:	51 e4       	ldi	r21, 0x41	; 65
     36c:	6f 85       	ldd	r22, Y+15	; 0x0f
     36e:	78 89       	ldd	r23, Y+16	; 0x10
     370:	89 89       	ldd	r24, Y+17	; 0x11
     372:	9a 89       	ldd	r25, Y+18	; 0x12
     374:	0e 94 d5 13 	call	0x27aa	; 0x27aa <__mulsf3>
     378:	dc 01       	movw	r26, r24
     37a:	cb 01       	movw	r24, r22
     37c:	bc 01       	movw	r22, r24
     37e:	cd 01       	movw	r24, r26
     380:	0e 94 30 13 	call	0x2660	; 0x2660 <__fixunssfsi>
     384:	dc 01       	movw	r26, r24
     386:	cb 01       	movw	r24, r22
     388:	98 8f       	std	Y+24, r25	; 0x18
     38a:	8f 8b       	std	Y+23, r24	; 0x17
     38c:	0f c0       	rjmp	.+30     	; 0x3ac <main+0x14a>
     38e:	88 ec       	ldi	r24, 0xC8	; 200
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	9a 8f       	std	Y+26, r25	; 0x1a
     394:	89 8f       	std	Y+25, r24	; 0x19
     396:	89 8d       	ldd	r24, Y+25	; 0x19
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     398:	9a 8d       	ldd	r25, Y+26	; 0x1a
     39a:	01 97       	sbiw	r24, 0x01	; 1
     39c:	f1 f7       	brne	.-4      	; 0x39a <main+0x138>
     39e:	9a 8f       	std	Y+26, r25	; 0x1a
     3a0:	89 8f       	std	Y+25, r24	; 0x19
     3a2:	8f 89       	ldd	r24, Y+23	; 0x17
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3a4:	98 8d       	ldd	r25, Y+24	; 0x18
     3a6:	01 97       	sbiw	r24, 0x01	; 1
     3a8:	98 8f       	std	Y+24, r25	; 0x18
     3aa:	8f 8b       	std	Y+23, r24	; 0x17
     3ac:	8f 89       	ldd	r24, Y+23	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3ae:	98 8d       	ldd	r25, Y+24	; 0x18
     3b0:	00 97       	sbiw	r24, 0x00	; 0
     3b2:	69 f7       	brne	.-38     	; 0x38e <main+0x12c>
     3b4:	94 c0       	rjmp	.+296    	; 0x4de <main+0x27c>
     3b6:	6b 89       	ldd	r22, Y+19	; 0x13
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3b8:	7c 89       	ldd	r23, Y+20	; 0x14
     3ba:	8d 89       	ldd	r24, Y+21	; 0x15
     3bc:	9e 89       	ldd	r25, Y+22	; 0x16
     3be:	0e 94 30 13 	call	0x2660	; 0x2660 <__fixunssfsi>
     3c2:	dc 01       	movw	r26, r24
     3c4:	cb 01       	movw	r24, r22
     3c6:	98 8f       	std	Y+24, r25	; 0x18
     3c8:	8f 8b       	std	Y+23, r24	; 0x17
     3ca:	8f 89       	ldd	r24, Y+23	; 0x17
     3cc:	98 8d       	ldd	r25, Y+24	; 0x18
     3ce:	9c 8f       	std	Y+28, r25	; 0x1c
     3d0:	8b 8f       	std	Y+27, r24	; 0x1b
     3d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     3d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     3d6:	01 97       	sbiw	r24, 0x01	; 1
     3d8:	f1 f7       	brne	.-4      	; 0x3d6 <main+0x174>
     3da:	9c 8f       	std	Y+28, r25	; 0x1c
     3dc:	8b 8f       	std	Y+27, r24	; 0x1b
     3de:	7f c0       	rjmp	.+254    	; 0x4de <main+0x27c>
     3e0:	8f 81       	ldd	r24, Y+7	; 0x07
		_delay_ms(100);
	}
	else if(res == CAN_FAILINIT)
     3e2:	98 85       	ldd	r25, Y+8	; 0x08
     3e4:	81 30       	cpi	r24, 0x01	; 1
     3e6:	91 05       	cpc	r25, r1
     3e8:	09 f0       	breq	.+2      	; 0x3ec <main+0x18a>
     3ea:	79 c0       	rjmp	.+242    	; 0x4de <main+0x27c>
     3ec:	8b e0       	ldi	r24, 0x0B	; 11
	{
		uart_puts("init : unSuccessfull\r\n");
     3ee:	91 e0       	ldi	r25, 0x01	; 1
     3f0:	0e 94 4d 12 	call	0x249a	; 0x249a <_Z9uart_putsPc>
     3f4:	80 e0       	ldi	r24, 0x00	; 0
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	a8 ec       	ldi	r26, 0xC8	; 200
     3fa:	b2 e4       	ldi	r27, 0x42	; 66
     3fc:	8d 8f       	std	Y+29, r24	; 0x1d
     3fe:	9e 8f       	std	Y+30, r25	; 0x1e
     400:	af 8f       	std	Y+31, r26	; 0x1f
     402:	b8 a3       	std	Y+32, r27	; 0x20
     404:	20 e0       	ldi	r18, 0x00	; 0
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     406:	30 e0       	ldi	r19, 0x00	; 0
     408:	4a ef       	ldi	r20, 0xFA	; 250
     40a:	54 e4       	ldi	r21, 0x44	; 68
     40c:	6d 8d       	ldd	r22, Y+29	; 0x1d
     40e:	7e 8d       	ldd	r23, Y+30	; 0x1e
     410:	8f 8d       	ldd	r24, Y+31	; 0x1f
     412:	98 a1       	ldd	r25, Y+32	; 0x20
     414:	0e 94 d5 13 	call	0x27aa	; 0x27aa <__mulsf3>
     418:	dc 01       	movw	r26, r24
     41a:	cb 01       	movw	r24, r22
     41c:	89 a3       	std	Y+33, r24	; 0x21
     41e:	9a a3       	std	Y+34, r25	; 0x22
     420:	ab a3       	std	Y+35, r26	; 0x23
     422:	bc a3       	std	Y+36, r27	; 0x24
     424:	20 e0       	ldi	r18, 0x00	; 0
	if (__tmp < 1.0)
     426:	30 e0       	ldi	r19, 0x00	; 0
     428:	40 e8       	ldi	r20, 0x80	; 128
     42a:	5f e3       	ldi	r21, 0x3F	; 63
     42c:	69 a1       	ldd	r22, Y+33	; 0x21
     42e:	7a a1       	ldd	r23, Y+34	; 0x22
     430:	8b a1       	ldd	r24, Y+35	; 0x23
     432:	9c a1       	ldd	r25, Y+36	; 0x24
     434:	0e 94 c4 12 	call	0x2588	; 0x2588 <__cmpsf2>
     438:	88 23       	and	r24, r24
     43a:	2c f4       	brge	.+10     	; 0x446 <main+0x1e4>
     43c:	81 e0       	ldi	r24, 0x01	; 1
		__ticks = 1;
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	9e a3       	std	Y+38, r25	; 0x26
     442:	8d a3       	std	Y+37, r24	; 0x25
     444:	3f c0       	rjmp	.+126    	; 0x4c4 <main+0x262>
     446:	20 e0       	ldi	r18, 0x00	; 0
	else if (__tmp > 65535)
     448:	3f ef       	ldi	r19, 0xFF	; 255
     44a:	4f e7       	ldi	r20, 0x7F	; 127
     44c:	57 e4       	ldi	r21, 0x47	; 71
     44e:	69 a1       	ldd	r22, Y+33	; 0x21
     450:	7a a1       	ldd	r23, Y+34	; 0x22
     452:	8b a1       	ldd	r24, Y+35	; 0x23
     454:	9c a1       	ldd	r25, Y+36	; 0x24
     456:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <__gesf2>
     45a:	18 16       	cp	r1, r24
     45c:	4c f5       	brge	.+82     	; 0x4b0 <main+0x24e>
     45e:	20 e0       	ldi	r18, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     460:	30 e0       	ldi	r19, 0x00	; 0
     462:	40 e2       	ldi	r20, 0x20	; 32
     464:	51 e4       	ldi	r21, 0x41	; 65
     466:	6d 8d       	ldd	r22, Y+29	; 0x1d
     468:	7e 8d       	ldd	r23, Y+30	; 0x1e
     46a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     46c:	98 a1       	ldd	r25, Y+32	; 0x20
     46e:	0e 94 d5 13 	call	0x27aa	; 0x27aa <__mulsf3>
     472:	dc 01       	movw	r26, r24
     474:	cb 01       	movw	r24, r22
     476:	bc 01       	movw	r22, r24
     478:	cd 01       	movw	r24, r26
     47a:	0e 94 30 13 	call	0x2660	; 0x2660 <__fixunssfsi>
     47e:	dc 01       	movw	r26, r24
     480:	cb 01       	movw	r24, r22
     482:	9e a3       	std	Y+38, r25	; 0x26
     484:	8d a3       	std	Y+37, r24	; 0x25
     486:	0f c0       	rjmp	.+30     	; 0x4a6 <main+0x244>
     488:	88 ec       	ldi	r24, 0xC8	; 200
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	98 a7       	std	Y+40, r25	; 0x28
     48e:	8f a3       	std	Y+39, r24	; 0x27
     490:	8f a1       	ldd	r24, Y+39	; 0x27
     492:	98 a5       	ldd	r25, Y+40	; 0x28
     494:	01 97       	sbiw	r24, 0x01	; 1
     496:	f1 f7       	brne	.-4      	; 0x494 <main+0x232>
     498:	98 a7       	std	Y+40, r25	; 0x28
     49a:	8f a3       	std	Y+39, r24	; 0x27
     49c:	8d a1       	ldd	r24, Y+37	; 0x25
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     49e:	9e a1       	ldd	r25, Y+38	; 0x26
     4a0:	01 97       	sbiw	r24, 0x01	; 1
     4a2:	9e a3       	std	Y+38, r25	; 0x26
     4a4:	8d a3       	std	Y+37, r24	; 0x25
     4a6:	8d a1       	ldd	r24, Y+37	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4a8:	9e a1       	ldd	r25, Y+38	; 0x26
     4aa:	00 97       	sbiw	r24, 0x00	; 0
     4ac:	69 f7       	brne	.-38     	; 0x488 <main+0x226>
     4ae:	14 c0       	rjmp	.+40     	; 0x4d8 <main+0x276>
     4b0:	69 a1       	ldd	r22, Y+33	; 0x21
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     4b2:	7a a1       	ldd	r23, Y+34	; 0x22
     4b4:	8b a1       	ldd	r24, Y+35	; 0x23
     4b6:	9c a1       	ldd	r25, Y+36	; 0x24
     4b8:	0e 94 30 13 	call	0x2660	; 0x2660 <__fixunssfsi>
     4bc:	dc 01       	movw	r26, r24
     4be:	cb 01       	movw	r24, r22
     4c0:	9e a3       	std	Y+38, r25	; 0x26
     4c2:	8d a3       	std	Y+37, r24	; 0x25
     4c4:	8d a1       	ldd	r24, Y+37	; 0x25
     4c6:	9e a1       	ldd	r25, Y+38	; 0x26
     4c8:	9a a7       	std	Y+42, r25	; 0x2a
     4ca:	89 a7       	std	Y+41, r24	; 0x29
     4cc:	89 a5       	ldd	r24, Y+41	; 0x29
     4ce:	9a a5       	ldd	r25, Y+42	; 0x2a
     4d0:	01 97       	sbiw	r24, 0x01	; 1
     4d2:	f1 f7       	brne	.-4      	; 0x4d0 <main+0x26e>
     4d4:	9a a7       	std	Y+42, r25	; 0x2a
     4d6:	89 a7       	std	Y+41, r24	; 0x29
     4d8:	8f ef       	ldi	r24, 0xFF	; 255
		_delay_ms(100);
		return -1;
     4da:	9f ef       	ldi	r25, 0xFF	; 255
     4dc:	bf c0       	rjmp	.+382    	; 0x65c <main+0x3fa>
     4de:	82 e2       	ldi	r24, 0x22	; 34
	}
	uart_puts("CAN begin ended \r\n");
     4e0:	91 e0       	ldi	r25, 0x01	; 1
     4e2:	0e 94 4d 12 	call	0x249a	; 0x249a <_Z9uart_putsPc>
     4e6:	82 e7       	ldi	r24, 0x72	; 114

	// transmitter code
	while(1)
	{
		can.clearMsg();
     4e8:	91 e0       	ldi	r25, 0x01	; 1
     4ea:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <_ZN7MCP_CAN8clearMsgEv>
     4ee:	19 86       	std	Y+9, r1	; 0x09
		INT8U exFlag = 0;
     4f0:	82 e0       	ldi	r24, 0x02	; 2
		INT8U can_ID = 2;
     4f2:	8a 87       	std	Y+10, r24	; 0x0a
     4f4:	88 e0       	ldi	r24, 0x08	; 8
		INT32U length = 8;
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	a0 e0       	ldi	r26, 0x00	; 0
     4fa:	b0 e0       	ldi	r27, 0x00	; 0
     4fc:	8b 87       	std	Y+11, r24	; 0x0b
     4fe:	9c 87       	std	Y+12, r25	; 0x0c
     500:	ad 87       	std	Y+13, r26	; 0x0d
     502:	be 87       	std	Y+14, r27	; 0x0e
     504:	81 e0       	ldi	r24, 0x01	; 1

		temp = lm35_read(1);
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	ca d0       	rcall	.+404    	; 0x69e <_Z9lm35_readi>
     50a:	9c 83       	std	Y+4, r25	; 0x04
     50c:	8b 83       	std	Y+3, r24	; 0x03
     50e:	29 81       	ldd	r18, Y+1	; 0x01
     510:	3a 81       	ldd	r19, Y+2	; 0x02

		str = itoa(temp,str,10);
     512:	8b 81       	ldd	r24, Y+3	; 0x03
     514:	9c 81       	ldd	r25, Y+4	; 0x04
     516:	4a e0       	ldi	r20, 0x0A	; 10
     518:	50 e0       	ldi	r21, 0x00	; 0
     51a:	b9 01       	movw	r22, r18
     51c:	e8 d1       	rcall	.+976    	; 0x8ee <_Z4itoaiPci>
     51e:	9a 83       	std	Y+2, r25	; 0x02
     520:	89 83       	std	Y+1, r24	; 0x01
     522:	89 81       	ldd	r24, Y+1	; 0x01
     524:	9a 81       	ldd	r25, Y+2	; 0x02
     526:	0e 94 4d 12 	call	0x249a	; 0x249a <_Z9uart_putsPc>
		uart_puts(str);
     52a:	4b 85       	ldd	r20, Y+11	; 0x0b
     52c:	8a 85       	ldd	r24, Y+10	; 0x0a
     52e:	88 2f       	mov	r24, r24

		res = can.sendMsgBuf(can_ID,exFlag,length,(unsigned char*)str);
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	29 81       	ldd	r18, Y+1	; 0x01
     538:	3a 81       	ldd	r19, Y+2	; 0x02
     53a:	79 01       	movw	r14, r18
     53c:	04 2f       	mov	r16, r20
     53e:	29 85       	ldd	r18, Y+9	; 0x09
     540:	ac 01       	movw	r20, r24
     542:	bd 01       	movw	r22, r26
     544:	82 e7       	ldi	r24, 0x72	; 114
     546:	91 e0       	ldi	r25, 0x01	; 1
     548:	0e 94 48 10 	call	0x2090	; 0x2090 <_ZN7MCP_CAN10sendMsgBufEmhhPh>
     54c:	88 2f       	mov	r24, r24
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	98 87       	std	Y+8, r25	; 0x08
     552:	8f 83       	std	Y+7, r24	; 0x07
     554:	8f 81       	ldd	r24, Y+7	; 0x07
     556:	98 85       	ldd	r25, Y+8	; 0x08
     558:	00 97       	sbiw	r24, 0x00	; 0
		if(res == CAN_OK)
     55a:	29 f4       	brne	.+10     	; 0x566 <main+0x304>
     55c:	85 e3       	ldi	r24, 0x35	; 53
     55e:	91 e0       	ldi	r25, 0x01	; 1
     560:	0e 94 4d 12 	call	0x249a	; 0x249a <_Z9uart_putsPc>
			uart_puts("\r\ntemp sendMsgBuf successful\r\n");
     564:	04 c0       	rjmp	.+8      	; 0x56e <main+0x30c>
     566:	84 e5       	ldi	r24, 0x54	; 84
     568:	91 e0       	ldi	r25, 0x01	; 1
     56a:	0e 94 4d 12 	call	0x249a	; 0x249a <_Z9uart_putsPc>
		else
			uart_puts("sendMsgBuf unsuccessful \r\n");
     56e:	8f e6       	ldi	r24, 0x6F	; 111
     570:	91 e0       	ldi	r25, 0x01	; 1
     572:	0e 94 4d 12 	call	0x249a	; 0x249a <_Z9uart_putsPc>

		uart_puts("\r\n");
     576:	80 e0       	ldi	r24, 0x00	; 0
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	aa e7       	ldi	r26, 0x7A	; 122
     57c:	b4 e4       	ldi	r27, 0x44	; 68
     57e:	8b a7       	std	Y+43, r24	; 0x2b
     580:	9c a7       	std	Y+44, r25	; 0x2c
     582:	ad a7       	std	Y+45, r26	; 0x2d
     584:	be a7       	std	Y+46, r27	; 0x2e
     586:	20 e0       	ldi	r18, 0x00	; 0
     588:	30 e0       	ldi	r19, 0x00	; 0
     58a:	4a ef       	ldi	r20, 0xFA	; 250
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     58c:	54 e4       	ldi	r21, 0x44	; 68
     58e:	6b a5       	ldd	r22, Y+43	; 0x2b
     590:	7c a5       	ldd	r23, Y+44	; 0x2c
     592:	8d a5       	ldd	r24, Y+45	; 0x2d
     594:	9e a5       	ldd	r25, Y+46	; 0x2e
     596:	0e 94 d5 13 	call	0x27aa	; 0x27aa <__mulsf3>
     59a:	dc 01       	movw	r26, r24
     59c:	cb 01       	movw	r24, r22
     59e:	8f a7       	std	Y+47, r24	; 0x2f
     5a0:	98 ab       	std	Y+48, r25	; 0x30
     5a2:	a9 ab       	std	Y+49, r26	; 0x31
     5a4:	ba ab       	std	Y+50, r27	; 0x32
     5a6:	20 e0       	ldi	r18, 0x00	; 0
     5a8:	30 e0       	ldi	r19, 0x00	; 0
     5aa:	40 e8       	ldi	r20, 0x80	; 128
	if (__tmp < 1.0)
     5ac:	5f e3       	ldi	r21, 0x3F	; 63
     5ae:	6f a5       	ldd	r22, Y+47	; 0x2f
     5b0:	78 a9       	ldd	r23, Y+48	; 0x30
     5b2:	89 a9       	ldd	r24, Y+49	; 0x31
     5b4:	9a a9       	ldd	r25, Y+50	; 0x32
     5b6:	0e 94 c4 12 	call	0x2588	; 0x2588 <__cmpsf2>
     5ba:	88 23       	and	r24, r24
     5bc:	2c f4       	brge	.+10     	; 0x5c8 <main+0x366>
     5be:	81 e0       	ldi	r24, 0x01	; 1
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	9c ab       	std	Y+52, r25	; 0x34
		__ticks = 1;
     5c4:	8b ab       	std	Y+51, r24	; 0x33
     5c6:	3f c0       	rjmp	.+126    	; 0x646 <main+0x3e4>
     5c8:	20 e0       	ldi	r18, 0x00	; 0
     5ca:	3f ef       	ldi	r19, 0xFF	; 255
     5cc:	4f e7       	ldi	r20, 0x7F	; 127
	else if (__tmp > 65535)
     5ce:	57 e4       	ldi	r21, 0x47	; 71
     5d0:	6f a5       	ldd	r22, Y+47	; 0x2f
     5d2:	78 a9       	ldd	r23, Y+48	; 0x30
     5d4:	89 a9       	ldd	r24, Y+49	; 0x31
     5d6:	9a a9       	ldd	r25, Y+50	; 0x32
     5d8:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <__gesf2>
     5dc:	18 16       	cp	r1, r24
     5de:	4c f5       	brge	.+82     	; 0x632 <main+0x3d0>
     5e0:	20 e0       	ldi	r18, 0x00	; 0
     5e2:	30 e0       	ldi	r19, 0x00	; 0
     5e4:	40 e2       	ldi	r20, 0x20	; 32
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5e6:	51 e4       	ldi	r21, 0x41	; 65
     5e8:	6b a5       	ldd	r22, Y+43	; 0x2b
     5ea:	7c a5       	ldd	r23, Y+44	; 0x2c
     5ec:	8d a5       	ldd	r24, Y+45	; 0x2d
     5ee:	9e a5       	ldd	r25, Y+46	; 0x2e
     5f0:	0e 94 d5 13 	call	0x27aa	; 0x27aa <__mulsf3>
     5f4:	dc 01       	movw	r26, r24
     5f6:	cb 01       	movw	r24, r22
     5f8:	bc 01       	movw	r22, r24
     5fa:	cd 01       	movw	r24, r26
     5fc:	0e 94 30 13 	call	0x2660	; 0x2660 <__fixunssfsi>
     600:	dc 01       	movw	r26, r24
     602:	cb 01       	movw	r24, r22
     604:	9c ab       	std	Y+52, r25	; 0x34
     606:	8b ab       	std	Y+51, r24	; 0x33
     608:	0f c0       	rjmp	.+30     	; 0x628 <main+0x3c6>
     60a:	88 ec       	ldi	r24, 0xC8	; 200
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	9e ab       	std	Y+54, r25	; 0x36
     610:	8d ab       	std	Y+53, r24	; 0x35
     612:	8d a9       	ldd	r24, Y+53	; 0x35
     614:	9e a9       	ldd	r25, Y+54	; 0x36
     616:	01 97       	sbiw	r24, 0x01	; 1
     618:	f1 f7       	brne	.-4      	; 0x616 <main+0x3b4>
     61a:	9e ab       	std	Y+54, r25	; 0x36
     61c:	8d ab       	std	Y+53, r24	; 0x35
     61e:	8b a9       	ldd	r24, Y+51	; 0x33
     620:	9c a9       	ldd	r25, Y+52	; 0x34
     622:	01 97       	sbiw	r24, 0x01	; 1
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     624:	9c ab       	std	Y+52, r25	; 0x34
     626:	8b ab       	std	Y+51, r24	; 0x33
     628:	8b a9       	ldd	r24, Y+51	; 0x33
     62a:	9c a9       	ldd	r25, Y+52	; 0x34
     62c:	00 97       	sbiw	r24, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     62e:	69 f7       	brne	.-38     	; 0x60a <main+0x3a8>
     630:	14 c0       	rjmp	.+40     	; 0x65a <main+0x3f8>
     632:	6f a5       	ldd	r22, Y+47	; 0x2f
     634:	78 a9       	ldd	r23, Y+48	; 0x30
     636:	89 a9       	ldd	r24, Y+49	; 0x31
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     638:	9a a9       	ldd	r25, Y+50	; 0x32
     63a:	0e 94 30 13 	call	0x2660	; 0x2660 <__fixunssfsi>
     63e:	dc 01       	movw	r26, r24
     640:	cb 01       	movw	r24, r22
     642:	9c ab       	std	Y+52, r25	; 0x34
     644:	8b ab       	std	Y+51, r24	; 0x33
     646:	8b a9       	ldd	r24, Y+51	; 0x33
     648:	9c a9       	ldd	r25, Y+52	; 0x34
     64a:	98 af       	std	Y+56, r25	; 0x38
     64c:	8f ab       	std	Y+55, r24	; 0x37
     64e:	8f a9       	ldd	r24, Y+55	; 0x37
     650:	98 ad       	ldd	r25, Y+56	; 0x38
     652:	01 97       	sbiw	r24, 0x01	; 1
     654:	f1 f7       	brne	.-4      	; 0x652 <main+0x3f0>
     656:	98 af       	std	Y+56, r25	; 0x38
     658:	8f ab       	std	Y+55, r24	; 0x37
     65a:	45 cf       	rjmp	.-374    	; 0x4e6 <main+0x284>
     65c:	e8 96       	adiw	r28, 0x38	; 56
     65e:	0f b6       	in	r0, 0x3f	; 63
		_delay_ms(1000);

	}

	while(1);
	return 0;
     660:	f8 94       	cli

}
     662:	de bf       	out	0x3e, r29	; 62
     664:	0f be       	out	0x3f, r0	; 63
     666:	cd bf       	out	0x3d, r28	; 61
     668:	df 91       	pop	r29
     66a:	cf 91       	pop	r28
     66c:	0f 91       	pop	r16
     66e:	ff 90       	pop	r15
     670:	ef 90       	pop	r14
     672:	08 95       	ret

00000674 <_Z9lm35_initv>:


void lm35_init(void)
{
     674:	cf 93       	push	r28
     676:	df 93       	push	r29
     678:	cd b7       	in	r28, 0x3d	; 61
     67a:	de b7       	in	r29, 0x3e	; 62
	DDRA=0x0;
     67c:	8a e3       	ldi	r24, 0x3A	; 58
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	fc 01       	movw	r30, r24
     682:	10 82       	st	Z, r1
	ADCSRA = 0x87;
     684:	86 e2       	ldi	r24, 0x26	; 38
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	27 e8       	ldi	r18, 0x87	; 135
     68a:	fc 01       	movw	r30, r24
     68c:	20 83       	st	Z, r18
	ADMUX = 0x40;
     68e:	87 e2       	ldi	r24, 0x27	; 39
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	20 e4       	ldi	r18, 0x40	; 64
     694:	fc 01       	movw	r30, r24
     696:	20 83       	st	Z, r18

}
     698:	df 91       	pop	r29
     69a:	cf 91       	pop	r28
     69c:	08 95       	ret

0000069e <_Z9lm35_readi>:

int lm35_read(int channel)
{
     69e:	cf 93       	push	r28
     6a0:	df 93       	push	r29
     6a2:	cd b7       	in	r28, 0x3d	; 61
     6a4:	de b7       	in	r29, 0x3e	; 62
     6a6:	a2 97       	sbiw	r28, 0x22	; 34
     6a8:	0f b6       	in	r0, 0x3f	; 63
     6aa:	f8 94       	cli
     6ac:	de bf       	out	0x3e, r29	; 62
     6ae:	0f be       	out	0x3f, r0	; 63
     6b0:	cd bf       	out	0x3d, r28	; 61
     6b2:	98 a3       	std	Y+32, r25	; 0x20
     6b4:	8f 8f       	std	Y+31, r24	; 0x1f
	char *str;
	int Ain,AinLow,celsius;

	ADMUX=ADMUX|(channel & 0x07);
     6b6:	87 e2       	ldi	r24, 0x27	; 39
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	27 e2       	ldi	r18, 0x27	; 39
     6bc:	30 e0       	ldi	r19, 0x00	; 0
     6be:	f9 01       	movw	r30, r18
     6c0:	20 81       	ld	r18, Z
     6c2:	32 2f       	mov	r19, r18
     6c4:	2f 8d       	ldd	r18, Y+31	; 0x1f
     6c6:	27 70       	andi	r18, 0x07	; 7
     6c8:	23 2b       	or	r18, r19
     6ca:	fc 01       	movw	r30, r24
     6cc:	20 83       	st	Z, r18

	ADCSRA |= (1<<ADSC);
     6ce:	86 e2       	ldi	r24, 0x26	; 38
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	26 e2       	ldi	r18, 0x26	; 38
     6d4:	30 e0       	ldi	r19, 0x00	; 0
     6d6:	f9 01       	movw	r30, r18
     6d8:	20 81       	ld	r18, Z
     6da:	20 64       	ori	r18, 0x40	; 64
     6dc:	fc 01       	movw	r30, r24
     6de:	20 83       	st	Z, r18
	while((ADCSRA&(1<<ADIF))==0);
     6e0:	00 00       	nop
     6e2:	86 e2       	ldi	r24, 0x26	; 38
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	fc 01       	movw	r30, r24
     6e8:	80 81       	ld	r24, Z
     6ea:	88 2f       	mov	r24, r24
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	80 71       	andi	r24, 0x10	; 16
     6f0:	99 27       	eor	r25, r25
     6f2:	21 e0       	ldi	r18, 0x01	; 1
     6f4:	00 97       	sbiw	r24, 0x00	; 0
     6f6:	09 f0       	breq	.+2      	; 0x6fa <_Z9lm35_readi+0x5c>
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	22 23       	and	r18, r18
     6fc:	91 f7       	brne	.-28     	; 0x6e2 <_Z9lm35_readi+0x44>
     6fe:	80 e0       	ldi	r24, 0x00	; 0
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	a8 ec       	ldi	r26, 0xC8	; 200
     704:	b2 e4       	ldi	r27, 0x42	; 66
     706:	8f 83       	std	Y+7, r24	; 0x07
     708:	98 87       	std	Y+8, r25	; 0x08
     70a:	a9 87       	std	Y+9, r26	; 0x09
     70c:	ba 87       	std	Y+10, r27	; 0x0a
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 3e6) * __us;
     70e:	2b ea       	ldi	r18, 0xAB	; 171
     710:	3a ea       	ldi	r19, 0xAA	; 170
     712:	4a e2       	ldi	r20, 0x2A	; 42
     714:	50 e4       	ldi	r21, 0x40	; 64
     716:	6f 81       	ldd	r22, Y+7	; 0x07
     718:	78 85       	ldd	r23, Y+8	; 0x08
     71a:	89 85       	ldd	r24, Y+9	; 0x09
     71c:	9a 85       	ldd	r25, Y+10	; 0x0a
     71e:	0e 94 d5 13 	call	0x27aa	; 0x27aa <__mulsf3>
     722:	dc 01       	movw	r26, r24
     724:	cb 01       	movw	r24, r22
     726:	8b 87       	std	Y+11, r24	; 0x0b
     728:	9c 87       	std	Y+12, r25	; 0x0c
     72a:	ad 87       	std	Y+13, r26	; 0x0d
     72c:	be 87       	std	Y+14, r27	; 0x0e
	if (__tmp < 1.0)
     72e:	20 e0       	ldi	r18, 0x00	; 0
     730:	30 e0       	ldi	r19, 0x00	; 0
     732:	40 e8       	ldi	r20, 0x80	; 128
     734:	5f e3       	ldi	r21, 0x3F	; 63
     736:	6b 85       	ldd	r22, Y+11	; 0x0b
     738:	7c 85       	ldd	r23, Y+12	; 0x0c
     73a:	8d 85       	ldd	r24, Y+13	; 0x0d
     73c:	9e 85       	ldd	r25, Y+14	; 0x0e
     73e:	0e 94 c4 12 	call	0x2588	; 0x2588 <__cmpsf2>
     742:	88 23       	and	r24, r24
     744:	1c f4       	brge	.+6      	; 0x74c <_Z9lm35_readi+0xae>
		__ticks = 1;
     746:	81 e0       	ldi	r24, 0x01	; 1
     748:	8f 87       	std	Y+15, r24	; 0x0f
     74a:	91 c0       	rjmp	.+290    	; 0x86e <__stack+0xf>
	else if (__tmp > 255)
     74c:	20 e0       	ldi	r18, 0x00	; 0
     74e:	30 e0       	ldi	r19, 0x00	; 0
     750:	4f e7       	ldi	r20, 0x7F	; 127
     752:	53 e4       	ldi	r21, 0x43	; 67
     754:	6b 85       	ldd	r22, Y+11	; 0x0b
     756:	7c 85       	ldd	r23, Y+12	; 0x0c
     758:	8d 85       	ldd	r24, Y+13	; 0x0d
     75a:	9e 85       	ldd	r25, Y+14	; 0x0e
     75c:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <__gesf2>
     760:	18 16       	cp	r1, r24
     762:	0c f0       	brlt	.+2      	; 0x766 <_Z9lm35_readi+0xc8>
     764:	7b c0       	rjmp	.+246    	; 0x85c <_Z9lm35_readi+0x1be>
	{
		_delay_ms(__us / 1000.0);
     766:	20 e0       	ldi	r18, 0x00	; 0
     768:	30 e0       	ldi	r19, 0x00	; 0
     76a:	4a e7       	ldi	r20, 0x7A	; 122
     76c:	54 e4       	ldi	r21, 0x44	; 68
     76e:	6f 81       	ldd	r22, Y+7	; 0x07
     770:	78 85       	ldd	r23, Y+8	; 0x08
     772:	89 85       	ldd	r24, Y+9	; 0x09
     774:	9a 85       	ldd	r25, Y+10	; 0x0a
     776:	0e 94 c8 12 	call	0x2590	; 0x2590 <__divsf3>
     77a:	dc 01       	movw	r26, r24
     77c:	cb 01       	movw	r24, r22
     77e:	88 8b       	std	Y+16, r24	; 0x10
     780:	99 8b       	std	Y+17, r25	; 0x11
     782:	aa 8b       	std	Y+18, r26	; 0x12
     784:	bb 8b       	std	Y+19, r27	; 0x13
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     786:	20 e0       	ldi	r18, 0x00	; 0
     788:	30 e0       	ldi	r19, 0x00	; 0
     78a:	4a ef       	ldi	r20, 0xFA	; 250
     78c:	54 e4       	ldi	r21, 0x44	; 68
     78e:	68 89       	ldd	r22, Y+16	; 0x10
     790:	79 89       	ldd	r23, Y+17	; 0x11
     792:	8a 89       	ldd	r24, Y+18	; 0x12
     794:	9b 89       	ldd	r25, Y+19	; 0x13
     796:	0e 94 d5 13 	call	0x27aa	; 0x27aa <__mulsf3>
     79a:	dc 01       	movw	r26, r24
     79c:	cb 01       	movw	r24, r22
     79e:	8c 8b       	std	Y+20, r24	; 0x14
     7a0:	9d 8b       	std	Y+21, r25	; 0x15
     7a2:	ae 8b       	std	Y+22, r26	; 0x16
     7a4:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
     7a6:	20 e0       	ldi	r18, 0x00	; 0
     7a8:	30 e0       	ldi	r19, 0x00	; 0
     7aa:	40 e8       	ldi	r20, 0x80	; 128
     7ac:	5f e3       	ldi	r21, 0x3F	; 63
     7ae:	6c 89       	ldd	r22, Y+20	; 0x14
     7b0:	7d 89       	ldd	r23, Y+21	; 0x15
     7b2:	8e 89       	ldd	r24, Y+22	; 0x16
     7b4:	9f 89       	ldd	r25, Y+23	; 0x17
     7b6:	0e 94 c4 12 	call	0x2588	; 0x2588 <__cmpsf2>
     7ba:	88 23       	and	r24, r24
     7bc:	2c f4       	brge	.+10     	; 0x7c8 <_Z9lm35_readi+0x12a>
		__ticks = 1;
     7be:	81 e0       	ldi	r24, 0x01	; 1
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	99 8f       	std	Y+25, r25	; 0x19
     7c4:	88 8f       	std	Y+24, r24	; 0x18
     7c6:	3f c0       	rjmp	.+126    	; 0x846 <_Z9lm35_readi+0x1a8>
	else if (__tmp > 65535)
     7c8:	20 e0       	ldi	r18, 0x00	; 0
     7ca:	3f ef       	ldi	r19, 0xFF	; 255
     7cc:	4f e7       	ldi	r20, 0x7F	; 127
     7ce:	57 e4       	ldi	r21, 0x47	; 71
     7d0:	6c 89       	ldd	r22, Y+20	; 0x14
     7d2:	7d 89       	ldd	r23, Y+21	; 0x15
     7d4:	8e 89       	ldd	r24, Y+22	; 0x16
     7d6:	9f 89       	ldd	r25, Y+23	; 0x17
     7d8:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <__gesf2>
     7dc:	18 16       	cp	r1, r24
     7de:	4c f5       	brge	.+82     	; 0x832 <_Z9lm35_readi+0x194>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7e0:	20 e0       	ldi	r18, 0x00	; 0
     7e2:	30 e0       	ldi	r19, 0x00	; 0
     7e4:	40 e2       	ldi	r20, 0x20	; 32
     7e6:	51 e4       	ldi	r21, 0x41	; 65
     7e8:	68 89       	ldd	r22, Y+16	; 0x10
     7ea:	79 89       	ldd	r23, Y+17	; 0x11
     7ec:	8a 89       	ldd	r24, Y+18	; 0x12
     7ee:	9b 89       	ldd	r25, Y+19	; 0x13
     7f0:	0e 94 d5 13 	call	0x27aa	; 0x27aa <__mulsf3>
     7f4:	dc 01       	movw	r26, r24
     7f6:	cb 01       	movw	r24, r22
     7f8:	bc 01       	movw	r22, r24
     7fa:	cd 01       	movw	r24, r26
     7fc:	0e 94 30 13 	call	0x2660	; 0x2660 <__fixunssfsi>
     800:	dc 01       	movw	r26, r24
     802:	cb 01       	movw	r24, r22
     804:	99 8f       	std	Y+25, r25	; 0x19
     806:	88 8f       	std	Y+24, r24	; 0x18
     808:	0f c0       	rjmp	.+30     	; 0x828 <_Z9lm35_readi+0x18a>
     80a:	88 ec       	ldi	r24, 0xC8	; 200
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	9b 8f       	std	Y+27, r25	; 0x1b
     810:	8a 8f       	std	Y+26, r24	; 0x1a
     812:	8a 8d       	ldd	r24, Y+26	; 0x1a
     814:	9b 8d       	ldd	r25, Y+27	; 0x1b
     816:	01 97       	sbiw	r24, 0x01	; 1
     818:	f1 f7       	brne	.-4      	; 0x816 <_Z9lm35_readi+0x178>
     81a:	9b 8f       	std	Y+27, r25	; 0x1b
     81c:	8a 8f       	std	Y+26, r24	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     81e:	88 8d       	ldd	r24, Y+24	; 0x18
     820:	99 8d       	ldd	r25, Y+25	; 0x19
     822:	01 97       	sbiw	r24, 0x01	; 1
     824:	99 8f       	std	Y+25, r25	; 0x19
     826:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     828:	88 8d       	ldd	r24, Y+24	; 0x18
     82a:	99 8d       	ldd	r25, Y+25	; 0x19
     82c:	00 97       	sbiw	r24, 0x00	; 0
     82e:	69 f7       	brne	.-38     	; 0x80a <_Z9lm35_readi+0x16c>
     830:	24 c0       	rjmp	.+72     	; 0x87a <__stack+0x1b>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     832:	6c 89       	ldd	r22, Y+20	; 0x14
     834:	7d 89       	ldd	r23, Y+21	; 0x15
     836:	8e 89       	ldd	r24, Y+22	; 0x16
     838:	9f 89       	ldd	r25, Y+23	; 0x17
     83a:	0e 94 30 13 	call	0x2660	; 0x2660 <__fixunssfsi>
     83e:	dc 01       	movw	r26, r24
     840:	cb 01       	movw	r24, r22
     842:	99 8f       	std	Y+25, r25	; 0x19
     844:	88 8f       	std	Y+24, r24	; 0x18
     846:	88 8d       	ldd	r24, Y+24	; 0x18
     848:	99 8d       	ldd	r25, Y+25	; 0x19
     84a:	9d 8f       	std	Y+29, r25	; 0x1d
     84c:	8c 8f       	std	Y+28, r24	; 0x1c
     84e:	8c 8d       	ldd	r24, Y+28	; 0x1c
     850:	9d 8d       	ldd	r25, Y+29	; 0x1d
     852:	01 97       	sbiw	r24, 0x01	; 1
     854:	f1 f7       	brne	.-4      	; 0x852 <_Z9lm35_readi+0x1b4>
     856:	9d 8f       	std	Y+29, r25	; 0x1d
     858:	8c 8f       	std	Y+28, r24	; 0x1c
     85a:	0f c0       	rjmp	.+30     	; 0x87a <__stack+0x1b>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     85c:	6b 85       	ldd	r22, Y+11	; 0x0b
     85e:	7c 85       	ldd	r23, Y+12	; 0x0c
     860:	8d 85       	ldd	r24, Y+13	; 0x0d
     862:	9e 85       	ldd	r25, Y+14	; 0x0e
     864:	0e 94 30 13 	call	0x2660	; 0x2660 <__fixunssfsi>
     868:	dc 01       	movw	r26, r24
     86a:	cb 01       	movw	r24, r22
     86c:	8f 87       	std	Y+15, r24	; 0x0f
     86e:	8f 85       	ldd	r24, Y+15	; 0x0f
     870:	8e 8f       	std	Y+30, r24	; 0x1e
	__asm__ volatile (
		"1: dec %0" "\n\t"
		"brne 1b"
		: "=r" (__count)
		: "0" (__count)
	);
     872:	8e 8d       	ldd	r24, Y+30	; 0x1e
     874:	8a 95       	dec	r24
     876:	f1 f7       	brne	.-4      	; 0x874 <__stack+0x15>
     878:	8e 8f       	std	Y+30, r24	; 0x1e
	_delay_us(100);
	AinLow = (int)ADCL;
     87a:	84 e2       	ldi	r24, 0x24	; 36
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	fc 01       	movw	r30, r24
     880:	80 81       	ld	r24, Z
     882:	88 2f       	mov	r24, r24
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	9a 83       	std	Y+2, r25	; 0x02
     888:	89 83       	std	Y+1, r24	; 0x01
	Ain = (int)ADCH*256;
     88a:	85 e2       	ldi	r24, 0x25	; 37
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	fc 01       	movw	r30, r24
     890:	80 81       	ld	r24, Z
     892:	88 2f       	mov	r24, r24
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	98 2f       	mov	r25, r24
     898:	88 27       	eor	r24, r24
     89a:	9c 83       	std	Y+4, r25	; 0x04
     89c:	8b 83       	std	Y+3, r24	; 0x03
	Ain = Ain + AinLow;
     89e:	2b 81       	ldd	r18, Y+3	; 0x03
     8a0:	3c 81       	ldd	r19, Y+4	; 0x04
     8a2:	89 81       	ldd	r24, Y+1	; 0x01
     8a4:	9a 81       	ldd	r25, Y+2	; 0x02
     8a6:	82 0f       	add	r24, r18
     8a8:	93 1f       	adc	r25, r19
     8aa:	9c 83       	std	Y+4, r25	; 0x04
     8ac:	8b 83       	std	Y+3, r24	; 0x03
	celsius = (Ain*5);
     8ae:	2b 81       	ldd	r18, Y+3	; 0x03
     8b0:	3c 81       	ldd	r19, Y+4	; 0x04
     8b2:	c9 01       	movw	r24, r18
     8b4:	88 0f       	add	r24, r24
     8b6:	99 1f       	adc	r25, r25
     8b8:	88 0f       	add	r24, r24
     8ba:	99 1f       	adc	r25, r25
     8bc:	82 0f       	add	r24, r18
     8be:	93 1f       	adc	r25, r19
     8c0:	9e 83       	std	Y+6, r25	; 0x06
     8c2:	8d 83       	std	Y+5, r24	; 0x05
	celsius = (celsius/10);
     8c4:	8d 81       	ldd	r24, Y+5	; 0x05
     8c6:	9e 81       	ldd	r25, Y+6	; 0x06
     8c8:	2a e0       	ldi	r18, 0x0A	; 10
     8ca:	30 e0       	ldi	r19, 0x00	; 0
     8cc:	b9 01       	movw	r22, r18
     8ce:	0e 94 75 12 	call	0x24ea	; 0x24ea <__divmodhi4>
     8d2:	cb 01       	movw	r24, r22
     8d4:	9e 83       	std	Y+6, r25	; 0x06
     8d6:	8d 83       	std	Y+5, r24	; 0x05
	return (celsius);
     8d8:	8d 81       	ldd	r24, Y+5	; 0x05
     8da:	9e 81       	ldd	r25, Y+6	; 0x06
}
     8dc:	a2 96       	adiw	r28, 0x22	; 34
     8de:	0f b6       	in	r0, 0x3f	; 63
     8e0:	f8 94       	cli
     8e2:	de bf       	out	0x3e, r29	; 62
     8e4:	0f be       	out	0x3f, r0	; 63
     8e6:	cd bf       	out	0x3d, r28	; 61
     8e8:	df 91       	pop	r29
     8ea:	cf 91       	pop	r28
     8ec:	08 95       	ret

000008ee <_Z4itoaiPci>:

char* itoa(int num, char* str, int base)
{
     8ee:	cf 93       	push	r28
     8f0:	df 93       	push	r29
     8f2:	cd b7       	in	r28, 0x3d	; 61
     8f4:	de b7       	in	r29, 0x3e	; 62
     8f6:	63 97       	sbiw	r28, 0x13	; 19
     8f8:	0f b6       	in	r0, 0x3f	; 63
     8fa:	f8 94       	cli
     8fc:	de bf       	out	0x3e, r29	; 62
     8fe:	0f be       	out	0x3f, r0	; 63
     900:	cd bf       	out	0x3d, r28	; 61
     902:	9b 87       	std	Y+11, r25	; 0x0b
     904:	8a 87       	std	Y+10, r24	; 0x0a
     906:	7d 87       	std	Y+13, r23	; 0x0d
     908:	6c 87       	std	Y+12, r22	; 0x0c
     90a:	5f 87       	std	Y+15, r21	; 0x0f
     90c:	4e 87       	std	Y+14, r20	; 0x0e
	int i = 0;
     90e:	1a 82       	std	Y+2, r1	; 0x02
     910:	19 82       	std	Y+1, r1	; 0x01
	int isNegative = 0;
     912:	1c 82       	std	Y+4, r1	; 0x04
     914:	1b 82       	std	Y+3, r1	; 0x03

	// Handle 0 explicitely, otherwise empty string is printed for 0
	if(num == 0)
     916:	8a 85       	ldd	r24, Y+10	; 0x0a
     918:	9b 85       	ldd	r25, Y+11	; 0x0b
     91a:	00 97       	sbiw	r24, 0x00	; 0
     91c:	d1 f4       	brne	.+52     	; 0x952 <_Z4itoaiPci+0x64>
	{
		str[i++] = '0';
     91e:	89 81       	ldd	r24, Y+1	; 0x01
     920:	9a 81       	ldd	r25, Y+2	; 0x02
     922:	9c 01       	movw	r18, r24
     924:	2f 5f       	subi	r18, 0xFF	; 255
     926:	3f 4f       	sbci	r19, 0xFF	; 255
     928:	3a 83       	std	Y+2, r19	; 0x02
     92a:	29 83       	std	Y+1, r18	; 0x01
     92c:	9c 01       	movw	r18, r24
     92e:	8c 85       	ldd	r24, Y+12	; 0x0c
     930:	9d 85       	ldd	r25, Y+13	; 0x0d
     932:	82 0f       	add	r24, r18
     934:	93 1f       	adc	r25, r19
     936:	20 e3       	ldi	r18, 0x30	; 48
     938:	fc 01       	movw	r30, r24
     93a:	20 83       	st	Z, r18
		str[i] = '\0';
     93c:	89 81       	ldd	r24, Y+1	; 0x01
     93e:	9a 81       	ldd	r25, Y+2	; 0x02
     940:	2c 85       	ldd	r18, Y+12	; 0x0c
     942:	3d 85       	ldd	r19, Y+13	; 0x0d
     944:	82 0f       	add	r24, r18
     946:	93 1f       	adc	r25, r19
     948:	fc 01       	movw	r30, r24
     94a:	10 82       	st	Z, r1
		return str;
     94c:	8c 85       	ldd	r24, Y+12	; 0x0c
     94e:	9d 85       	ldd	r25, Y+13	; 0x0d
     950:	b9 c0       	rjmp	.+370    	; 0xac4 <_Z4itoaiPci+0x1d6>
	}
	// base 10. Otherwise numbers are considered unsigned.
	if (num < 0 && base == 10)
     952:	8a 85       	ldd	r24, Y+10	; 0x0a
     954:	9b 85       	ldd	r25, Y+11	; 0x0b
     956:	99 23       	and	r25, r25
     958:	84 f4       	brge	.+32     	; 0x97a <_Z4itoaiPci+0x8c>
     95a:	8e 85       	ldd	r24, Y+14	; 0x0e
     95c:	9f 85       	ldd	r25, Y+15	; 0x0f
     95e:	8a 30       	cpi	r24, 0x0A	; 10
     960:	91 05       	cpc	r25, r1
     962:	59 f4       	brne	.+22     	; 0x97a <_Z4itoaiPci+0x8c>
	{
		isNegative = 1;
     964:	81 e0       	ldi	r24, 0x01	; 1
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	9c 83       	std	Y+4, r25	; 0x04
     96a:	8b 83       	std	Y+3, r24	; 0x03
		num = -num;
     96c:	8a 85       	ldd	r24, Y+10	; 0x0a
     96e:	9b 85       	ldd	r25, Y+11	; 0x0b
     970:	91 95       	neg	r25
     972:	81 95       	neg	r24
     974:	91 09       	sbc	r25, r1
     976:	9b 87       	std	Y+11, r25	; 0x0b
     978:	8a 87       	std	Y+10, r24	; 0x0a
	}
	// Process individual digits
	while (num != 0)
     97a:	2b c0       	rjmp	.+86     	; 0x9d2 <_Z4itoaiPci+0xe4>
	{
		int rem = num % base;
     97c:	8a 85       	ldd	r24, Y+10	; 0x0a
     97e:	9b 85       	ldd	r25, Y+11	; 0x0b
     980:	2e 85       	ldd	r18, Y+14	; 0x0e
     982:	3f 85       	ldd	r19, Y+15	; 0x0f
     984:	b9 01       	movw	r22, r18
     986:	0e 94 75 12 	call	0x24ea	; 0x24ea <__divmodhi4>
     98a:	9e 83       	std	Y+6, r25	; 0x06
     98c:	8d 83       	std	Y+5, r24	; 0x05
		str[i++] = (rem > 9)? (rem-10) + 'a' : rem + '0';
     98e:	89 81       	ldd	r24, Y+1	; 0x01
     990:	9a 81       	ldd	r25, Y+2	; 0x02
     992:	9c 01       	movw	r18, r24
     994:	2f 5f       	subi	r18, 0xFF	; 255
     996:	3f 4f       	sbci	r19, 0xFF	; 255
     998:	3a 83       	std	Y+2, r19	; 0x02
     99a:	29 83       	std	Y+1, r18	; 0x01
     99c:	9c 01       	movw	r18, r24
     99e:	8c 85       	ldd	r24, Y+12	; 0x0c
     9a0:	9d 85       	ldd	r25, Y+13	; 0x0d
     9a2:	82 0f       	add	r24, r18
     9a4:	93 1f       	adc	r25, r19
     9a6:	2d 81       	ldd	r18, Y+5	; 0x05
     9a8:	3e 81       	ldd	r19, Y+6	; 0x06
     9aa:	2a 30       	cpi	r18, 0x0A	; 10
     9ac:	31 05       	cpc	r19, r1
     9ae:	1c f0       	brlt	.+6      	; 0x9b6 <_Z4itoaiPci+0xc8>
     9b0:	2d 81       	ldd	r18, Y+5	; 0x05
     9b2:	29 5a       	subi	r18, 0xA9	; 169
     9b4:	02 c0       	rjmp	.+4      	; 0x9ba <_Z4itoaiPci+0xcc>
     9b6:	2d 81       	ldd	r18, Y+5	; 0x05
     9b8:	20 5d       	subi	r18, 0xD0	; 208
     9ba:	fc 01       	movw	r30, r24
     9bc:	20 83       	st	Z, r18
		num = num/base;
     9be:	8a 85       	ldd	r24, Y+10	; 0x0a
     9c0:	9b 85       	ldd	r25, Y+11	; 0x0b
     9c2:	2e 85       	ldd	r18, Y+14	; 0x0e
     9c4:	3f 85       	ldd	r19, Y+15	; 0x0f
     9c6:	b9 01       	movw	r22, r18
     9c8:	0e 94 75 12 	call	0x24ea	; 0x24ea <__divmodhi4>
     9cc:	cb 01       	movw	r24, r22
     9ce:	9b 87       	std	Y+11, r25	; 0x0b
     9d0:	8a 87       	std	Y+10, r24	; 0x0a
	{
		isNegative = 1;
		num = -num;
	}
	// Process individual digits
	while (num != 0)
     9d2:	8a 85       	ldd	r24, Y+10	; 0x0a
     9d4:	9b 85       	ldd	r25, Y+11	; 0x0b
     9d6:	00 97       	sbiw	r24, 0x00	; 0
     9d8:	89 f6       	brne	.-94     	; 0x97c <_Z4itoaiPci+0x8e>
		int rem = num % base;
		str[i++] = (rem > 9)? (rem-10) + 'a' : rem + '0';
		num = num/base;
	}
	// If number is negative, append '-'
	if (isNegative)
     9da:	8b 81       	ldd	r24, Y+3	; 0x03
     9dc:	9c 81       	ldd	r25, Y+4	; 0x04
     9de:	00 97       	sbiw	r24, 0x00	; 0
     9e0:	79 f0       	breq	.+30     	; 0xa00 <_Z4itoaiPci+0x112>
		str[i++] = '-';
     9e2:	89 81       	ldd	r24, Y+1	; 0x01
     9e4:	9a 81       	ldd	r25, Y+2	; 0x02
     9e6:	9c 01       	movw	r18, r24
     9e8:	2f 5f       	subi	r18, 0xFF	; 255
     9ea:	3f 4f       	sbci	r19, 0xFF	; 255
     9ec:	3a 83       	std	Y+2, r19	; 0x02
     9ee:	29 83       	std	Y+1, r18	; 0x01
     9f0:	9c 01       	movw	r18, r24
     9f2:	8c 85       	ldd	r24, Y+12	; 0x0c
     9f4:	9d 85       	ldd	r25, Y+13	; 0x0d
     9f6:	82 0f       	add	r24, r18
     9f8:	93 1f       	adc	r25, r19
     9fa:	2d e2       	ldi	r18, 0x2D	; 45
     9fc:	fc 01       	movw	r30, r24
     9fe:	20 83       	st	Z, r18
	str[i] = '\0'; // Append string terminator
     a00:	89 81       	ldd	r24, Y+1	; 0x01
     a02:	9a 81       	ldd	r25, Y+2	; 0x02
     a04:	2c 85       	ldd	r18, Y+12	; 0x0c
     a06:	3d 85       	ldd	r19, Y+13	; 0x0d
     a08:	82 0f       	add	r24, r18
     a0a:	93 1f       	adc	r25, r19
     a0c:	fc 01       	movw	r30, r24
     a0e:	10 82       	st	Z, r1

	// Reverse the string
	int n = i;
     a10:	89 81       	ldd	r24, Y+1	; 0x01
     a12:	9a 81       	ldd	r25, Y+2	; 0x02
     a14:	98 87       	std	Y+8, r25	; 0x08
     a16:	8f 83       	std	Y+7, r24	; 0x07
	for(i=0; i<n/2; i++)
     a18:	1a 82       	std	Y+2, r1	; 0x02
     a1a:	19 82       	std	Y+1, r1	; 0x01
     a1c:	3b c0       	rjmp	.+118    	; 0xa94 <_Z4itoaiPci+0x1a6>
	{
		char tmp=str[i];
     a1e:	89 81       	ldd	r24, Y+1	; 0x01
     a20:	9a 81       	ldd	r25, Y+2	; 0x02
     a22:	2c 85       	ldd	r18, Y+12	; 0x0c
     a24:	3d 85       	ldd	r19, Y+13	; 0x0d
     a26:	82 0f       	add	r24, r18
     a28:	93 1f       	adc	r25, r19
     a2a:	fc 01       	movw	r30, r24
     a2c:	80 81       	ld	r24, Z
     a2e:	89 87       	std	Y+9, r24	; 0x09
		str[i]=str[n-1-i];
     a30:	89 81       	ldd	r24, Y+1	; 0x01
     a32:	9a 81       	ldd	r25, Y+2	; 0x02
     a34:	2c 85       	ldd	r18, Y+12	; 0x0c
     a36:	3d 85       	ldd	r19, Y+13	; 0x0d
     a38:	82 0f       	add	r24, r18
     a3a:	93 1f       	adc	r25, r19
     a3c:	2f 81       	ldd	r18, Y+7	; 0x07
     a3e:	38 85       	ldd	r19, Y+8	; 0x08
     a40:	a9 01       	movw	r20, r18
     a42:	41 50       	subi	r20, 0x01	; 1
     a44:	51 09       	sbc	r21, r1
     a46:	29 81       	ldd	r18, Y+1	; 0x01
     a48:	3a 81       	ldd	r19, Y+2	; 0x02
     a4a:	ba 01       	movw	r22, r20
     a4c:	62 1b       	sub	r22, r18
     a4e:	73 0b       	sbc	r23, r19
     a50:	9b 01       	movw	r18, r22
     a52:	a9 01       	movw	r20, r18
     a54:	2c 85       	ldd	r18, Y+12	; 0x0c
     a56:	3d 85       	ldd	r19, Y+13	; 0x0d
     a58:	24 0f       	add	r18, r20
     a5a:	35 1f       	adc	r19, r21
     a5c:	f9 01       	movw	r30, r18
     a5e:	20 81       	ld	r18, Z
     a60:	fc 01       	movw	r30, r24
     a62:	20 83       	st	Z, r18
		str[n-1-i]=tmp;
     a64:	8f 81       	ldd	r24, Y+7	; 0x07
     a66:	98 85       	ldd	r25, Y+8	; 0x08
     a68:	9c 01       	movw	r18, r24
     a6a:	21 50       	subi	r18, 0x01	; 1
     a6c:	31 09       	sbc	r19, r1
     a6e:	89 81       	ldd	r24, Y+1	; 0x01
     a70:	9a 81       	ldd	r25, Y+2	; 0x02
     a72:	a9 01       	movw	r20, r18
     a74:	48 1b       	sub	r20, r24
     a76:	59 0b       	sbc	r21, r25
     a78:	ca 01       	movw	r24, r20
     a7a:	9c 01       	movw	r18, r24
     a7c:	8c 85       	ldd	r24, Y+12	; 0x0c
     a7e:	9d 85       	ldd	r25, Y+13	; 0x0d
     a80:	82 0f       	add	r24, r18
     a82:	93 1f       	adc	r25, r19
     a84:	29 85       	ldd	r18, Y+9	; 0x09
     a86:	fc 01       	movw	r30, r24
     a88:	20 83       	st	Z, r18
		str[i++] = '-';
	str[i] = '\0'; // Append string terminator

	// Reverse the string
	int n = i;
	for(i=0; i<n/2; i++)
     a8a:	89 81       	ldd	r24, Y+1	; 0x01
     a8c:	9a 81       	ldd	r25, Y+2	; 0x02
     a8e:	01 96       	adiw	r24, 0x01	; 1
     a90:	9a 83       	std	Y+2, r25	; 0x02
     a92:	89 83       	std	Y+1, r24	; 0x01
     a94:	8f 81       	ldd	r24, Y+7	; 0x07
     a96:	98 85       	ldd	r25, Y+8	; 0x08
     a98:	99 23       	and	r25, r25
     a9a:	0c f4       	brge	.+2      	; 0xa9e <_Z4itoaiPci+0x1b0>
     a9c:	01 96       	adiw	r24, 0x01	; 1
     a9e:	95 95       	asr	r25
     aa0:	87 95       	ror	r24
     aa2:	9c 01       	movw	r18, r24
     aa4:	89 81       	ldd	r24, Y+1	; 0x01
     aa6:	9a 81       	ldd	r25, Y+2	; 0x02
     aa8:	82 17       	cp	r24, r18
     aaa:	93 07       	cpc	r25, r19
     aac:	0c f4       	brge	.+2      	; 0xab0 <_Z4itoaiPci+0x1c2>
     aae:	b7 cf       	rjmp	.-146    	; 0xa1e <_Z4itoaiPci+0x130>
	{
		char tmp=str[i];
		str[i]=str[n-1-i];
		str[n-1-i]=tmp;
	}
	str[n] = '\0';
     ab0:	8f 81       	ldd	r24, Y+7	; 0x07
     ab2:	98 85       	ldd	r25, Y+8	; 0x08
     ab4:	2c 85       	ldd	r18, Y+12	; 0x0c
     ab6:	3d 85       	ldd	r19, Y+13	; 0x0d
     ab8:	82 0f       	add	r24, r18
     aba:	93 1f       	adc	r25, r19
     abc:	fc 01       	movw	r30, r24
     abe:	10 82       	st	Z, r1
	return str;
     ac0:	8c 85       	ldd	r24, Y+12	; 0x0c
     ac2:	9d 85       	ldd	r25, Y+13	; 0x0d
}
     ac4:	63 96       	adiw	r28, 0x13	; 19
     ac6:	0f b6       	in	r0, 0x3f	; 63
     ac8:	f8 94       	cli
     aca:	de bf       	out	0x3e, r29	; 62
     acc:	0f be       	out	0x3f, r0	; 63
     ace:	cd bf       	out	0x3d, r28	; 61
     ad0:	df 91       	pop	r29
     ad2:	cf 91       	pop	r28
     ad4:	08 95       	ret

00000ad6 <_Z41__static_initialization_and_destruction_0ii>:
		else if(*(s1+i)=='\0' && *(s2+i)!='\0')
			 return 1;
	}
	return -2;

}
     ad6:	cf 93       	push	r28
     ad8:	df 93       	push	r29
     ada:	00 d0       	rcall	.+0      	; 0xadc <_Z41__static_initialization_and_destruction_0ii+0x6>
     adc:	00 d0       	rcall	.+0      	; 0xade <_Z41__static_initialization_and_destruction_0ii+0x8>
     ade:	cd b7       	in	r28, 0x3d	; 61
     ae0:	de b7       	in	r29, 0x3e	; 62
     ae2:	9a 83       	std	Y+2, r25	; 0x02
     ae4:	89 83       	std	Y+1, r24	; 0x01
     ae6:	7c 83       	std	Y+4, r23	; 0x04
     ae8:	6b 83       	std	Y+3, r22	; 0x03
     aea:	89 81       	ldd	r24, Y+1	; 0x01
     aec:	9a 81       	ldd	r25, Y+2	; 0x02
     aee:	81 30       	cpi	r24, 0x01	; 1
     af0:	91 05       	cpc	r25, r1
     af2:	51 f4       	brne	.+20     	; 0xb08 <_Z41__static_initialization_and_destruction_0ii+0x32>
     af4:	8b 81       	ldd	r24, Y+3	; 0x03
     af6:	9c 81       	ldd	r25, Y+4	; 0x04
     af8:	8f 3f       	cpi	r24, 0xFF	; 255
     afa:	2f ef       	ldi	r18, 0xFF	; 255
     afc:	92 07       	cpc	r25, r18
     afe:	21 f4       	brne	.+8      	; 0xb08 <_Z41__static_initialization_and_destruction_0ii+0x32>
#include "mcp_can.h"
#include "spi.h"
#include "uart.h"

#define PRESCALAR 1024
MCP_CAN can;
     b00:	82 e7       	ldi	r24, 0x72	; 114
     b02:	91 e0       	ldi	r25, 0x01	; 1
     b04:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <_ZN7MCP_CANC1Ev>
		else if(*(s1+i)=='\0' && *(s2+i)!='\0')
			 return 1;
	}
	return -2;

}
     b08:	0f 90       	pop	r0
     b0a:	0f 90       	pop	r0
     b0c:	0f 90       	pop	r0
     b0e:	0f 90       	pop	r0
     b10:	df 91       	pop	r29
     b12:	cf 91       	pop	r28
     b14:	08 95       	ret

00000b16 <_GLOBAL__sub_I_can>:
     b16:	cf 93       	push	r28
     b18:	df 93       	push	r29
     b1a:	cd b7       	in	r28, 0x3d	; 61
     b1c:	de b7       	in	r29, 0x3e	; 62
     b1e:	6f ef       	ldi	r22, 0xFF	; 255
     b20:	7f ef       	ldi	r23, 0xFF	; 255
     b22:	81 e0       	ldi	r24, 0x01	; 1
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	d7 df       	rcall	.-82     	; 0xad6 <_Z41__static_initialization_and_destruction_0ii>
     b28:	df 91       	pop	r29
     b2a:	cf 91       	pop	r28
     b2c:	08 95       	ret

00000b2e <_ZN7MCP_CAN13mcp2515_resetEv>:
/*********************************************************************************************************
 ** Function name:           mcp2515_reset
 ** Descriptions:            reset the device
 *********************************************************************************************************/
void MCP_CAN::mcp2515_reset(void)
{
     b2e:	cf 93       	push	r28
     b30:	df 93       	push	r29
     b32:	cd b7       	in	r28, 0x3d	; 61
     b34:	de b7       	in	r29, 0x3e	; 62
     b36:	6e 97       	sbiw	r28, 0x1e	; 30
     b38:	0f b6       	in	r0, 0x3f	; 63
     b3a:	f8 94       	cli
     b3c:	de bf       	out	0x3e, r29	; 62
     b3e:	0f be       	out	0x3f, r0	; 63
     b40:	cd bf       	out	0x3d, r28	; 61
     b42:	9e 8f       	std	Y+30, r25	; 0x1e
     b44:	8d 8f       	std	Y+29, r24	; 0x1d
	//MCP2515_SELECT();
	PORTB&=~(1<<SS);
     b46:	88 e3       	ldi	r24, 0x38	; 56
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	28 e3       	ldi	r18, 0x38	; 56
     b4c:	30 e0       	ldi	r19, 0x00	; 0
     b4e:	f9 01       	movw	r30, r18
     b50:	20 81       	ld	r18, Z
     b52:	2f 7e       	andi	r18, 0xEF	; 239
     b54:	fc 01       	movw	r30, r24
     b56:	20 83       	st	Z, r18
     b58:	80 e0       	ldi	r24, 0x00	; 0
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	a0 e0       	ldi	r26, 0x00	; 0
     b5e:	b0 e4       	ldi	r27, 0x40	; 64
     b60:	89 83       	std	Y+1, r24	; 0x01
     b62:	9a 83       	std	Y+2, r25	; 0x02
     b64:	ab 83       	std	Y+3, r26	; 0x03
     b66:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     b68:	20 e0       	ldi	r18, 0x00	; 0
     b6a:	30 e0       	ldi	r19, 0x00	; 0
     b6c:	4a ef       	ldi	r20, 0xFA	; 250
     b6e:	54 e4       	ldi	r21, 0x44	; 68
     b70:	69 81       	ldd	r22, Y+1	; 0x01
     b72:	7a 81       	ldd	r23, Y+2	; 0x02
     b74:	8b 81       	ldd	r24, Y+3	; 0x03
     b76:	9c 81       	ldd	r25, Y+4	; 0x04
     b78:	0e 94 d5 13 	call	0x27aa	; 0x27aa <__mulsf3>
     b7c:	dc 01       	movw	r26, r24
     b7e:	cb 01       	movw	r24, r22
     b80:	8d 83       	std	Y+5, r24	; 0x05
     b82:	9e 83       	std	Y+6, r25	; 0x06
     b84:	af 83       	std	Y+7, r26	; 0x07
     b86:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     b88:	20 e0       	ldi	r18, 0x00	; 0
     b8a:	30 e0       	ldi	r19, 0x00	; 0
     b8c:	40 e8       	ldi	r20, 0x80	; 128
     b8e:	5f e3       	ldi	r21, 0x3F	; 63
     b90:	6d 81       	ldd	r22, Y+5	; 0x05
     b92:	7e 81       	ldd	r23, Y+6	; 0x06
     b94:	8f 81       	ldd	r24, Y+7	; 0x07
     b96:	98 85       	ldd	r25, Y+8	; 0x08
     b98:	0e 94 c4 12 	call	0x2588	; 0x2588 <__cmpsf2>
     b9c:	88 23       	and	r24, r24
     b9e:	2c f4       	brge	.+10     	; 0xbaa <_ZN7MCP_CAN13mcp2515_resetEv+0x7c>
		__ticks = 1;
     ba0:	81 e0       	ldi	r24, 0x01	; 1
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	9a 87       	std	Y+10, r25	; 0x0a
     ba6:	89 87       	std	Y+9, r24	; 0x09
     ba8:	3f c0       	rjmp	.+126    	; 0xc28 <_ZN7MCP_CAN13mcp2515_resetEv+0xfa>
	else if (__tmp > 65535)
     baa:	20 e0       	ldi	r18, 0x00	; 0
     bac:	3f ef       	ldi	r19, 0xFF	; 255
     bae:	4f e7       	ldi	r20, 0x7F	; 127
     bb0:	57 e4       	ldi	r21, 0x47	; 71
     bb2:	6d 81       	ldd	r22, Y+5	; 0x05
     bb4:	7e 81       	ldd	r23, Y+6	; 0x06
     bb6:	8f 81       	ldd	r24, Y+7	; 0x07
     bb8:	98 85       	ldd	r25, Y+8	; 0x08
     bba:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <__gesf2>
     bbe:	18 16       	cp	r1, r24
     bc0:	4c f5       	brge	.+82     	; 0xc14 <_ZN7MCP_CAN13mcp2515_resetEv+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bc2:	20 e0       	ldi	r18, 0x00	; 0
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	40 e2       	ldi	r20, 0x20	; 32
     bc8:	51 e4       	ldi	r21, 0x41	; 65
     bca:	69 81       	ldd	r22, Y+1	; 0x01
     bcc:	7a 81       	ldd	r23, Y+2	; 0x02
     bce:	8b 81       	ldd	r24, Y+3	; 0x03
     bd0:	9c 81       	ldd	r25, Y+4	; 0x04
     bd2:	0e 94 d5 13 	call	0x27aa	; 0x27aa <__mulsf3>
     bd6:	dc 01       	movw	r26, r24
     bd8:	cb 01       	movw	r24, r22
     bda:	bc 01       	movw	r22, r24
     bdc:	cd 01       	movw	r24, r26
     bde:	0e 94 30 13 	call	0x2660	; 0x2660 <__fixunssfsi>
     be2:	dc 01       	movw	r26, r24
     be4:	cb 01       	movw	r24, r22
     be6:	9a 87       	std	Y+10, r25	; 0x0a
     be8:	89 87       	std	Y+9, r24	; 0x09
     bea:	0f c0       	rjmp	.+30     	; 0xc0a <_ZN7MCP_CAN13mcp2515_resetEv+0xdc>
     bec:	88 ec       	ldi	r24, 0xC8	; 200
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	9c 87       	std	Y+12, r25	; 0x0c
     bf2:	8b 87       	std	Y+11, r24	; 0x0b
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     bf4:	8b 85       	ldd	r24, Y+11	; 0x0b
     bf6:	9c 85       	ldd	r25, Y+12	; 0x0c
     bf8:	01 97       	sbiw	r24, 0x01	; 1
     bfa:	f1 f7       	brne	.-4      	; 0xbf8 <_ZN7MCP_CAN13mcp2515_resetEv+0xca>
     bfc:	9c 87       	std	Y+12, r25	; 0x0c
     bfe:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c00:	89 85       	ldd	r24, Y+9	; 0x09
     c02:	9a 85       	ldd	r25, Y+10	; 0x0a
     c04:	01 97       	sbiw	r24, 0x01	; 1
     c06:	9a 87       	std	Y+10, r25	; 0x0a
     c08:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c0a:	89 85       	ldd	r24, Y+9	; 0x09
     c0c:	9a 85       	ldd	r25, Y+10	; 0x0a
     c0e:	00 97       	sbiw	r24, 0x00	; 0
     c10:	69 f7       	brne	.-38     	; 0xbec <_ZN7MCP_CAN13mcp2515_resetEv+0xbe>
     c12:	14 c0       	rjmp	.+40     	; 0xc3c <_ZN7MCP_CAN13mcp2515_resetEv+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c14:	6d 81       	ldd	r22, Y+5	; 0x05
     c16:	7e 81       	ldd	r23, Y+6	; 0x06
     c18:	8f 81       	ldd	r24, Y+7	; 0x07
     c1a:	98 85       	ldd	r25, Y+8	; 0x08
     c1c:	0e 94 30 13 	call	0x2660	; 0x2660 <__fixunssfsi>
     c20:	dc 01       	movw	r26, r24
     c22:	cb 01       	movw	r24, r22
     c24:	9a 87       	std	Y+10, r25	; 0x0a
     c26:	89 87       	std	Y+9, r24	; 0x09
     c28:	89 85       	ldd	r24, Y+9	; 0x09
     c2a:	9a 85       	ldd	r25, Y+10	; 0x0a
     c2c:	9e 87       	std	Y+14, r25	; 0x0e
     c2e:	8d 87       	std	Y+13, r24	; 0x0d
     c30:	8d 85       	ldd	r24, Y+13	; 0x0d
     c32:	9e 85       	ldd	r25, Y+14	; 0x0e
     c34:	01 97       	sbiw	r24, 0x01	; 1
     c36:	f1 f7       	brne	.-4      	; 0xc34 <_ZN7MCP_CAN13mcp2515_resetEv+0x106>
     c38:	9e 87       	std	Y+14, r25	; 0x0e
     c3a:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(2);
	spi_tranceiver(MCP_RESET);						//spi_readwrite(MCP_RESET);
     c3c:	80 ec       	ldi	r24, 0xC0	; 192
     c3e:	0e 94 16 11 	call	0x222c	; 0x222c <_Z14spi_tranceiverh>
	PORTB|=(1<<SS);
     c42:	88 e3       	ldi	r24, 0x38	; 56
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	28 e3       	ldi	r18, 0x38	; 56
     c48:	30 e0       	ldi	r19, 0x00	; 0
     c4a:	f9 01       	movw	r30, r18
     c4c:	20 81       	ld	r18, Z
     c4e:	20 61       	ori	r18, 0x10	; 16
     c50:	fc 01       	movw	r30, r24
     c52:	20 83       	st	Z, r18
     c54:	80 e0       	ldi	r24, 0x00	; 0
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e8       	ldi	r26, 0x80	; 128
     c5a:	bf e3       	ldi	r27, 0x3F	; 63
     c5c:	8f 87       	std	Y+15, r24	; 0x0f
     c5e:	98 8b       	std	Y+16, r25	; 0x10
     c60:	a9 8b       	std	Y+17, r26	; 0x11
     c62:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     c64:	20 e0       	ldi	r18, 0x00	; 0
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	4a ef       	ldi	r20, 0xFA	; 250
     c6a:	54 e4       	ldi	r21, 0x44	; 68
     c6c:	6f 85       	ldd	r22, Y+15	; 0x0f
     c6e:	78 89       	ldd	r23, Y+16	; 0x10
     c70:	89 89       	ldd	r24, Y+17	; 0x11
     c72:	9a 89       	ldd	r25, Y+18	; 0x12
     c74:	0e 94 d5 13 	call	0x27aa	; 0x27aa <__mulsf3>
     c78:	dc 01       	movw	r26, r24
     c7a:	cb 01       	movw	r24, r22
     c7c:	8b 8b       	std	Y+19, r24	; 0x13
     c7e:	9c 8b       	std	Y+20, r25	; 0x14
     c80:	ad 8b       	std	Y+21, r26	; 0x15
     c82:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     c84:	20 e0       	ldi	r18, 0x00	; 0
     c86:	30 e0       	ldi	r19, 0x00	; 0
     c88:	40 e8       	ldi	r20, 0x80	; 128
     c8a:	5f e3       	ldi	r21, 0x3F	; 63
     c8c:	6b 89       	ldd	r22, Y+19	; 0x13
     c8e:	7c 89       	ldd	r23, Y+20	; 0x14
     c90:	8d 89       	ldd	r24, Y+21	; 0x15
     c92:	9e 89       	ldd	r25, Y+22	; 0x16
     c94:	0e 94 c4 12 	call	0x2588	; 0x2588 <__cmpsf2>
     c98:	88 23       	and	r24, r24
     c9a:	2c f4       	brge	.+10     	; 0xca6 <_ZN7MCP_CAN13mcp2515_resetEv+0x178>
		__ticks = 1;
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	98 8f       	std	Y+24, r25	; 0x18
     ca2:	8f 8b       	std	Y+23, r24	; 0x17
     ca4:	3f c0       	rjmp	.+126    	; 0xd24 <_ZN7MCP_CAN13mcp2515_resetEv+0x1f6>
	else if (__tmp > 65535)
     ca6:	20 e0       	ldi	r18, 0x00	; 0
     ca8:	3f ef       	ldi	r19, 0xFF	; 255
     caa:	4f e7       	ldi	r20, 0x7F	; 127
     cac:	57 e4       	ldi	r21, 0x47	; 71
     cae:	6b 89       	ldd	r22, Y+19	; 0x13
     cb0:	7c 89       	ldd	r23, Y+20	; 0x14
     cb2:	8d 89       	ldd	r24, Y+21	; 0x15
     cb4:	9e 89       	ldd	r25, Y+22	; 0x16
     cb6:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <__gesf2>
     cba:	18 16       	cp	r1, r24
     cbc:	4c f5       	brge	.+82     	; 0xd10 <_ZN7MCP_CAN13mcp2515_resetEv+0x1e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cbe:	20 e0       	ldi	r18, 0x00	; 0
     cc0:	30 e0       	ldi	r19, 0x00	; 0
     cc2:	40 e2       	ldi	r20, 0x20	; 32
     cc4:	51 e4       	ldi	r21, 0x41	; 65
     cc6:	6f 85       	ldd	r22, Y+15	; 0x0f
     cc8:	78 89       	ldd	r23, Y+16	; 0x10
     cca:	89 89       	ldd	r24, Y+17	; 0x11
     ccc:	9a 89       	ldd	r25, Y+18	; 0x12
     cce:	0e 94 d5 13 	call	0x27aa	; 0x27aa <__mulsf3>
     cd2:	dc 01       	movw	r26, r24
     cd4:	cb 01       	movw	r24, r22
     cd6:	bc 01       	movw	r22, r24
     cd8:	cd 01       	movw	r24, r26
     cda:	0e 94 30 13 	call	0x2660	; 0x2660 <__fixunssfsi>
     cde:	dc 01       	movw	r26, r24
     ce0:	cb 01       	movw	r24, r22
     ce2:	98 8f       	std	Y+24, r25	; 0x18
     ce4:	8f 8b       	std	Y+23, r24	; 0x17
     ce6:	0f c0       	rjmp	.+30     	; 0xd06 <_ZN7MCP_CAN13mcp2515_resetEv+0x1d8>
     ce8:	88 ec       	ldi	r24, 0xC8	; 200
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	9a 8f       	std	Y+26, r25	; 0x1a
     cee:	89 8f       	std	Y+25, r24	; 0x19
     cf0:	89 8d       	ldd	r24, Y+25	; 0x19
     cf2:	9a 8d       	ldd	r25, Y+26	; 0x1a
     cf4:	01 97       	sbiw	r24, 0x01	; 1
     cf6:	f1 f7       	brne	.-4      	; 0xcf4 <_ZN7MCP_CAN13mcp2515_resetEv+0x1c6>
     cf8:	9a 8f       	std	Y+26, r25	; 0x1a
     cfa:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cfc:	8f 89       	ldd	r24, Y+23	; 0x17
     cfe:	98 8d       	ldd	r25, Y+24	; 0x18
     d00:	01 97       	sbiw	r24, 0x01	; 1
     d02:	98 8f       	std	Y+24, r25	; 0x18
     d04:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d06:	8f 89       	ldd	r24, Y+23	; 0x17
     d08:	98 8d       	ldd	r25, Y+24	; 0x18
     d0a:	00 97       	sbiw	r24, 0x00	; 0
     d0c:	69 f7       	brne	.-38     	; 0xce8 <_ZN7MCP_CAN13mcp2515_resetEv+0x1ba>
     d0e:	14 c0       	rjmp	.+40     	; 0xd38 <_ZN7MCP_CAN13mcp2515_resetEv+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d10:	6b 89       	ldd	r22, Y+19	; 0x13
     d12:	7c 89       	ldd	r23, Y+20	; 0x14
     d14:	8d 89       	ldd	r24, Y+21	; 0x15
     d16:	9e 89       	ldd	r25, Y+22	; 0x16
     d18:	0e 94 30 13 	call	0x2660	; 0x2660 <__fixunssfsi>
     d1c:	dc 01       	movw	r26, r24
     d1e:	cb 01       	movw	r24, r22
     d20:	98 8f       	std	Y+24, r25	; 0x18
     d22:	8f 8b       	std	Y+23, r24	; 0x17
     d24:	8f 89       	ldd	r24, Y+23	; 0x17
     d26:	98 8d       	ldd	r25, Y+24	; 0x18
     d28:	9c 8f       	std	Y+28, r25	; 0x1c
     d2a:	8b 8f       	std	Y+27, r24	; 0x1b
     d2c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d2e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d30:	01 97       	sbiw	r24, 0x01	; 1
     d32:	f1 f7       	brne	.-4      	; 0xd30 <_ZN7MCP_CAN13mcp2515_resetEv+0x202>
     d34:	9c 8f       	std	Y+28, r25	; 0x1c
     d36:	8b 8f       	std	Y+27, r24	; 0x1b
	//MCP2515_UNSELECT();
	_delay_ms(1);
}
     d38:	6e 96       	adiw	r28, 0x1e	; 30
     d3a:	0f b6       	in	r0, 0x3f	; 63
     d3c:	f8 94       	cli
     d3e:	de bf       	out	0x3e, r29	; 62
     d40:	0f be       	out	0x3f, r0	; 63
     d42:	cd bf       	out	0x3d, r28	; 61
     d44:	df 91       	pop	r29
     d46:	cf 91       	pop	r28
     d48:	08 95       	ret

00000d4a <_ZN7MCP_CAN20mcp2515_readRegisterEh>:
/*********************************************************************************************************
 ** Function name:           mcp2515_readRegister
 ** Descriptions:            read register
 *********************************************************************************************************/
INT8U MCP_CAN::mcp2515_readRegister(const INT8U address) //SHUBHAM
{
     d4a:	cf 93       	push	r28
     d4c:	df 93       	push	r29
     d4e:	cd b7       	in	r28, 0x3d	; 61
     d50:	de b7       	in	r29, 0x3e	; 62
     d52:	a0 97       	sbiw	r28, 0x20	; 32
     d54:	0f b6       	in	r0, 0x3f	; 63
     d56:	f8 94       	cli
     d58:	de bf       	out	0x3e, r29	; 62
     d5a:	0f be       	out	0x3f, r0	; 63
     d5c:	cd bf       	out	0x3d, r28	; 61
     d5e:	9f 8f       	std	Y+31, r25	; 0x1f
     d60:	8e 8f       	std	Y+30, r24	; 0x1e
     d62:	68 a3       	std	Y+32, r22	; 0x20
	INT8U ret;
	//MCP2515_SELECT();
	PORTB&=~(1<<SS);
     d64:	88 e3       	ldi	r24, 0x38	; 56
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	28 e3       	ldi	r18, 0x38	; 56
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	f9 01       	movw	r30, r18
     d6e:	20 81       	ld	r18, Z
     d70:	2f 7e       	andi	r18, 0xEF	; 239
     d72:	fc 01       	movw	r30, r24
     d74:	20 83       	st	Z, r18
     d76:	80 e0       	ldi	r24, 0x00	; 0
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	a0 e0       	ldi	r26, 0x00	; 0
     d7c:	b0 e4       	ldi	r27, 0x40	; 64
     d7e:	8a 83       	std	Y+2, r24	; 0x02
     d80:	9b 83       	std	Y+3, r25	; 0x03
     d82:	ac 83       	std	Y+4, r26	; 0x04
     d84:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     d86:	20 e0       	ldi	r18, 0x00	; 0
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	4a ef       	ldi	r20, 0xFA	; 250
     d8c:	54 e4       	ldi	r21, 0x44	; 68
     d8e:	6a 81       	ldd	r22, Y+2	; 0x02
     d90:	7b 81       	ldd	r23, Y+3	; 0x03
     d92:	8c 81       	ldd	r24, Y+4	; 0x04
     d94:	9d 81       	ldd	r25, Y+5	; 0x05
     d96:	0e 94 d5 13 	call	0x27aa	; 0x27aa <__mulsf3>
     d9a:	dc 01       	movw	r26, r24
     d9c:	cb 01       	movw	r24, r22
     d9e:	8e 83       	std	Y+6, r24	; 0x06
     da0:	9f 83       	std	Y+7, r25	; 0x07
     da2:	a8 87       	std	Y+8, r26	; 0x08
     da4:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
     da6:	20 e0       	ldi	r18, 0x00	; 0
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	40 e8       	ldi	r20, 0x80	; 128
     dac:	5f e3       	ldi	r21, 0x3F	; 63
     dae:	6e 81       	ldd	r22, Y+6	; 0x06
     db0:	7f 81       	ldd	r23, Y+7	; 0x07
     db2:	88 85       	ldd	r24, Y+8	; 0x08
     db4:	99 85       	ldd	r25, Y+9	; 0x09
     db6:	0e 94 c4 12 	call	0x2588	; 0x2588 <__cmpsf2>
     dba:	88 23       	and	r24, r24
     dbc:	2c f4       	brge	.+10     	; 0xdc8 <_ZN7MCP_CAN20mcp2515_readRegisterEh+0x7e>
		__ticks = 1;
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	9b 87       	std	Y+11, r25	; 0x0b
     dc4:	8a 87       	std	Y+10, r24	; 0x0a
     dc6:	3f c0       	rjmp	.+126    	; 0xe46 <_ZN7MCP_CAN20mcp2515_readRegisterEh+0xfc>
	else if (__tmp > 65535)
     dc8:	20 e0       	ldi	r18, 0x00	; 0
     dca:	3f ef       	ldi	r19, 0xFF	; 255
     dcc:	4f e7       	ldi	r20, 0x7F	; 127
     dce:	57 e4       	ldi	r21, 0x47	; 71
     dd0:	6e 81       	ldd	r22, Y+6	; 0x06
     dd2:	7f 81       	ldd	r23, Y+7	; 0x07
     dd4:	88 85       	ldd	r24, Y+8	; 0x08
     dd6:	99 85       	ldd	r25, Y+9	; 0x09
     dd8:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <__gesf2>
     ddc:	18 16       	cp	r1, r24
     dde:	4c f5       	brge	.+82     	; 0xe32 <_ZN7MCP_CAN20mcp2515_readRegisterEh+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     de0:	20 e0       	ldi	r18, 0x00	; 0
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	40 e2       	ldi	r20, 0x20	; 32
     de6:	51 e4       	ldi	r21, 0x41	; 65
     de8:	6a 81       	ldd	r22, Y+2	; 0x02
     dea:	7b 81       	ldd	r23, Y+3	; 0x03
     dec:	8c 81       	ldd	r24, Y+4	; 0x04
     dee:	9d 81       	ldd	r25, Y+5	; 0x05
     df0:	0e 94 d5 13 	call	0x27aa	; 0x27aa <__mulsf3>
     df4:	dc 01       	movw	r26, r24
     df6:	cb 01       	movw	r24, r22
     df8:	bc 01       	movw	r22, r24
     dfa:	cd 01       	movw	r24, r26
     dfc:	0e 94 30 13 	call	0x2660	; 0x2660 <__fixunssfsi>
     e00:	dc 01       	movw	r26, r24
     e02:	cb 01       	movw	r24, r22
     e04:	9b 87       	std	Y+11, r25	; 0x0b
     e06:	8a 87       	std	Y+10, r24	; 0x0a
     e08:	0f c0       	rjmp	.+30     	; 0xe28 <_ZN7MCP_CAN20mcp2515_readRegisterEh+0xde>
     e0a:	88 ec       	ldi	r24, 0xC8	; 200
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	9d 87       	std	Y+13, r25	; 0x0d
     e10:	8c 87       	std	Y+12, r24	; 0x0c
     e12:	8c 85       	ldd	r24, Y+12	; 0x0c
     e14:	9d 85       	ldd	r25, Y+13	; 0x0d
     e16:	01 97       	sbiw	r24, 0x01	; 1
     e18:	f1 f7       	brne	.-4      	; 0xe16 <_ZN7MCP_CAN20mcp2515_readRegisterEh+0xcc>
     e1a:	9d 87       	std	Y+13, r25	; 0x0d
     e1c:	8c 87       	std	Y+12, r24	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e1e:	8a 85       	ldd	r24, Y+10	; 0x0a
     e20:	9b 85       	ldd	r25, Y+11	; 0x0b
     e22:	01 97       	sbiw	r24, 0x01	; 1
     e24:	9b 87       	std	Y+11, r25	; 0x0b
     e26:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e28:	8a 85       	ldd	r24, Y+10	; 0x0a
     e2a:	9b 85       	ldd	r25, Y+11	; 0x0b
     e2c:	00 97       	sbiw	r24, 0x00	; 0
     e2e:	69 f7       	brne	.-38     	; 0xe0a <_ZN7MCP_CAN20mcp2515_readRegisterEh+0xc0>
     e30:	14 c0       	rjmp	.+40     	; 0xe5a <_ZN7MCP_CAN20mcp2515_readRegisterEh+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e32:	6e 81       	ldd	r22, Y+6	; 0x06
     e34:	7f 81       	ldd	r23, Y+7	; 0x07
     e36:	88 85       	ldd	r24, Y+8	; 0x08
     e38:	99 85       	ldd	r25, Y+9	; 0x09
     e3a:	0e 94 30 13 	call	0x2660	; 0x2660 <__fixunssfsi>
     e3e:	dc 01       	movw	r26, r24
     e40:	cb 01       	movw	r24, r22
     e42:	9b 87       	std	Y+11, r25	; 0x0b
     e44:	8a 87       	std	Y+10, r24	; 0x0a
     e46:	8a 85       	ldd	r24, Y+10	; 0x0a
     e48:	9b 85       	ldd	r25, Y+11	; 0x0b
     e4a:	9f 87       	std	Y+15, r25	; 0x0f
     e4c:	8e 87       	std	Y+14, r24	; 0x0e
     e4e:	8e 85       	ldd	r24, Y+14	; 0x0e
     e50:	9f 85       	ldd	r25, Y+15	; 0x0f
     e52:	01 97       	sbiw	r24, 0x01	; 1
     e54:	f1 f7       	brne	.-4      	; 0xe52 <_ZN7MCP_CAN20mcp2515_readRegisterEh+0x108>
     e56:	9f 87       	std	Y+15, r25	; 0x0f
     e58:	8e 87       	std	Y+14, r24	; 0x0e
	_delay_ms(2);
	spi_tranceiver(MCP_READ);			//spi_readwrite(MCP_READ);
     e5a:	83 e0       	ldi	r24, 0x03	; 3
     e5c:	0e 94 16 11 	call	0x222c	; 0x222c <_Z14spi_tranceiverh>
	spi_tranceiver(address);			//spi_readwrite(address);
     e60:	88 a1       	ldd	r24, Y+32	; 0x20
     e62:	0e 94 16 11 	call	0x222c	; 0x222c <_Z14spi_tranceiverh>
     e66:	80 e0       	ldi	r24, 0x00	; 0
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	a0 e2       	ldi	r26, 0x20	; 32
     e6c:	b1 e4       	ldi	r27, 0x41	; 65
     e6e:	88 8b       	std	Y+16, r24	; 0x10
     e70:	99 8b       	std	Y+17, r25	; 0x11
     e72:	aa 8b       	std	Y+18, r26	; 0x12
     e74:	bb 8b       	std	Y+19, r27	; 0x13
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     e76:	20 e0       	ldi	r18, 0x00	; 0
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	4a ef       	ldi	r20, 0xFA	; 250
     e7c:	54 e4       	ldi	r21, 0x44	; 68
     e7e:	68 89       	ldd	r22, Y+16	; 0x10
     e80:	79 89       	ldd	r23, Y+17	; 0x11
     e82:	8a 89       	ldd	r24, Y+18	; 0x12
     e84:	9b 89       	ldd	r25, Y+19	; 0x13
     e86:	0e 94 d5 13 	call	0x27aa	; 0x27aa <__mulsf3>
     e8a:	dc 01       	movw	r26, r24
     e8c:	cb 01       	movw	r24, r22
     e8e:	8c 8b       	std	Y+20, r24	; 0x14
     e90:	9d 8b       	std	Y+21, r25	; 0x15
     e92:	ae 8b       	std	Y+22, r26	; 0x16
     e94:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
     e96:	20 e0       	ldi	r18, 0x00	; 0
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	40 e8       	ldi	r20, 0x80	; 128
     e9c:	5f e3       	ldi	r21, 0x3F	; 63
     e9e:	6c 89       	ldd	r22, Y+20	; 0x14
     ea0:	7d 89       	ldd	r23, Y+21	; 0x15
     ea2:	8e 89       	ldd	r24, Y+22	; 0x16
     ea4:	9f 89       	ldd	r25, Y+23	; 0x17
     ea6:	0e 94 c4 12 	call	0x2588	; 0x2588 <__cmpsf2>
     eaa:	88 23       	and	r24, r24
     eac:	2c f4       	brge	.+10     	; 0xeb8 <_ZN7MCP_CAN20mcp2515_readRegisterEh+0x16e>
		__ticks = 1;
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	99 8f       	std	Y+25, r25	; 0x19
     eb4:	88 8f       	std	Y+24, r24	; 0x18
     eb6:	3f c0       	rjmp	.+126    	; 0xf36 <_ZN7MCP_CAN20mcp2515_readRegisterEh+0x1ec>
	else if (__tmp > 65535)
     eb8:	20 e0       	ldi	r18, 0x00	; 0
     eba:	3f ef       	ldi	r19, 0xFF	; 255
     ebc:	4f e7       	ldi	r20, 0x7F	; 127
     ebe:	57 e4       	ldi	r21, 0x47	; 71
     ec0:	6c 89       	ldd	r22, Y+20	; 0x14
     ec2:	7d 89       	ldd	r23, Y+21	; 0x15
     ec4:	8e 89       	ldd	r24, Y+22	; 0x16
     ec6:	9f 89       	ldd	r25, Y+23	; 0x17
     ec8:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <__gesf2>
     ecc:	18 16       	cp	r1, r24
     ece:	4c f5       	brge	.+82     	; 0xf22 <_ZN7MCP_CAN20mcp2515_readRegisterEh+0x1d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ed0:	20 e0       	ldi	r18, 0x00	; 0
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	40 e2       	ldi	r20, 0x20	; 32
     ed6:	51 e4       	ldi	r21, 0x41	; 65
     ed8:	68 89       	ldd	r22, Y+16	; 0x10
     eda:	79 89       	ldd	r23, Y+17	; 0x11
     edc:	8a 89       	ldd	r24, Y+18	; 0x12
     ede:	9b 89       	ldd	r25, Y+19	; 0x13
     ee0:	0e 94 d5 13 	call	0x27aa	; 0x27aa <__mulsf3>
     ee4:	dc 01       	movw	r26, r24
     ee6:	cb 01       	movw	r24, r22
     ee8:	bc 01       	movw	r22, r24
     eea:	cd 01       	movw	r24, r26
     eec:	0e 94 30 13 	call	0x2660	; 0x2660 <__fixunssfsi>
     ef0:	dc 01       	movw	r26, r24
     ef2:	cb 01       	movw	r24, r22
     ef4:	99 8f       	std	Y+25, r25	; 0x19
     ef6:	88 8f       	std	Y+24, r24	; 0x18
     ef8:	0f c0       	rjmp	.+30     	; 0xf18 <_ZN7MCP_CAN20mcp2515_readRegisterEh+0x1ce>
     efa:	88 ec       	ldi	r24, 0xC8	; 200
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	9b 8f       	std	Y+27, r25	; 0x1b
     f00:	8a 8f       	std	Y+26, r24	; 0x1a
     f02:	8a 8d       	ldd	r24, Y+26	; 0x1a
     f04:	9b 8d       	ldd	r25, Y+27	; 0x1b
     f06:	01 97       	sbiw	r24, 0x01	; 1
     f08:	f1 f7       	brne	.-4      	; 0xf06 <_ZN7MCP_CAN20mcp2515_readRegisterEh+0x1bc>
     f0a:	9b 8f       	std	Y+27, r25	; 0x1b
     f0c:	8a 8f       	std	Y+26, r24	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f0e:	88 8d       	ldd	r24, Y+24	; 0x18
     f10:	99 8d       	ldd	r25, Y+25	; 0x19
     f12:	01 97       	sbiw	r24, 0x01	; 1
     f14:	99 8f       	std	Y+25, r25	; 0x19
     f16:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f18:	88 8d       	ldd	r24, Y+24	; 0x18
     f1a:	99 8d       	ldd	r25, Y+25	; 0x19
     f1c:	00 97       	sbiw	r24, 0x00	; 0
     f1e:	69 f7       	brne	.-38     	; 0xefa <_ZN7MCP_CAN20mcp2515_readRegisterEh+0x1b0>
     f20:	14 c0       	rjmp	.+40     	; 0xf4a <_ZN7MCP_CAN20mcp2515_readRegisterEh+0x200>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f22:	6c 89       	ldd	r22, Y+20	; 0x14
     f24:	7d 89       	ldd	r23, Y+21	; 0x15
     f26:	8e 89       	ldd	r24, Y+22	; 0x16
     f28:	9f 89       	ldd	r25, Y+23	; 0x17
     f2a:	0e 94 30 13 	call	0x2660	; 0x2660 <__fixunssfsi>
     f2e:	dc 01       	movw	r26, r24
     f30:	cb 01       	movw	r24, r22
     f32:	99 8f       	std	Y+25, r25	; 0x19
     f34:	88 8f       	std	Y+24, r24	; 0x18
     f36:	88 8d       	ldd	r24, Y+24	; 0x18
     f38:	99 8d       	ldd	r25, Y+25	; 0x19
     f3a:	9d 8f       	std	Y+29, r25	; 0x1d
     f3c:	8c 8f       	std	Y+28, r24	; 0x1c
     f3e:	8c 8d       	ldd	r24, Y+28	; 0x1c
     f40:	9d 8d       	ldd	r25, Y+29	; 0x1d
     f42:	01 97       	sbiw	r24, 0x01	; 1
     f44:	f1 f7       	brne	.-4      	; 0xf42 <_ZN7MCP_CAN20mcp2515_readRegisterEh+0x1f8>
     f46:	9d 8f       	std	Y+29, r25	; 0x1d
     f48:	8c 8f       	std	Y+28, r24	; 0x1c
	//spi_tranceiver(MCP_RESET);			//ret = spi_read();  //spi_readwrite(0x00)
	_delay_ms(10);
	ret = spi_tranceiver(0x00);//SHUBHAM don't care data
     f4a:	80 e0       	ldi	r24, 0x00	; 0
     f4c:	0e 94 16 11 	call	0x222c	; 0x222c <_Z14spi_tranceiverh>
     f50:	89 83       	std	Y+1, r24	; 0x01
	PORTB|=(1<<SS);  //MCP2515_UNSELECT();
     f52:	88 e3       	ldi	r24, 0x38	; 56
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	28 e3       	ldi	r18, 0x38	; 56
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	f9 01       	movw	r30, r18
     f5c:	20 81       	ld	r18, Z
     f5e:	20 61       	ori	r18, 0x10	; 16
     f60:	fc 01       	movw	r30, r24
     f62:	20 83       	st	Z, r18

	return ret;
     f64:	89 81       	ldd	r24, Y+1	; 0x01
}
     f66:	a0 96       	adiw	r28, 0x20	; 32
     f68:	0f b6       	in	r0, 0x3f	; 63
     f6a:	f8 94       	cli
     f6c:	de bf       	out	0x3e, r29	; 62
     f6e:	0f be       	out	0x3f, r0	; 63
     f70:	cd bf       	out	0x3d, r28	; 61
     f72:	df 91       	pop	r29
     f74:	cf 91       	pop	r28
     f76:	08 95       	ret

00000f78 <_ZN7MCP_CAN19mcp2515_setRegisterEhh>:
/*********************************************************************************************************
 ** Function name:           mcp2515_setRegister
 ** Descriptions:            set register
 *********************************************************************************************************/
void MCP_CAN::mcp2515_setRegister(const INT8U address, const INT8U value)
{
     f78:	cf 93       	push	r28
     f7a:	df 93       	push	r29
     f7c:	00 d0       	rcall	.+0      	; 0xf7e <_ZN7MCP_CAN19mcp2515_setRegisterEhh+0x6>
     f7e:	00 d0       	rcall	.+0      	; 0xf80 <_ZN7MCP_CAN19mcp2515_setRegisterEhh+0x8>
     f80:	cd b7       	in	r28, 0x3d	; 61
     f82:	de b7       	in	r29, 0x3e	; 62
     f84:	9a 83       	std	Y+2, r25	; 0x02
     f86:	89 83       	std	Y+1, r24	; 0x01
     f88:	6b 83       	std	Y+3, r22	; 0x03
     f8a:	4c 83       	std	Y+4, r20	; 0x04
	//();
	PORTB&=~(1<<SS);
     f8c:	88 e3       	ldi	r24, 0x38	; 56
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	28 e3       	ldi	r18, 0x38	; 56
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	f9 01       	movw	r30, r18
     f96:	20 81       	ld	r18, Z
     f98:	2f 7e       	andi	r18, 0xEF	; 239
     f9a:	fc 01       	movw	r30, r24
     f9c:	20 83       	st	Z, r18
	spi_tranceiver(MCP_WRITE);
     f9e:	82 e0       	ldi	r24, 0x02	; 2
     fa0:	0e 94 16 11 	call	0x222c	; 0x222c <_Z14spi_tranceiverh>
	spi_tranceiver(address);
     fa4:	8b 81       	ldd	r24, Y+3	; 0x03
     fa6:	0e 94 16 11 	call	0x222c	; 0x222c <_Z14spi_tranceiverh>
	spi_tranceiver(value);
     faa:	8c 81       	ldd	r24, Y+4	; 0x04
     fac:	0e 94 16 11 	call	0x222c	; 0x222c <_Z14spi_tranceiverh>
	PORTB|=(1<<SS);//MCP2515_UNSELECT();
     fb0:	88 e3       	ldi	r24, 0x38	; 56
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	28 e3       	ldi	r18, 0x38	; 56
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	f9 01       	movw	r30, r18
     fba:	20 81       	ld	r18, Z
     fbc:	20 61       	ori	r18, 0x10	; 16
     fbe:	fc 01       	movw	r30, r24
     fc0:	20 83       	st	Z, r18
}
     fc2:	0f 90       	pop	r0
     fc4:	0f 90       	pop	r0
     fc6:	0f 90       	pop	r0
     fc8:	0f 90       	pop	r0
     fca:	df 91       	pop	r29
     fcc:	cf 91       	pop	r28
     fce:	08 95       	ret

00000fd0 <_ZN7MCP_CAN20mcp2515_setRegisterSEhPKhh>:
/*********************************************************************************************************
 ** Function name:           mcp2515_setRegisterS
 ** Descriptions:            set registerS
 *********************************************************************************************************/
void MCP_CAN::mcp2515_setRegisterS(const INT8U address, const INT8U values[], const INT8U n)
{	INT8U i;
     fd0:	cf 93       	push	r28
     fd2:	df 93       	push	r29
     fd4:	cd b7       	in	r28, 0x3d	; 61
     fd6:	de b7       	in	r29, 0x3e	; 62
     fd8:	27 97       	sbiw	r28, 0x07	; 7
     fda:	0f b6       	in	r0, 0x3f	; 63
     fdc:	f8 94       	cli
     fde:	de bf       	out	0x3e, r29	; 62
     fe0:	0f be       	out	0x3f, r0	; 63
     fe2:	cd bf       	out	0x3d, r28	; 61
     fe4:	9b 83       	std	Y+3, r25	; 0x03
     fe6:	8a 83       	std	Y+2, r24	; 0x02
     fe8:	6c 83       	std	Y+4, r22	; 0x04
     fea:	5e 83       	std	Y+6, r21	; 0x06
     fec:	4d 83       	std	Y+5, r20	; 0x05
     fee:	2f 83       	std	Y+7, r18	; 0x07
	PORTB&=~(1<<SS);	//MCP2515_SELECT();
     ff0:	88 e3       	ldi	r24, 0x38	; 56
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	28 e3       	ldi	r18, 0x38	; 56
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	f9 01       	movw	r30, r18
     ffa:	20 81       	ld	r18, Z
     ffc:	2f 7e       	andi	r18, 0xEF	; 239
     ffe:	fc 01       	movw	r30, r24
    1000:	20 83       	st	Z, r18

	spi_tranceiver(MCP_WRITE);						//spi_readwrite(MCP_READ);
    1002:	82 e0       	ldi	r24, 0x02	; 2
    1004:	0e 94 16 11 	call	0x222c	; 0x222c <_Z14spi_tranceiverh>
	spi_tranceiver(address);						//spi_readwrite(address);
    1008:	8c 81       	ldd	r24, Y+4	; 0x04
    100a:	0e 94 16 11 	call	0x222c	; 0x222c <_Z14spi_tranceiverh>

	for (i = 0; i < n; i++)
    100e:	19 82       	std	Y+1, r1	; 0x01
    1010:	0e c0       	rjmp	.+28     	; 0x102e <_ZN7MCP_CAN20mcp2515_setRegisterSEhPKhh+0x5e>
	{
		spi_tranceiver(values[i]);
    1012:	89 81       	ldd	r24, Y+1	; 0x01
    1014:	88 2f       	mov	r24, r24
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	2d 81       	ldd	r18, Y+5	; 0x05
    101a:	3e 81       	ldd	r19, Y+6	; 0x06
    101c:	82 0f       	add	r24, r18
    101e:	93 1f       	adc	r25, r19
    1020:	fc 01       	movw	r30, r24
    1022:	80 81       	ld	r24, Z
    1024:	0e 94 16 11 	call	0x222c	; 0x222c <_Z14spi_tranceiverh>
	PORTB&=~(1<<SS);	//MCP2515_SELECT();

	spi_tranceiver(MCP_WRITE);						//spi_readwrite(MCP_READ);
	spi_tranceiver(address);						//spi_readwrite(address);

	for (i = 0; i < n; i++)
    1028:	89 81       	ldd	r24, Y+1	; 0x01
    102a:	8f 5f       	subi	r24, 0xFF	; 255
    102c:	89 83       	std	Y+1, r24	; 0x01
    102e:	99 81       	ldd	r25, Y+1	; 0x01
    1030:	8f 81       	ldd	r24, Y+7	; 0x07
    1032:	98 17       	cp	r25, r24
    1034:	70 f3       	brcs	.-36     	; 0x1012 <_ZN7MCP_CAN20mcp2515_setRegisterSEhPKhh+0x42>
	{
		spi_tranceiver(values[i]);

	}
	PORTB|=(1<<SS);
    1036:	88 e3       	ldi	r24, 0x38	; 56
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	28 e3       	ldi	r18, 0x38	; 56
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	f9 01       	movw	r30, r18
    1040:	20 81       	ld	r18, Z
    1042:	20 61       	ori	r18, 0x10	; 16
    1044:	fc 01       	movw	r30, r24
    1046:	20 83       	st	Z, r18

	//MCP2515_UNSELECT();
}
    1048:	27 96       	adiw	r28, 0x07	; 7
    104a:	0f b6       	in	r0, 0x3f	; 63
    104c:	f8 94       	cli
    104e:	de bf       	out	0x3e, r29	; 62
    1050:	0f be       	out	0x3f, r0	; 63
    1052:	cd bf       	out	0x3d, r28	; 61
    1054:	df 91       	pop	r29
    1056:	cf 91       	pop	r28
    1058:	08 95       	ret

0000105a <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh>:
/*********************************************************************************************************
 ** Function name:           mcp2515_modifyRegister
 ** Descriptions:            set bit of one register
 *********************************************************************************************************/
void MCP_CAN::mcp2515_modifyRegister(const INT8U address, const INT8U mask, const INT8U data)
{
    105a:	cf 93       	push	r28
    105c:	df 93       	push	r29
    105e:	00 d0       	rcall	.+0      	; 0x1060 <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh+0x6>
    1060:	00 d0       	rcall	.+0      	; 0x1062 <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh+0x8>
    1062:	1f 92       	push	r1
    1064:	cd b7       	in	r28, 0x3d	; 61
    1066:	de b7       	in	r29, 0x3e	; 62
    1068:	9a 83       	std	Y+2, r25	; 0x02
    106a:	89 83       	std	Y+1, r24	; 0x01
    106c:	6b 83       	std	Y+3, r22	; 0x03
    106e:	4c 83       	std	Y+4, r20	; 0x04
    1070:	2d 83       	std	Y+5, r18	; 0x05
	//	MCP2515_SELECT();
	PORTB&=~(1<<SS);
    1072:	88 e3       	ldi	r24, 0x38	; 56
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	28 e3       	ldi	r18, 0x38	; 56
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	f9 01       	movw	r30, r18
    107c:	20 81       	ld	r18, Z
    107e:	2f 7e       	andi	r18, 0xEF	; 239
    1080:	fc 01       	movw	r30, r24
    1082:	20 83       	st	Z, r18


	spi_tranceiver(MCP_BITMOD);
    1084:	85 e0       	ldi	r24, 0x05	; 5
    1086:	0e 94 16 11 	call	0x222c	; 0x222c <_Z14spi_tranceiverh>
	spi_tranceiver(address);
    108a:	8b 81       	ldd	r24, Y+3	; 0x03
    108c:	0e 94 16 11 	call	0x222c	; 0x222c <_Z14spi_tranceiverh>
	spi_tranceiver(mask);
    1090:	8c 81       	ldd	r24, Y+4	; 0x04
    1092:	0e 94 16 11 	call	0x222c	; 0x222c <_Z14spi_tranceiverh>
	spi_tranceiver(data);
    1096:	8d 81       	ldd	r24, Y+5	; 0x05
    1098:	0e 94 16 11 	call	0x222c	; 0x222c <_Z14spi_tranceiverh>
	PORTB|=(1<<SS);
    109c:	88 e3       	ldi	r24, 0x38	; 56
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	28 e3       	ldi	r18, 0x38	; 56
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	f9 01       	movw	r30, r18
    10a6:	20 81       	ld	r18, Z
    10a8:	20 61       	ori	r18, 0x10	; 16
    10aa:	fc 01       	movw	r30, r24
    10ac:	20 83       	st	Z, r18
	//	MCP2515_UNSELECT();
}
    10ae:	0f 90       	pop	r0
    10b0:	0f 90       	pop	r0
    10b2:	0f 90       	pop	r0
    10b4:	0f 90       	pop	r0
    10b6:	0f 90       	pop	r0
    10b8:	df 91       	pop	r29
    10ba:	cf 91       	pop	r28
    10bc:	08 95       	ret

000010be <_ZN7MCP_CAN23mcp2515_setCANCTRL_ModeEh>:
/*********************************************************************************************************
 ** Function name:           mcp2515_setCANCTRL_Mode
 ** Descriptions:            set control mode
 *********************************************************************************************************/
INT8U MCP_CAN::mcp2515_setCANCTRL_Mode(const INT8U newmode)
{
    10be:	cf 93       	push	r28
    10c0:	df 93       	push	r29
    10c2:	00 d0       	rcall	.+0      	; 0x10c4 <_ZN7MCP_CAN23mcp2515_setCANCTRL_ModeEh+0x6>
    10c4:	00 d0       	rcall	.+0      	; 0x10c6 <_ZN7MCP_CAN23mcp2515_setCANCTRL_ModeEh+0x8>
    10c6:	cd b7       	in	r28, 0x3d	; 61
    10c8:	de b7       	in	r29, 0x3e	; 62
    10ca:	9b 83       	std	Y+3, r25	; 0x03
    10cc:	8a 83       	std	Y+2, r24	; 0x02
    10ce:	6c 83       	std	Y+4, r22	; 0x04
	INT8U i;

	mcp2515_modifyRegister(MCP_CANCTRL, MODE_MASK, newmode); //sets ip chip in configuration mode
    10d0:	8a 81       	ldd	r24, Y+2	; 0x02
    10d2:	9b 81       	ldd	r25, Y+3	; 0x03
    10d4:	2c 81       	ldd	r18, Y+4	; 0x04
    10d6:	40 ee       	ldi	r20, 0xE0	; 224
    10d8:	6f e0       	ldi	r22, 0x0F	; 15
    10da:	bf df       	rcall	.-130    	; 0x105a <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh>
    10dc:	8a 81       	ldd	r24, Y+2	; 0x02


	i = mcp2515_readRegister(MCP_CANCTRL);                     //SHUBHAM
    10de:	9b 81       	ldd	r25, Y+3	; 0x03
    10e0:	6f e0       	ldi	r22, 0x0F	; 15
    10e2:	33 de       	rcall	.-922    	; 0xd4a <_ZN7MCP_CAN20mcp2515_readRegisterEh>
    10e4:	89 83       	std	Y+1, r24	; 0x01
    10e6:	89 81       	ldd	r24, Y+1	; 0x01
    10e8:	80 7e       	andi	r24, 0xE0	; 224
	i &= MODE_MASK;
    10ea:	89 83       	std	Y+1, r24	; 0x01
    10ec:	99 81       	ldd	r25, Y+1	; 0x01
    10ee:	8c 81       	ldd	r24, Y+4	; 0x04

	if (i == newmode)
    10f0:	98 17       	cp	r25, r24
    10f2:	11 f4       	brne	.+4      	; 0x10f8 <_ZN7MCP_CAN23mcp2515_setCANCTRL_ModeEh+0x3a>
    10f4:	80 e0       	ldi	r24, 0x00	; 0
    10f6:	01 c0       	rjmp	.+2      	; 0x10fa <_ZN7MCP_CAN23mcp2515_setCANCTRL_ModeEh+0x3c>
	{
		//led_blink(PIN4,1);
		return MCP2515_OK;
    10f8:	81 e0       	ldi	r24, 0x01	; 1
    10fa:	0f 90       	pop	r0
	}

	//led_blink(PIN5,1);
	return MCP2515_FAIL;
    10fc:	0f 90       	pop	r0

}
    10fe:	0f 90       	pop	r0
    1100:	0f 90       	pop	r0
    1102:	df 91       	pop	r29
    1104:	cf 91       	pop	r28
    1106:	08 95       	ret

00001108 <_ZN7MCP_CAN18mcp2515_configRateEhh>:
/*********************************************************************************************************
 ** Function name:           mcp2515_configRate
 ** Descriptions:            set boadrate
 *********************************************************************************************************/
INT8U MCP_CAN::mcp2515_configRate(const INT8U canSpeed, const INT8U clock)
{
    1108:	0f 93       	push	r16
    110a:	1f 93       	push	r17
    110c:	cf 93       	push	r28
    110e:	df 93       	push	r29
    1110:	cd b7       	in	r28, 0x3d	; 61
    1112:	de b7       	in	r29, 0x3e	; 62
    1114:	cf 54       	subi	r28, 0x4F	; 79
    1116:	d1 09       	sbc	r29, r1
    1118:	0f b6       	in	r0, 0x3f	; 63
    111a:	f8 94       	cli
    111c:	de bf       	out	0x3e, r29	; 62
    111e:	0f be       	out	0x3f, r0	; 63
    1120:	cd bf       	out	0x3d, r28	; 61
    1122:	9e 01       	movw	r18, r28
    1124:	24 5b       	subi	r18, 0xB4	; 180
    1126:	3f 4f       	sbci	r19, 0xFF	; 255
    1128:	f9 01       	movw	r30, r18
    112a:	91 83       	std	Z+1, r25	; 0x01
    112c:	80 83       	st	Z, r24
    112e:	ce 01       	movw	r24, r28
    1130:	82 5b       	subi	r24, 0xB2	; 178
    1132:	9f 4f       	sbci	r25, 0xFF	; 255
    1134:	fc 01       	movw	r30, r24
    1136:	60 83       	st	Z, r22
    1138:	ce 01       	movw	r24, r28
    113a:	81 5b       	subi	r24, 0xB1	; 177
    113c:	9f 4f       	sbci	r25, 0xFF	; 255
    113e:	fc 01       	movw	r30, r24
    1140:	40 83       	st	Z, r20
	INT8U set, cfg1, cfg2, cfg3,res;
	set = 1;
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	89 83       	std	Y+1, r24	; 0x01

	switch (canSpeed)
    1146:	ce 01       	movw	r24, r28
    1148:	82 5b       	subi	r24, 0xB2	; 178
    114a:	9f 4f       	sbci	r25, 0xFF	; 255
    114c:	fc 01       	movw	r30, r24
    114e:	80 81       	ld	r24, Z
    1150:	88 2f       	mov	r24, r24
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	8a 30       	cpi	r24, 0x0A	; 10
    1156:	91 05       	cpc	r25, r1
    1158:	11 f1       	breq	.+68     	; 0x119e <_ZN7MCP_CAN18mcp2515_configRateEhh+0x96>
    115a:	8b 30       	cpi	r24, 0x0B	; 11
    115c:	91 05       	cpc	r25, r1
    115e:	3c f4       	brge	.+14     	; 0x116e <_ZN7MCP_CAN18mcp2515_configRateEhh+0x66>
    1160:	88 30       	cpi	r24, 0x08	; 8
    1162:	91 05       	cpc	r25, r1
    1164:	71 f0       	breq	.+28     	; 0x1182 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x7a>
    1166:	89 30       	cpi	r24, 0x09	; 9
    1168:	91 05       	cpc	r25, r1
    116a:	91 f0       	breq	.+36     	; 0x1190 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x88>
    116c:	2f c0       	rjmp	.+94     	; 0x11cc <_ZN7MCP_CAN18mcp2515_configRateEhh+0xc4>
    116e:	8c 30       	cpi	r24, 0x0C	; 12
    1170:	91 05       	cpc	r25, r1
    1172:	09 f1       	breq	.+66     	; 0x11b6 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xae>
    1174:	8c 30       	cpi	r24, 0x0C	; 12
    1176:	91 05       	cpc	r25, r1
    1178:	c4 f0       	brlt	.+48     	; 0x11aa <_ZN7MCP_CAN18mcp2515_configRateEhh+0xa2>
    117a:	8d 30       	cpi	r24, 0x0D	; 13
    117c:	91 05       	cpc	r25, r1
    117e:	09 f1       	breq	.+66     	; 0x11c2 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xba>
    1180:	25 c0       	rjmp	.+74     	; 0x11cc <_ZN7MCP_CAN18mcp2515_configRateEhh+0xc4>
	{
	case (CAN_100KBPS) :
			cfg1 = MCP_8MHz_100kBPS_CFG1;
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	8a 83       	std	Y+2, r24	; 0x02
    		cfg2 = MCP_8MHz_100kBPS_CFG2;
    1186:	84 eb       	ldi	r24, 0xB4	; 180
    1188:	8b 83       	std	Y+3, r24	; 0x03
    		cfg3 = MCP_8MHz_100kBPS_CFG3;
    118a:	86 e0       	ldi	r24, 0x06	; 6
    118c:	8c 83       	std	Y+4, r24	; 0x04
	    	break;
    118e:	20 c0       	rjmp	.+64     	; 0x11d0 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xc8>
   	case (CAN_125KBPS) :
			cfg1 = MCP_8MHz_125kBPS_CFG1;
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	8a 83       	std	Y+2, r24	; 0x02
			cfg2 = MCP_8MHz_125kBPS_CFG2;
    1194:	81 eb       	ldi	r24, 0xB1	; 177
    1196:	8b 83       	std	Y+3, r24	; 0x03
			cfg3 = MCP_8MHz_125kBPS_CFG3;
    1198:	85 e0       	ldi	r24, 0x05	; 5
    119a:	8c 83       	std	Y+4, r24	; 0x04
			//led_blink(PIN4,1);
 			break;
    119c:	19 c0       	rjmp	.+50     	; 0x11d0 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xc8>
	case (CAN_200KBPS) :
   			cfg1 = MCP_8MHz_200kBPS_CFG1;
    119e:	1a 82       	std	Y+2, r1	; 0x02
			cfg2 = MCP_8MHz_200kBPS_CFG2;
    11a0:	84 eb       	ldi	r24, 0xB4	; 180
    11a2:	8b 83       	std	Y+3, r24	; 0x03
			cfg3 = MCP_8MHz_200kBPS_CFG3;
    11a4:	86 e0       	ldi	r24, 0x06	; 6
    11a6:	8c 83       	std	Y+4, r24	; 0x04
			break;
    11a8:	13 c0       	rjmp	.+38     	; 0x11d0 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xc8>
	case (CAN_250KBPS) :
			cfg1 = MCP_8MHz_250kBPS_CFG1;
    11aa:	1a 82       	std	Y+2, r1	; 0x02
   			cfg2 = MCP_8MHz_250kBPS_CFG2;
    11ac:	81 eb       	ldi	r24, 0xB1	; 177
    11ae:	8b 83       	std	Y+3, r24	; 0x03
			cfg3 = MCP_8MHz_250kBPS_CFG3;
    11b0:	85 e0       	ldi	r24, 0x05	; 5
    11b2:	8c 83       	std	Y+4, r24	; 0x04
    		break;
    11b4:	0d c0       	rjmp	.+26     	; 0x11d0 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xc8>
	case (CAN_500KBPS) :
			cfg1 = MCP_8MHz_500kBPS_CFG1;
    11b6:	1a 82       	std	Y+2, r1	; 0x02
			cfg2 = MCP_8MHz_500kBPS_CFG2;
    11b8:	80 e9       	ldi	r24, 0x90	; 144
    11ba:	8b 83       	std	Y+3, r24	; 0x03
			cfg3 = MCP_8MHz_500kBPS_CFG3;
    11bc:	82 e0       	ldi	r24, 0x02	; 2
    11be:	8c 83       	std	Y+4, r24	; 0x04
			break;
    11c0:	07 c0       	rjmp	.+14     	; 0x11d0 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xc8>
	case (CAN_1000KBPS) :
			cfg1 = MCP_8MHz_1000kBPS_CFG1;
    11c2:	1a 82       	std	Y+2, r1	; 0x02
			cfg2 = MCP_8MHz_1000kBPS_CFG2;
    11c4:	80 e8       	ldi	r24, 0x80	; 128
    11c6:	8b 83       	std	Y+3, r24	; 0x03
   			cfg3 = MCP_8MHz_1000kBPS_CFG3;
    11c8:	1c 82       	std	Y+4, r1	; 0x04
			break;
    11ca:	02 c0       	rjmp	.+4      	; 0x11d0 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xc8>
	default:
			set = 0;
    11cc:	19 82       	std	Y+1, r1	; 0x01
   			break;
    11ce:	00 00       	nop
			}

	if (set) {
    11d0:	89 81       	ldd	r24, Y+1	; 0x01
    11d2:	88 23       	and	r24, r24
    11d4:	09 f4       	brne	.+2      	; 0x11d8 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xd0>
    11d6:	d9 c2       	rjmp	.+1458   	; 0x178a <_ZN7MCP_CAN18mcp2515_configRateEhh+0x682>
		mcp2515_setRegister(MCP_CNF1, cfg1);
    11d8:	ce 01       	movw	r24, r28
    11da:	84 5b       	subi	r24, 0xB4	; 180
    11dc:	9f 4f       	sbci	r25, 0xFF	; 255
    11de:	fc 01       	movw	r30, r24
    11e0:	80 81       	ld	r24, Z
    11e2:	91 81       	ldd	r25, Z+1	; 0x01
    11e4:	4a 81       	ldd	r20, Y+2	; 0x02
    11e6:	6a e2       	ldi	r22, 0x2A	; 42
    11e8:	c7 de       	rcall	.-626    	; 0xf78 <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
    11ea:	80 e0       	ldi	r24, 0x00	; 0
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	a0 e8       	ldi	r26, 0x80	; 128
    11f0:	b0 e4       	ldi	r27, 0x40	; 64
    11f2:	8e 83       	std	Y+6, r24	; 0x06
    11f4:	9f 83       	std	Y+7, r25	; 0x07
    11f6:	a8 87       	std	Y+8, r26	; 0x08
    11f8:	b9 87       	std	Y+9, r27	; 0x09
    11fa:	20 e0       	ldi	r18, 0x00	; 0
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	4a ef       	ldi	r20, 0xFA	; 250
    1200:	54 e4       	ldi	r21, 0x44	; 68
    1202:	6e 81       	ldd	r22, Y+6	; 0x06
    1204:	7f 81       	ldd	r23, Y+7	; 0x07
    1206:	88 85       	ldd	r24, Y+8	; 0x08
    1208:	99 85       	ldd	r25, Y+9	; 0x09
    120a:	0e 94 d5 13 	call	0x27aa	; 0x27aa <__mulsf3>
    120e:	dc 01       	movw	r26, r24
    1210:	cb 01       	movw	r24, r22
    1212:	8a 87       	std	Y+10, r24	; 0x0a
    1214:	9b 87       	std	Y+11, r25	; 0x0b
    1216:	ac 87       	std	Y+12, r26	; 0x0c
    1218:	bd 87       	std	Y+13, r27	; 0x0d
    121a:	20 e0       	ldi	r18, 0x00	; 0
	if (__tmp < 1.0)
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	40 e8       	ldi	r20, 0x80	; 128
    1220:	5f e3       	ldi	r21, 0x3F	; 63
    1222:	6a 85       	ldd	r22, Y+10	; 0x0a
    1224:	7b 85       	ldd	r23, Y+11	; 0x0b
    1226:	8c 85       	ldd	r24, Y+12	; 0x0c
    1228:	9d 85       	ldd	r25, Y+13	; 0x0d
    122a:	0e 94 c4 12 	call	0x2588	; 0x2588 <__cmpsf2>
    122e:	88 23       	and	r24, r24
    1230:	2c f4       	brge	.+10     	; 0x123c <_ZN7MCP_CAN18mcp2515_configRateEhh+0x134>
    1232:	81 e0       	ldi	r24, 0x01	; 1
		__ticks = 1;
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	9f 87       	std	Y+15, r25	; 0x0f
    1238:	8e 87       	std	Y+14, r24	; 0x0e
    123a:	3f c0       	rjmp	.+126    	; 0x12ba <_ZN7MCP_CAN18mcp2515_configRateEhh+0x1b2>
    123c:	20 e0       	ldi	r18, 0x00	; 0
	else if (__tmp > 65535)
    123e:	3f ef       	ldi	r19, 0xFF	; 255
    1240:	4f e7       	ldi	r20, 0x7F	; 127
    1242:	57 e4       	ldi	r21, 0x47	; 71
    1244:	6a 85       	ldd	r22, Y+10	; 0x0a
    1246:	7b 85       	ldd	r23, Y+11	; 0x0b
    1248:	8c 85       	ldd	r24, Y+12	; 0x0c
    124a:	9d 85       	ldd	r25, Y+13	; 0x0d
    124c:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <__gesf2>
    1250:	18 16       	cp	r1, r24
    1252:	4c f5       	brge	.+82     	; 0x12a6 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x19e>
    1254:	20 e0       	ldi	r18, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	40 e2       	ldi	r20, 0x20	; 32
    125a:	51 e4       	ldi	r21, 0x41	; 65
    125c:	6e 81       	ldd	r22, Y+6	; 0x06
    125e:	7f 81       	ldd	r23, Y+7	; 0x07
    1260:	88 85       	ldd	r24, Y+8	; 0x08
    1262:	99 85       	ldd	r25, Y+9	; 0x09
    1264:	0e 94 d5 13 	call	0x27aa	; 0x27aa <__mulsf3>
    1268:	dc 01       	movw	r26, r24
    126a:	cb 01       	movw	r24, r22
    126c:	bc 01       	movw	r22, r24
    126e:	cd 01       	movw	r24, r26
    1270:	0e 94 30 13 	call	0x2660	; 0x2660 <__fixunssfsi>
    1274:	dc 01       	movw	r26, r24
    1276:	cb 01       	movw	r24, r22
    1278:	9f 87       	std	Y+15, r25	; 0x0f
    127a:	8e 87       	std	Y+14, r24	; 0x0e
    127c:	0f c0       	rjmp	.+30     	; 0x129c <_ZN7MCP_CAN18mcp2515_configRateEhh+0x194>
    127e:	88 ec       	ldi	r24, 0xC8	; 200
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	99 8b       	std	Y+17, r25	; 0x11
    1284:	88 8b       	std	Y+16, r24	; 0x10
    1286:	88 89       	ldd	r24, Y+16	; 0x10
    1288:	99 89       	ldd	r25, Y+17	; 0x11
    128a:	01 97       	sbiw	r24, 0x01	; 1
    128c:	f1 f7       	brne	.-4      	; 0x128a <_ZN7MCP_CAN18mcp2515_configRateEhh+0x182>
    128e:	99 8b       	std	Y+17, r25	; 0x11
    1290:	88 8b       	std	Y+16, r24	; 0x10
    1292:	8e 85       	ldd	r24, Y+14	; 0x0e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1294:	9f 85       	ldd	r25, Y+15	; 0x0f
    1296:	01 97       	sbiw	r24, 0x01	; 1
    1298:	9f 87       	std	Y+15, r25	; 0x0f
    129a:	8e 87       	std	Y+14, r24	; 0x0e
    129c:	8e 85       	ldd	r24, Y+14	; 0x0e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    129e:	9f 85       	ldd	r25, Y+15	; 0x0f
    12a0:	00 97       	sbiw	r24, 0x00	; 0
    12a2:	69 f7       	brne	.-38     	; 0x127e <_ZN7MCP_CAN18mcp2515_configRateEhh+0x176>
    12a4:	14 c0       	rjmp	.+40     	; 0x12ce <_ZN7MCP_CAN18mcp2515_configRateEhh+0x1c6>
    12a6:	6a 85       	ldd	r22, Y+10	; 0x0a
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12a8:	7b 85       	ldd	r23, Y+11	; 0x0b
    12aa:	8c 85       	ldd	r24, Y+12	; 0x0c
    12ac:	9d 85       	ldd	r25, Y+13	; 0x0d
    12ae:	0e 94 30 13 	call	0x2660	; 0x2660 <__fixunssfsi>
    12b2:	dc 01       	movw	r26, r24
    12b4:	cb 01       	movw	r24, r22
    12b6:	9f 87       	std	Y+15, r25	; 0x0f
    12b8:	8e 87       	std	Y+14, r24	; 0x0e
    12ba:	8e 85       	ldd	r24, Y+14	; 0x0e
    12bc:	9f 85       	ldd	r25, Y+15	; 0x0f
    12be:	9b 8b       	std	Y+19, r25	; 0x13
    12c0:	8a 8b       	std	Y+18, r24	; 0x12
    12c2:	8a 89       	ldd	r24, Y+18	; 0x12
    12c4:	9b 89       	ldd	r25, Y+19	; 0x13
    12c6:	01 97       	sbiw	r24, 0x01	; 1
    12c8:	f1 f7       	brne	.-4      	; 0x12c6 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x1be>
    12ca:	9b 8b       	std	Y+19, r25	; 0x13
    12cc:	8a 8b       	std	Y+18, r24	; 0x12
    12ce:	ce 01       	movw	r24, r28

		_delay_ms(4);
		mcp2515_setRegister(MCP_CNF2, cfg2);
    12d0:	84 5b       	subi	r24, 0xB4	; 180
    12d2:	9f 4f       	sbci	r25, 0xFF	; 255
    12d4:	fc 01       	movw	r30, r24
    12d6:	80 81       	ld	r24, Z
    12d8:	91 81       	ldd	r25, Z+1	; 0x01
    12da:	4b 81       	ldd	r20, Y+3	; 0x03
    12dc:	69 e2       	ldi	r22, 0x29	; 41
    12de:	4c de       	rcall	.-872    	; 0xf78 <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
    12e0:	80 e0       	ldi	r24, 0x00	; 0
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	a0 e8       	ldi	r26, 0x80	; 128
    12e6:	b0 e4       	ldi	r27, 0x40	; 64
    12e8:	8c 8b       	std	Y+20, r24	; 0x14
    12ea:	9d 8b       	std	Y+21, r25	; 0x15
    12ec:	ae 8b       	std	Y+22, r26	; 0x16
    12ee:	bf 8b       	std	Y+23, r27	; 0x17
    12f0:	20 e0       	ldi	r18, 0x00	; 0
    12f2:	30 e0       	ldi	r19, 0x00	; 0
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    12f4:	4a ef       	ldi	r20, 0xFA	; 250
    12f6:	54 e4       	ldi	r21, 0x44	; 68
    12f8:	6c 89       	ldd	r22, Y+20	; 0x14
    12fa:	7d 89       	ldd	r23, Y+21	; 0x15
    12fc:	8e 89       	ldd	r24, Y+22	; 0x16
    12fe:	9f 89       	ldd	r25, Y+23	; 0x17
    1300:	0e 94 d5 13 	call	0x27aa	; 0x27aa <__mulsf3>
    1304:	dc 01       	movw	r26, r24
    1306:	cb 01       	movw	r24, r22
    1308:	88 8f       	std	Y+24, r24	; 0x18
    130a:	99 8f       	std	Y+25, r25	; 0x19
    130c:	aa 8f       	std	Y+26, r26	; 0x1a
    130e:	bb 8f       	std	Y+27, r27	; 0x1b
    1310:	20 e0       	ldi	r18, 0x00	; 0
    1312:	30 e0       	ldi	r19, 0x00	; 0
	if (__tmp < 1.0)
    1314:	40 e8       	ldi	r20, 0x80	; 128
    1316:	5f e3       	ldi	r21, 0x3F	; 63
    1318:	68 8d       	ldd	r22, Y+24	; 0x18
    131a:	79 8d       	ldd	r23, Y+25	; 0x19
    131c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    131e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1320:	0e 94 c4 12 	call	0x2588	; 0x2588 <__cmpsf2>
    1324:	88 23       	and	r24, r24
    1326:	2c f4       	brge	.+10     	; 0x1332 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x22a>
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	90 e0       	ldi	r25, 0x00	; 0
		__ticks = 1;
    132c:	9d 8f       	std	Y+29, r25	; 0x1d
    132e:	8c 8f       	std	Y+28, r24	; 0x1c
    1330:	3f c0       	rjmp	.+126    	; 0x13b0 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x2a8>
    1332:	20 e0       	ldi	r18, 0x00	; 0
    1334:	3f ef       	ldi	r19, 0xFF	; 255
	else if (__tmp > 65535)
    1336:	4f e7       	ldi	r20, 0x7F	; 127
    1338:	57 e4       	ldi	r21, 0x47	; 71
    133a:	68 8d       	ldd	r22, Y+24	; 0x18
    133c:	79 8d       	ldd	r23, Y+25	; 0x19
    133e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1340:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1342:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <__gesf2>
    1346:	18 16       	cp	r1, r24
    1348:	4c f5       	brge	.+82     	; 0x139c <_ZN7MCP_CAN18mcp2515_configRateEhh+0x294>
    134a:	20 e0       	ldi	r18, 0x00	; 0
    134c:	30 e0       	ldi	r19, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    134e:	40 e2       	ldi	r20, 0x20	; 32
    1350:	51 e4       	ldi	r21, 0x41	; 65
    1352:	6c 89       	ldd	r22, Y+20	; 0x14
    1354:	7d 89       	ldd	r23, Y+21	; 0x15
    1356:	8e 89       	ldd	r24, Y+22	; 0x16
    1358:	9f 89       	ldd	r25, Y+23	; 0x17
    135a:	0e 94 d5 13 	call	0x27aa	; 0x27aa <__mulsf3>
    135e:	dc 01       	movw	r26, r24
    1360:	cb 01       	movw	r24, r22
    1362:	bc 01       	movw	r22, r24
    1364:	cd 01       	movw	r24, r26
    1366:	0e 94 30 13 	call	0x2660	; 0x2660 <__fixunssfsi>
    136a:	dc 01       	movw	r26, r24
    136c:	cb 01       	movw	r24, r22
    136e:	9d 8f       	std	Y+29, r25	; 0x1d
    1370:	8c 8f       	std	Y+28, r24	; 0x1c
    1372:	0f c0       	rjmp	.+30     	; 0x1392 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x28a>
    1374:	88 ec       	ldi	r24, 0xC8	; 200
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	9f 8f       	std	Y+31, r25	; 0x1f
    137a:	8e 8f       	std	Y+30, r24	; 0x1e
    137c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    137e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1380:	01 97       	sbiw	r24, 0x01	; 1
    1382:	f1 f7       	brne	.-4      	; 0x1380 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x278>
    1384:	9f 8f       	std	Y+31, r25	; 0x1f
    1386:	8e 8f       	std	Y+30, r24	; 0x1e
    1388:	8c 8d       	ldd	r24, Y+28	; 0x1c
    138a:	9d 8d       	ldd	r25, Y+29	; 0x1d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    138c:	01 97       	sbiw	r24, 0x01	; 1
    138e:	9d 8f       	std	Y+29, r25	; 0x1d
    1390:	8c 8f       	std	Y+28, r24	; 0x1c
    1392:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1394:	9d 8d       	ldd	r25, Y+29	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1396:	00 97       	sbiw	r24, 0x00	; 0
    1398:	69 f7       	brne	.-38     	; 0x1374 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x26c>
    139a:	14 c0       	rjmp	.+40     	; 0x13c4 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x2bc>
    139c:	68 8d       	ldd	r22, Y+24	; 0x18
    139e:	79 8d       	ldd	r23, Y+25	; 0x19
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13a0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    13a2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    13a4:	0e 94 30 13 	call	0x2660	; 0x2660 <__fixunssfsi>
    13a8:	dc 01       	movw	r26, r24
    13aa:	cb 01       	movw	r24, r22
    13ac:	9d 8f       	std	Y+29, r25	; 0x1d
    13ae:	8c 8f       	std	Y+28, r24	; 0x1c
    13b0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    13b2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    13b4:	99 a3       	std	Y+33, r25	; 0x21
    13b6:	88 a3       	std	Y+32, r24	; 0x20
    13b8:	88 a1       	ldd	r24, Y+32	; 0x20
    13ba:	99 a1       	ldd	r25, Y+33	; 0x21
    13bc:	01 97       	sbiw	r24, 0x01	; 1
    13be:	f1 f7       	brne	.-4      	; 0x13bc <_ZN7MCP_CAN18mcp2515_configRateEhh+0x2b4>
    13c0:	99 a3       	std	Y+33, r25	; 0x21
    13c2:	88 a3       	std	Y+32, r24	; 0x20
    13c4:	ce 01       	movw	r24, r28
    13c6:	84 5b       	subi	r24, 0xB4	; 180
		_delay_ms(4);
		mcp2515_setRegister(MCP_CNF3, cfg3);
    13c8:	9f 4f       	sbci	r25, 0xFF	; 255
    13ca:	fc 01       	movw	r30, r24
    13cc:	80 81       	ld	r24, Z
    13ce:	91 81       	ldd	r25, Z+1	; 0x01
    13d0:	4c 81       	ldd	r20, Y+4	; 0x04
    13d2:	68 e2       	ldi	r22, 0x28	; 40
    13d4:	d1 dd       	rcall	.-1118   	; 0xf78 <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
    13d6:	80 e0       	ldi	r24, 0x00	; 0
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	a0 e8       	ldi	r26, 0x80	; 128
    13dc:	b0 e4       	ldi	r27, 0x40	; 64
    13de:	8a a3       	std	Y+34, r24	; 0x22
    13e0:	9b a3       	std	Y+35, r25	; 0x23
    13e2:	ac a3       	std	Y+36, r26	; 0x24
    13e4:	bd a3       	std	Y+37, r27	; 0x25
    13e6:	20 e0       	ldi	r18, 0x00	; 0
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	4a ef       	ldi	r20, 0xFA	; 250
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    13ec:	54 e4       	ldi	r21, 0x44	; 68
    13ee:	6a a1       	ldd	r22, Y+34	; 0x22
    13f0:	7b a1       	ldd	r23, Y+35	; 0x23
    13f2:	8c a1       	ldd	r24, Y+36	; 0x24
    13f4:	9d a1       	ldd	r25, Y+37	; 0x25
    13f6:	0e 94 d5 13 	call	0x27aa	; 0x27aa <__mulsf3>
    13fa:	dc 01       	movw	r26, r24
    13fc:	cb 01       	movw	r24, r22
    13fe:	8e a3       	std	Y+38, r24	; 0x26
    1400:	9f a3       	std	Y+39, r25	; 0x27
    1402:	a8 a7       	std	Y+40, r26	; 0x28
    1404:	b9 a7       	std	Y+41, r27	; 0x29
    1406:	20 e0       	ldi	r18, 0x00	; 0
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	40 e8       	ldi	r20, 0x80	; 128
	if (__tmp < 1.0)
    140c:	5f e3       	ldi	r21, 0x3F	; 63
    140e:	6e a1       	ldd	r22, Y+38	; 0x26
    1410:	7f a1       	ldd	r23, Y+39	; 0x27
    1412:	88 a5       	ldd	r24, Y+40	; 0x28
    1414:	99 a5       	ldd	r25, Y+41	; 0x29
    1416:	0e 94 c4 12 	call	0x2588	; 0x2588 <__cmpsf2>
    141a:	88 23       	and	r24, r24
    141c:	2c f4       	brge	.+10     	; 0x1428 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x320>
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	9b a7       	std	Y+43, r25	; 0x2b
		__ticks = 1;
    1424:	8a a7       	std	Y+42, r24	; 0x2a
    1426:	3f c0       	rjmp	.+126    	; 0x14a6 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x39e>
    1428:	20 e0       	ldi	r18, 0x00	; 0
    142a:	3f ef       	ldi	r19, 0xFF	; 255
    142c:	4f e7       	ldi	r20, 0x7F	; 127
	else if (__tmp > 65535)
    142e:	57 e4       	ldi	r21, 0x47	; 71
    1430:	6e a1       	ldd	r22, Y+38	; 0x26
    1432:	7f a1       	ldd	r23, Y+39	; 0x27
    1434:	88 a5       	ldd	r24, Y+40	; 0x28
    1436:	99 a5       	ldd	r25, Y+41	; 0x29
    1438:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <__gesf2>
    143c:	18 16       	cp	r1, r24
    143e:	4c f5       	brge	.+82     	; 0x1492 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x38a>
    1440:	20 e0       	ldi	r18, 0x00	; 0
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	40 e2       	ldi	r20, 0x20	; 32
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1446:	51 e4       	ldi	r21, 0x41	; 65
    1448:	6a a1       	ldd	r22, Y+34	; 0x22
    144a:	7b a1       	ldd	r23, Y+35	; 0x23
    144c:	8c a1       	ldd	r24, Y+36	; 0x24
    144e:	9d a1       	ldd	r25, Y+37	; 0x25
    1450:	0e 94 d5 13 	call	0x27aa	; 0x27aa <__mulsf3>
    1454:	dc 01       	movw	r26, r24
    1456:	cb 01       	movw	r24, r22
    1458:	bc 01       	movw	r22, r24
    145a:	cd 01       	movw	r24, r26
    145c:	0e 94 30 13 	call	0x2660	; 0x2660 <__fixunssfsi>
    1460:	dc 01       	movw	r26, r24
    1462:	cb 01       	movw	r24, r22
    1464:	9b a7       	std	Y+43, r25	; 0x2b
    1466:	8a a7       	std	Y+42, r24	; 0x2a
    1468:	0f c0       	rjmp	.+30     	; 0x1488 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x380>
    146a:	88 ec       	ldi	r24, 0xC8	; 200
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	9d a7       	std	Y+45, r25	; 0x2d
    1470:	8c a7       	std	Y+44, r24	; 0x2c
    1472:	8c a5       	ldd	r24, Y+44	; 0x2c
    1474:	9d a5       	ldd	r25, Y+45	; 0x2d
    1476:	01 97       	sbiw	r24, 0x01	; 1
    1478:	f1 f7       	brne	.-4      	; 0x1476 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x36e>
    147a:	9d a7       	std	Y+45, r25	; 0x2d
    147c:	8c a7       	std	Y+44, r24	; 0x2c
    147e:	8a a5       	ldd	r24, Y+42	; 0x2a
    1480:	9b a5       	ldd	r25, Y+43	; 0x2b
    1482:	01 97       	sbiw	r24, 0x01	; 1
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1484:	9b a7       	std	Y+43, r25	; 0x2b
    1486:	8a a7       	std	Y+42, r24	; 0x2a
    1488:	8a a5       	ldd	r24, Y+42	; 0x2a
    148a:	9b a5       	ldd	r25, Y+43	; 0x2b
    148c:	00 97       	sbiw	r24, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    148e:	69 f7       	brne	.-38     	; 0x146a <_ZN7MCP_CAN18mcp2515_configRateEhh+0x362>
    1490:	14 c0       	rjmp	.+40     	; 0x14ba <_ZN7MCP_CAN18mcp2515_configRateEhh+0x3b2>
    1492:	6e a1       	ldd	r22, Y+38	; 0x26
    1494:	7f a1       	ldd	r23, Y+39	; 0x27
    1496:	88 a5       	ldd	r24, Y+40	; 0x28
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1498:	99 a5       	ldd	r25, Y+41	; 0x29
    149a:	0e 94 30 13 	call	0x2660	; 0x2660 <__fixunssfsi>
    149e:	dc 01       	movw	r26, r24
    14a0:	cb 01       	movw	r24, r22
    14a2:	9b a7       	std	Y+43, r25	; 0x2b
    14a4:	8a a7       	std	Y+42, r24	; 0x2a
    14a6:	8a a5       	ldd	r24, Y+42	; 0x2a
    14a8:	9b a5       	ldd	r25, Y+43	; 0x2b
    14aa:	9f a7       	std	Y+47, r25	; 0x2f
    14ac:	8e a7       	std	Y+46, r24	; 0x2e
    14ae:	8e a5       	ldd	r24, Y+46	; 0x2e
    14b0:	9f a5       	ldd	r25, Y+47	; 0x2f
    14b2:	01 97       	sbiw	r24, 0x01	; 1
    14b4:	f1 f7       	brne	.-4      	; 0x14b2 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x3aa>
    14b6:	9f a7       	std	Y+47, r25	; 0x2f
    14b8:	8e a7       	std	Y+46, r24	; 0x2e
    14ba:	ce 01       	movw	r24, r28
    14bc:	84 5b       	subi	r24, 0xB4	; 180
    14be:	9f 4f       	sbci	r25, 0xFF	; 255
		_delay_ms(4);

		if((res=mcp2515_readRegister(MCP_CNF1))==cfg1)
    14c0:	fc 01       	movw	r30, r24
    14c2:	80 81       	ld	r24, Z
    14c4:	91 81       	ldd	r25, Z+1	; 0x01
    14c6:	6a e2       	ldi	r22, 0x2A	; 42
    14c8:	40 dc       	rcall	.-1920   	; 0xd4a <_ZN7MCP_CAN20mcp2515_readRegisterEh>
    14ca:	8d 83       	std	Y+5, r24	; 0x05
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	2d 81       	ldd	r18, Y+5	; 0x05
    14d0:	9a 81       	ldd	r25, Y+2	; 0x02
    14d2:	29 17       	cp	r18, r25
    14d4:	09 f0       	breq	.+2      	; 0x14d8 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x3d0>
    14d6:	80 e0       	ldi	r24, 0x00	; 0
    14d8:	88 23       	and	r24, r24
    14da:	09 f4       	brne	.+2      	; 0x14de <_ZN7MCP_CAN18mcp2515_configRateEhh+0x3d6>
    14dc:	56 c1       	rjmp	.+684    	; 0x178a <_ZN7MCP_CAN18mcp2515_configRateEhh+0x682>
    14de:	80 e0       	ldi	r24, 0x00	; 0
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	a0 e8       	ldi	r26, 0x80	; 128
    14e4:	b0 e4       	ldi	r27, 0x40	; 64
    14e6:	88 ab       	std	Y+48, r24	; 0x30
    14e8:	99 ab       	std	Y+49, r25	; 0x31
    14ea:	aa ab       	std	Y+50, r26	; 0x32
    14ec:	bb ab       	std	Y+51, r27	; 0x33
    14ee:	20 e0       	ldi	r18, 0x00	; 0
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	4a ef       	ldi	r20, 0xFA	; 250
    14f4:	54 e4       	ldi	r21, 0x44	; 68
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    14f6:	68 a9       	ldd	r22, Y+48	; 0x30
    14f8:	79 a9       	ldd	r23, Y+49	; 0x31
    14fa:	8a a9       	ldd	r24, Y+50	; 0x32
    14fc:	9b a9       	ldd	r25, Y+51	; 0x33
    14fe:	0e 94 d5 13 	call	0x27aa	; 0x27aa <__mulsf3>
    1502:	dc 01       	movw	r26, r24
    1504:	cb 01       	movw	r24, r22
    1506:	8c ab       	std	Y+52, r24	; 0x34
    1508:	9d ab       	std	Y+53, r25	; 0x35
    150a:	ae ab       	std	Y+54, r26	; 0x36
    150c:	bf ab       	std	Y+55, r27	; 0x37
    150e:	20 e0       	ldi	r18, 0x00	; 0
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	40 e8       	ldi	r20, 0x80	; 128
    1514:	5f e3       	ldi	r21, 0x3F	; 63
	if (__tmp < 1.0)
    1516:	6c a9       	ldd	r22, Y+52	; 0x34
    1518:	7d a9       	ldd	r23, Y+53	; 0x35
    151a:	8e a9       	ldd	r24, Y+54	; 0x36
    151c:	9f a9       	ldd	r25, Y+55	; 0x37
    151e:	0e 94 c4 12 	call	0x2588	; 0x2588 <__cmpsf2>
    1522:	88 23       	and	r24, r24
    1524:	2c f4       	brge	.+10     	; 0x1530 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x428>
    1526:	81 e0       	ldi	r24, 0x01	; 1
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	99 af       	std	Y+57, r25	; 0x39
    152c:	88 af       	std	Y+56, r24	; 0x38
		__ticks = 1;
    152e:	3f c0       	rjmp	.+126    	; 0x15ae <_ZN7MCP_CAN18mcp2515_configRateEhh+0x4a6>
    1530:	20 e0       	ldi	r18, 0x00	; 0
    1532:	3f ef       	ldi	r19, 0xFF	; 255
    1534:	4f e7       	ldi	r20, 0x7F	; 127
    1536:	57 e4       	ldi	r21, 0x47	; 71
	else if (__tmp > 65535)
    1538:	6c a9       	ldd	r22, Y+52	; 0x34
    153a:	7d a9       	ldd	r23, Y+53	; 0x35
    153c:	8e a9       	ldd	r24, Y+54	; 0x36
    153e:	9f a9       	ldd	r25, Y+55	; 0x37
    1540:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <__gesf2>
    1544:	18 16       	cp	r1, r24
    1546:	4c f5       	brge	.+82     	; 0x159a <_ZN7MCP_CAN18mcp2515_configRateEhh+0x492>
    1548:	20 e0       	ldi	r18, 0x00	; 0
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	40 e2       	ldi	r20, 0x20	; 32
    154e:	51 e4       	ldi	r21, 0x41	; 65
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1550:	68 a9       	ldd	r22, Y+48	; 0x30
    1552:	79 a9       	ldd	r23, Y+49	; 0x31
    1554:	8a a9       	ldd	r24, Y+50	; 0x32
    1556:	9b a9       	ldd	r25, Y+51	; 0x33
    1558:	0e 94 d5 13 	call	0x27aa	; 0x27aa <__mulsf3>
    155c:	dc 01       	movw	r26, r24
    155e:	cb 01       	movw	r24, r22
    1560:	bc 01       	movw	r22, r24
    1562:	cd 01       	movw	r24, r26
    1564:	0e 94 30 13 	call	0x2660	; 0x2660 <__fixunssfsi>
    1568:	dc 01       	movw	r26, r24
    156a:	cb 01       	movw	r24, r22
    156c:	99 af       	std	Y+57, r25	; 0x39
    156e:	88 af       	std	Y+56, r24	; 0x38
    1570:	0f c0       	rjmp	.+30     	; 0x1590 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x488>
    1572:	88 ec       	ldi	r24, 0xC8	; 200
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	9b af       	std	Y+59, r25	; 0x3b
    1578:	8a af       	std	Y+58, r24	; 0x3a
    157a:	8a ad       	ldd	r24, Y+58	; 0x3a
    157c:	9b ad       	ldd	r25, Y+59	; 0x3b
    157e:	01 97       	sbiw	r24, 0x01	; 1
    1580:	f1 f7       	brne	.-4      	; 0x157e <_ZN7MCP_CAN18mcp2515_configRateEhh+0x476>
    1582:	9b af       	std	Y+59, r25	; 0x3b
    1584:	8a af       	std	Y+58, r24	; 0x3a
    1586:	88 ad       	ldd	r24, Y+56	; 0x38
    1588:	99 ad       	ldd	r25, Y+57	; 0x39
    158a:	01 97       	sbiw	r24, 0x01	; 1
    158c:	99 af       	std	Y+57, r25	; 0x39
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    158e:	88 af       	std	Y+56, r24	; 0x38
    1590:	88 ad       	ldd	r24, Y+56	; 0x38
    1592:	99 ad       	ldd	r25, Y+57	; 0x39
    1594:	00 97       	sbiw	r24, 0x00	; 0
    1596:	69 f7       	brne	.-38     	; 0x1572 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x46a>
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1598:	14 c0       	rjmp	.+40     	; 0x15c2 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x4ba>
    159a:	6c a9       	ldd	r22, Y+52	; 0x34
    159c:	7d a9       	ldd	r23, Y+53	; 0x35
    159e:	8e a9       	ldd	r24, Y+54	; 0x36
    15a0:	9f a9       	ldd	r25, Y+55	; 0x37
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15a2:	0e 94 30 13 	call	0x2660	; 0x2660 <__fixunssfsi>
    15a6:	dc 01       	movw	r26, r24
    15a8:	cb 01       	movw	r24, r22
    15aa:	99 af       	std	Y+57, r25	; 0x39
    15ac:	88 af       	std	Y+56, r24	; 0x38
    15ae:	88 ad       	ldd	r24, Y+56	; 0x38
    15b0:	99 ad       	ldd	r25, Y+57	; 0x39
    15b2:	9d af       	std	Y+61, r25	; 0x3d
    15b4:	8c af       	std	Y+60, r24	; 0x3c
    15b6:	8c ad       	ldd	r24, Y+60	; 0x3c
    15b8:	9d ad       	ldd	r25, Y+61	; 0x3d
    15ba:	01 97       	sbiw	r24, 0x01	; 1
    15bc:	f1 f7       	brne	.-4      	; 0x15ba <_ZN7MCP_CAN18mcp2515_configRateEhh+0x4b2>
    15be:	9d af       	std	Y+61, r25	; 0x3d
    15c0:	8c af       	std	Y+60, r24	; 0x3c
    15c2:	ce 01       	movw	r24, r28
    15c4:	84 5b       	subi	r24, 0xB4	; 180
    15c6:	9f 4f       	sbci	r25, 0xFF	; 255
    15c8:	fc 01       	movw	r30, r24
		{
			//led_blink(PIN4,1);
			_delay_ms(4);

			if((res=mcp2515_readRegister(MCP_CNF2))==cfg2)
    15ca:	80 81       	ld	r24, Z
    15cc:	91 81       	ldd	r25, Z+1	; 0x01
    15ce:	69 e2       	ldi	r22, 0x29	; 41
    15d0:	bc db       	rcall	.-2184   	; 0xd4a <_ZN7MCP_CAN20mcp2515_readRegisterEh>
    15d2:	8d 83       	std	Y+5, r24	; 0x05
    15d4:	81 e0       	ldi	r24, 0x01	; 1
    15d6:	2d 81       	ldd	r18, Y+5	; 0x05
    15d8:	9b 81       	ldd	r25, Y+3	; 0x03
    15da:	29 17       	cp	r18, r25
    15dc:	09 f0       	breq	.+2      	; 0x15e0 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x4d8>
    15de:	80 e0       	ldi	r24, 0x00	; 0
    15e0:	88 23       	and	r24, r24
    15e2:	09 f4       	brne	.+2      	; 0x15e6 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x4de>
    15e4:	d2 c0       	rjmp	.+420    	; 0x178a <_ZN7MCP_CAN18mcp2515_configRateEhh+0x682>
    15e6:	9e 01       	movw	r18, r28
    15e8:	22 5c       	subi	r18, 0xC2	; 194
    15ea:	3f 4f       	sbci	r19, 0xFF	; 255
    15ec:	80 e0       	ldi	r24, 0x00	; 0
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	a0 e8       	ldi	r26, 0x80	; 128
    15f2:	b0 e4       	ldi	r27, 0x40	; 64
    15f4:	f9 01       	movw	r30, r18
    15f6:	80 83       	st	Z, r24
    15f8:	91 83       	std	Z+1, r25	; 0x01
    15fa:	a2 83       	std	Z+2, r26	; 0x02
    15fc:	b3 83       	std	Z+3, r27	; 0x03
    15fe:	8e 01       	movw	r16, r28
    1600:	0e 5b       	subi	r16, 0xBE	; 190
    1602:	1f 4f       	sbci	r17, 0xFF	; 255
    1604:	ce 01       	movw	r24, r28
    1606:	ce 96       	adiw	r24, 0x3e	; 62
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    1608:	20 e0       	ldi	r18, 0x00	; 0
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	4a ef       	ldi	r20, 0xFA	; 250
    160e:	54 e4       	ldi	r21, 0x44	; 68
    1610:	fc 01       	movw	r30, r24
    1612:	60 81       	ld	r22, Z
    1614:	71 81       	ldd	r23, Z+1	; 0x01
    1616:	82 81       	ldd	r24, Z+2	; 0x02
    1618:	93 81       	ldd	r25, Z+3	; 0x03
    161a:	0e 94 d5 13 	call	0x27aa	; 0x27aa <__mulsf3>
    161e:	dc 01       	movw	r26, r24
    1620:	cb 01       	movw	r24, r22
    1622:	f8 01       	movw	r30, r16
    1624:	80 83       	st	Z, r24
    1626:	91 83       	std	Z+1, r25	; 0x01
    1628:	a2 83       	std	Z+2, r26	; 0x02
    162a:	b3 83       	std	Z+3, r27	; 0x03
    162c:	ce 01       	movw	r24, r28
    162e:	8e 5b       	subi	r24, 0xBE	; 190
    1630:	9f 4f       	sbci	r25, 0xFF	; 255
    1632:	20 e0       	ldi	r18, 0x00	; 0
    1634:	30 e0       	ldi	r19, 0x00	; 0
	if (__tmp < 1.0)
    1636:	40 e8       	ldi	r20, 0x80	; 128
    1638:	5f e3       	ldi	r21, 0x3F	; 63
    163a:	fc 01       	movw	r30, r24
    163c:	60 81       	ld	r22, Z
    163e:	71 81       	ldd	r23, Z+1	; 0x01
    1640:	82 81       	ldd	r24, Z+2	; 0x02
    1642:	93 81       	ldd	r25, Z+3	; 0x03
    1644:	a1 d7       	rcall	.+3906   	; 0x2588 <__cmpsf2>
    1646:	88 23       	and	r24, r24
    1648:	4c f4       	brge	.+18     	; 0x165c <_ZN7MCP_CAN18mcp2515_configRateEhh+0x554>
    164a:	ce 01       	movw	r24, r28
    164c:	8a 5b       	subi	r24, 0xBA	; 186
    164e:	9f 4f       	sbci	r25, 0xFF	; 255
    1650:	21 e0       	ldi	r18, 0x01	; 1
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	fc 01       	movw	r30, r24
		__ticks = 1;
    1656:	31 83       	std	Z+1, r19	; 0x01
    1658:	20 83       	st	Z, r18
    165a:	6a c0       	rjmp	.+212    	; 0x1730 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x628>
    165c:	ce 01       	movw	r24, r28
    165e:	8e 5b       	subi	r24, 0xBE	; 190
    1660:	9f 4f       	sbci	r25, 0xFF	; 255
    1662:	20 e0       	ldi	r18, 0x00	; 0
    1664:	3f ef       	ldi	r19, 0xFF	; 255
    1666:	4f e7       	ldi	r20, 0x7F	; 127
	else if (__tmp > 65535)
    1668:	57 e4       	ldi	r21, 0x47	; 71
    166a:	fc 01       	movw	r30, r24
    166c:	60 81       	ld	r22, Z
    166e:	71 81       	ldd	r23, Z+1	; 0x01
    1670:	82 81       	ldd	r24, Z+2	; 0x02
    1672:	93 81       	ldd	r25, Z+3	; 0x03
    1674:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <__gesf2>
    1678:	18 16       	cp	r1, r24
    167a:	0c f0       	brlt	.+2      	; 0x167e <_ZN7MCP_CAN18mcp2515_configRateEhh+0x576>
    167c:	48 c0       	rjmp	.+144    	; 0x170e <_ZN7MCP_CAN18mcp2515_configRateEhh+0x606>
    167e:	ce 01       	movw	r24, r28
    1680:	ce 96       	adiw	r24, 0x3e	; 62
    1682:	20 e0       	ldi	r18, 0x00	; 0
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	40 e2       	ldi	r20, 0x20	; 32
    1688:	51 e4       	ldi	r21, 0x41	; 65
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    168a:	fc 01       	movw	r30, r24
    168c:	60 81       	ld	r22, Z
    168e:	71 81       	ldd	r23, Z+1	; 0x01
    1690:	82 81       	ldd	r24, Z+2	; 0x02
    1692:	93 81       	ldd	r25, Z+3	; 0x03
    1694:	0e 94 d5 13 	call	0x27aa	; 0x27aa <__mulsf3>
    1698:	dc 01       	movw	r26, r24
    169a:	cb 01       	movw	r24, r22
    169c:	8e 01       	movw	r16, r28
    169e:	0a 5b       	subi	r16, 0xBA	; 186
    16a0:	1f 4f       	sbci	r17, 0xFF	; 255
    16a2:	bc 01       	movw	r22, r24
    16a4:	cd 01       	movw	r24, r26
    16a6:	dc d7       	rcall	.+4024   	; 0x2660 <__fixunssfsi>
    16a8:	dc 01       	movw	r26, r24
    16aa:	cb 01       	movw	r24, r22
    16ac:	f8 01       	movw	r30, r16
    16ae:	91 83       	std	Z+1, r25	; 0x01
    16b0:	80 83       	st	Z, r24
    16b2:	24 c0       	rjmp	.+72     	; 0x16fc <_ZN7MCP_CAN18mcp2515_configRateEhh+0x5f4>
    16b4:	ce 01       	movw	r24, r28
    16b6:	88 5b       	subi	r24, 0xB8	; 184
    16b8:	9f 4f       	sbci	r25, 0xFF	; 255
    16ba:	28 ec       	ldi	r18, 0xC8	; 200
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	fc 01       	movw	r30, r24
    16c0:	31 83       	std	Z+1, r19	; 0x01
    16c2:	20 83       	st	Z, r18
    16c4:	ce 01       	movw	r24, r28
    16c6:	88 5b       	subi	r24, 0xB8	; 184
    16c8:	9f 4f       	sbci	r25, 0xFF	; 255
    16ca:	fc 01       	movw	r30, r24
    16cc:	80 81       	ld	r24, Z
    16ce:	91 81       	ldd	r25, Z+1	; 0x01
    16d0:	01 97       	sbiw	r24, 0x01	; 1
    16d2:	f1 f7       	brne	.-4      	; 0x16d0 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x5c8>
    16d4:	9e 01       	movw	r18, r28
    16d6:	28 5b       	subi	r18, 0xB8	; 184
    16d8:	3f 4f       	sbci	r19, 0xFF	; 255
    16da:	f9 01       	movw	r30, r18
    16dc:	91 83       	std	Z+1, r25	; 0x01
    16de:	80 83       	st	Z, r24
    16e0:	ce 01       	movw	r24, r28
    16e2:	8a 5b       	subi	r24, 0xBA	; 186
    16e4:	9f 4f       	sbci	r25, 0xFF	; 255
    16e6:	9e 01       	movw	r18, r28
    16e8:	2a 5b       	subi	r18, 0xBA	; 186
    16ea:	3f 4f       	sbci	r19, 0xFF	; 255
    16ec:	f9 01       	movw	r30, r18
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16ee:	20 81       	ld	r18, Z
    16f0:	31 81       	ldd	r19, Z+1	; 0x01
    16f2:	21 50       	subi	r18, 0x01	; 1
    16f4:	31 09       	sbc	r19, r1
    16f6:	fc 01       	movw	r30, r24
    16f8:	31 83       	std	Z+1, r19	; 0x01
    16fa:	20 83       	st	Z, r18
    16fc:	ce 01       	movw	r24, r28
    16fe:	8a 5b       	subi	r24, 0xBA	; 186
    1700:	9f 4f       	sbci	r25, 0xFF	; 255
    1702:	fc 01       	movw	r30, r24
    1704:	80 81       	ld	r24, Z
    1706:	91 81       	ldd	r25, Z+1	; 0x01
    1708:	00 97       	sbiw	r24, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    170a:	a1 f6       	brne	.-88     	; 0x16b4 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x5ac>
    170c:	2b c0       	rjmp	.+86     	; 0x1764 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x65c>
    170e:	8e 01       	movw	r16, r28
    1710:	0a 5b       	subi	r16, 0xBA	; 186
    1712:	1f 4f       	sbci	r17, 0xFF	; 255
    1714:	ce 01       	movw	r24, r28
    1716:	8e 5b       	subi	r24, 0xBE	; 190
    1718:	9f 4f       	sbci	r25, 0xFF	; 255
    171a:	fc 01       	movw	r30, r24
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    171c:	60 81       	ld	r22, Z
    171e:	71 81       	ldd	r23, Z+1	; 0x01
    1720:	82 81       	ldd	r24, Z+2	; 0x02
    1722:	93 81       	ldd	r25, Z+3	; 0x03
    1724:	9d d7       	rcall	.+3898   	; 0x2660 <__fixunssfsi>
    1726:	dc 01       	movw	r26, r24
    1728:	cb 01       	movw	r24, r22
    172a:	f8 01       	movw	r30, r16
    172c:	91 83       	std	Z+1, r25	; 0x01
    172e:	80 83       	st	Z, r24
    1730:	ce 01       	movw	r24, r28
    1732:	86 5b       	subi	r24, 0xB6	; 182
    1734:	9f 4f       	sbci	r25, 0xFF	; 255
    1736:	9e 01       	movw	r18, r28
    1738:	2a 5b       	subi	r18, 0xBA	; 186
    173a:	3f 4f       	sbci	r19, 0xFF	; 255
    173c:	f9 01       	movw	r30, r18
    173e:	20 81       	ld	r18, Z
    1740:	31 81       	ldd	r19, Z+1	; 0x01
    1742:	fc 01       	movw	r30, r24
    1744:	31 83       	std	Z+1, r19	; 0x01
    1746:	20 83       	st	Z, r18
    1748:	ce 01       	movw	r24, r28
    174a:	86 5b       	subi	r24, 0xB6	; 182
    174c:	9f 4f       	sbci	r25, 0xFF	; 255
    174e:	fc 01       	movw	r30, r24
    1750:	80 81       	ld	r24, Z
    1752:	91 81       	ldd	r25, Z+1	; 0x01
    1754:	01 97       	sbiw	r24, 0x01	; 1
    1756:	f1 f7       	brne	.-4      	; 0x1754 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x64c>
    1758:	9e 01       	movw	r18, r28
    175a:	26 5b       	subi	r18, 0xB6	; 182
    175c:	3f 4f       	sbci	r19, 0xFF	; 255
    175e:	f9 01       	movw	r30, r18
    1760:	91 83       	std	Z+1, r25	; 0x01
    1762:	80 83       	st	Z, r24
    1764:	ce 01       	movw	r24, r28
    1766:	84 5b       	subi	r24, 0xB4	; 180
    1768:	9f 4f       	sbci	r25, 0xFF	; 255
    176a:	fc 01       	movw	r30, r24
    176c:	80 81       	ld	r24, Z
    176e:	91 81       	ldd	r25, Z+1	; 0x01
    1770:	68 e2       	ldi	r22, 0x28	; 40
    1772:	eb da       	rcall	.-2602   	; 0xd4a <_ZN7MCP_CAN20mcp2515_readRegisterEh>
			{
				//led_blink(PIN4,1);
				_delay_ms(4);
				if((res=mcp2515_readRegister(MCP_CNF3))==cfg3)
    1774:	8d 83       	std	Y+5, r24	; 0x05
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	2d 81       	ldd	r18, Y+5	; 0x05
    177a:	9c 81       	ldd	r25, Y+4	; 0x04
    177c:	29 17       	cp	r18, r25
    177e:	09 f0       	breq	.+2      	; 0x1782 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x67a>
    1780:	80 e0       	ldi	r24, 0x00	; 0
    1782:	88 23       	and	r24, r24
    1784:	11 f0       	breq	.+4      	; 0x178a <_ZN7MCP_CAN18mcp2515_configRateEhh+0x682>
    1786:	80 e0       	ldi	r24, 0x00	; 0
    1788:	01 c0       	rjmp	.+2      	; 0x178c <_ZN7MCP_CAN18mcp2515_configRateEhh+0x684>
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	c1 5b       	subi	r28, 0xB1	; 177
    178e:	df 4f       	sbci	r29, 0xFF	; 255
    1790:	0f b6       	in	r0, 0x3f	; 63
    1792:	f8 94       	cli
    1794:	de bf       	out	0x3e, r29	; 62
    1796:	0f be       	out	0x3f, r0	; 63
				{
				//	led_blink(PIN4,1);
					return MCP2515_OK;
    1798:	cd bf       	out	0x3d, r28	; 61
    179a:	df 91       	pop	r29
				}
			}
		}
	}
		return MCP2515_FAIL;
    179c:	cf 91       	pop	r28
}
    179e:	1f 91       	pop	r17
    17a0:	0f 91       	pop	r16
    17a2:	08 95       	ret

000017a4 <_ZN7MCP_CAN22mcp2515_initCANBuffersEv>:
/*********************************************************************************************************
 ** Function name:           mcp2515_initCANBuffers
 ** Descriptions:            init canbuffers
 *********************************************************************************************************/
void MCP_CAN::mcp2515_initCANBuffers(void)
{
    17a4:	0f 93       	push	r16
    17a6:	1f 93       	push	r17
    17a8:	cf 93       	push	r28
    17aa:	df 93       	push	r29
    17ac:	cd b7       	in	r28, 0x3d	; 61
    17ae:	de b7       	in	r29, 0x3e	; 62
    17b0:	60 97       	sbiw	r28, 0x10	; 16
    17b2:	0f b6       	in	r0, 0x3f	; 63
    17b4:	f8 94       	cli
    17b6:	de bf       	out	0x3e, r29	; 62
    17b8:	0f be       	out	0x3f, r0	; 63
    17ba:	cd bf       	out	0x3d, r28	; 61
    17bc:	98 8b       	std	Y+16, r25	; 0x10
    17be:	8f 87       	std	Y+15, r24	; 0x0f
	INT8U i, a1, a2, a3;

	INT8U std = 0;
    17c0:	1d 82       	std	Y+5, r1	; 0x05
	INT8U ext = 1;
    17c2:	81 e0       	ldi	r24, 0x01	; 1
    17c4:	8e 83       	std	Y+6, r24	; 0x06
	INT32U ulMask = 0x00, ulFilt = 0x00;
    17c6:	1f 82       	std	Y+7, r1	; 0x07
    17c8:	18 86       	std	Y+8, r1	; 0x08
    17ca:	19 86       	std	Y+9, r1	; 0x09
    17cc:	1a 86       	std	Y+10, r1	; 0x0a
    17ce:	1b 86       	std	Y+11, r1	; 0x0b
    17d0:	1c 86       	std	Y+12, r1	; 0x0c
    17d2:	1d 86       	std	Y+13, r1	; 0x0d
    17d4:	1e 86       	std	Y+14, r1	; 0x0e


	mcp2515_write_id(MCP_RXM0SIDH, ext, ulMask);			/*Set both masks to 0           */
    17d6:	8f 81       	ldd	r24, Y+7	; 0x07
    17d8:	98 85       	ldd	r25, Y+8	; 0x08
    17da:	a9 85       	ldd	r26, Y+9	; 0x09
    17dc:	ba 85       	ldd	r27, Y+10	; 0x0a
    17de:	ef 85       	ldd	r30, Y+15	; 0x0f
    17e0:	f8 89       	ldd	r31, Y+16	; 0x10
    17e2:	8c 01       	movw	r16, r24
    17e4:	9d 01       	movw	r18, r26
    17e6:	4e 81       	ldd	r20, Y+6	; 0x06
    17e8:	60 e2       	ldi	r22, 0x20	; 32
    17ea:	cf 01       	movw	r24, r30
    17ec:	c6 d1       	rcall	.+908    	; 0x1b7a <_ZN7MCP_CAN16mcp2515_write_idEhhm>
    17ee:	8f 81       	ldd	r24, Y+7	; 0x07



	mcp2515_write_id(MCP_RXM1SIDH, ext, ulMask);			/*Mask register ignores ext bit */
    17f0:	98 85       	ldd	r25, Y+8	; 0x08
    17f2:	a9 85       	ldd	r26, Y+9	; 0x09
    17f4:	ba 85       	ldd	r27, Y+10	; 0x0a
    17f6:	ef 85       	ldd	r30, Y+15	; 0x0f
    17f8:	f8 89       	ldd	r31, Y+16	; 0x10
    17fa:	8c 01       	movw	r16, r24
    17fc:	9d 01       	movw	r18, r26
    17fe:	4e 81       	ldd	r20, Y+6	; 0x06
    1800:	64 e2       	ldi	r22, 0x24	; 36
    1802:	cf 01       	movw	r24, r30
    1804:	ba d1       	rcall	.+884    	; 0x1b7a <_ZN7MCP_CAN16mcp2515_write_idEhhm>
    1806:	8b 85       	ldd	r24, Y+11	; 0x0b
    1808:	9c 85       	ldd	r25, Y+12	; 0x0c

	/* Set all filters to 0         */
	mcp2515_write_id(MCP_RXF0SIDH, ext, ulFilt);			/* RXB0: extended               */
    180a:	ad 85       	ldd	r26, Y+13	; 0x0d
    180c:	be 85       	ldd	r27, Y+14	; 0x0e
    180e:	ef 85       	ldd	r30, Y+15	; 0x0f
    1810:	f8 89       	ldd	r31, Y+16	; 0x10
    1812:	8c 01       	movw	r16, r24
    1814:	9d 01       	movw	r18, r26
    1816:	4e 81       	ldd	r20, Y+6	; 0x06
    1818:	60 e0       	ldi	r22, 0x00	; 0
    181a:	cf 01       	movw	r24, r30
    181c:	ae d1       	rcall	.+860    	; 0x1b7a <_ZN7MCP_CAN16mcp2515_write_idEhhm>
    181e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1820:	9c 85       	ldd	r25, Y+12	; 0x0c
    1822:	ad 85       	ldd	r26, Y+13	; 0x0d
	mcp2515_write_id(MCP_RXF1SIDH, std, ulFilt);			/* RXB1: standard               */
    1824:	be 85       	ldd	r27, Y+14	; 0x0e
    1826:	ef 85       	ldd	r30, Y+15	; 0x0f
    1828:	f8 89       	ldd	r31, Y+16	; 0x10
    182a:	8c 01       	movw	r16, r24
    182c:	9d 01       	movw	r18, r26
    182e:	4d 81       	ldd	r20, Y+5	; 0x05
    1830:	64 e0       	ldi	r22, 0x04	; 4
    1832:	cf 01       	movw	r24, r30
    1834:	a2 d1       	rcall	.+836    	; 0x1b7a <_ZN7MCP_CAN16mcp2515_write_idEhhm>
    1836:	8b 85       	ldd	r24, Y+11	; 0x0b
    1838:	9c 85       	ldd	r25, Y+12	; 0x0c
    183a:	ad 85       	ldd	r26, Y+13	; 0x0d
    183c:	be 85       	ldd	r27, Y+14	; 0x0e
	mcp2515_write_id(MCP_RXF2SIDH, ext, ulFilt);			/* RXB2: extended               */
    183e:	ef 85       	ldd	r30, Y+15	; 0x0f
    1840:	f8 89       	ldd	r31, Y+16	; 0x10
    1842:	8c 01       	movw	r16, r24
    1844:	9d 01       	movw	r18, r26
    1846:	4e 81       	ldd	r20, Y+6	; 0x06
    1848:	68 e0       	ldi	r22, 0x08	; 8
    184a:	cf 01       	movw	r24, r30
    184c:	96 d1       	rcall	.+812    	; 0x1b7a <_ZN7MCP_CAN16mcp2515_write_idEhhm>
    184e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1850:	9c 85       	ldd	r25, Y+12	; 0x0c
    1852:	ad 85       	ldd	r26, Y+13	; 0x0d
    1854:	be 85       	ldd	r27, Y+14	; 0x0e
    1856:	ef 85       	ldd	r30, Y+15	; 0x0f
	mcp2515_write_id(MCP_RXF3SIDH, std, ulFilt);			/* RXB3: standard               */
    1858:	f8 89       	ldd	r31, Y+16	; 0x10
    185a:	8c 01       	movw	r16, r24
    185c:	9d 01       	movw	r18, r26
    185e:	4d 81       	ldd	r20, Y+5	; 0x05
    1860:	60 e1       	ldi	r22, 0x10	; 16
    1862:	cf 01       	movw	r24, r30
    1864:	8a d1       	rcall	.+788    	; 0x1b7a <_ZN7MCP_CAN16mcp2515_write_idEhhm>
    1866:	8b 85       	ldd	r24, Y+11	; 0x0b
    1868:	9c 85       	ldd	r25, Y+12	; 0x0c
    186a:	ad 85       	ldd	r26, Y+13	; 0x0d
    186c:	be 85       	ldd	r27, Y+14	; 0x0e
    186e:	ef 85       	ldd	r30, Y+15	; 0x0f
    1870:	f8 89       	ldd	r31, Y+16	; 0x10
	mcp2515_write_id(MCP_RXF4SIDH, ext, ulFilt);
    1872:	8c 01       	movw	r16, r24
    1874:	9d 01       	movw	r18, r26
    1876:	4e 81       	ldd	r20, Y+6	; 0x06
    1878:	64 e1       	ldi	r22, 0x14	; 20
    187a:	cf 01       	movw	r24, r30
    187c:	7e d1       	rcall	.+764    	; 0x1b7a <_ZN7MCP_CAN16mcp2515_write_idEhhm>
    187e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1880:	9c 85       	ldd	r25, Y+12	; 0x0c
    1882:	ad 85       	ldd	r26, Y+13	; 0x0d
    1884:	be 85       	ldd	r27, Y+14	; 0x0e
    1886:	ef 85       	ldd	r30, Y+15	; 0x0f
    1888:	f8 89       	ldd	r31, Y+16	; 0x10
    188a:	8c 01       	movw	r16, r24
	mcp2515_write_id(MCP_RXF5SIDH, std, ulFilt);
    188c:	9d 01       	movw	r18, r26
    188e:	4d 81       	ldd	r20, Y+5	; 0x05
    1890:	68 e1       	ldi	r22, 0x18	; 24
    1892:	cf 01       	movw	r24, r30
    1894:	72 d1       	rcall	.+740    	; 0x1b7a <_ZN7MCP_CAN16mcp2515_write_idEhhm>
    1896:	80 e3       	ldi	r24, 0x30	; 48
    1898:	8a 83       	std	Y+2, r24	; 0x02
    189a:	80 e4       	ldi	r24, 0x40	; 64
    189c:	8b 83       	std	Y+3, r24	; 0x03
    189e:	80 e5       	ldi	r24, 0x50	; 80
    18a0:	8c 83       	std	Y+4, r24	; 0x04
    18a2:	19 82       	std	Y+1, r1	; 0x01
    18a4:	1b c0       	rjmp	.+54     	; 0x18dc <_ZN7MCP_CAN22mcp2515_initCANBuffersEv+0x138>

	/* Clear, deactivate the three  */
	/* transmit buffers             */
	/* TXBnCTRL -> TXBnD7           */
	a1 = MCP_TXB0CTRL;
    18a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    18a8:	98 89       	ldd	r25, Y+16	; 0x10
	a2 = MCP_TXB1CTRL;
    18aa:	40 e0       	ldi	r20, 0x00	; 0
    18ac:	6a 81       	ldd	r22, Y+2	; 0x02
	a3 = MCP_TXB2CTRL;
    18ae:	64 db       	rcall	.-2360   	; 0xf78 <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
    18b0:	8f 85       	ldd	r24, Y+15	; 0x0f
	for (i = 0; i < 14; i++) {                                          /* in-buffer loop               */
    18b2:	98 89       	ldd	r25, Y+16	; 0x10
    18b4:	40 e0       	ldi	r20, 0x00	; 0
		mcp2515_setRegister(a1, 0);
    18b6:	6b 81       	ldd	r22, Y+3	; 0x03
    18b8:	5f db       	rcall	.-2370   	; 0xf78 <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
    18ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    18bc:	98 89       	ldd	r25, Y+16	; 0x10
    18be:	40 e0       	ldi	r20, 0x00	; 0
    18c0:	6c 81       	ldd	r22, Y+4	; 0x04
		mcp2515_setRegister(a2, 0);
    18c2:	5a db       	rcall	.-2380   	; 0xf78 <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
    18c4:	8a 81       	ldd	r24, Y+2	; 0x02
    18c6:	8f 5f       	subi	r24, 0xFF	; 255
    18c8:	8a 83       	std	Y+2, r24	; 0x02
    18ca:	8b 81       	ldd	r24, Y+3	; 0x03
    18cc:	8f 5f       	subi	r24, 0xFF	; 255
		mcp2515_setRegister(a3, 0);
    18ce:	8b 83       	std	Y+3, r24	; 0x03
    18d0:	8c 81       	ldd	r24, Y+4	; 0x04
    18d2:	8f 5f       	subi	r24, 0xFF	; 255
    18d4:	8c 83       	std	Y+4, r24	; 0x04
    18d6:	89 81       	ldd	r24, Y+1	; 0x01
    18d8:	8f 5f       	subi	r24, 0xFF	; 255
		a1++;
    18da:	89 83       	std	Y+1, r24	; 0x01
    18dc:	89 81       	ldd	r24, Y+1	; 0x01
    18de:	8e 30       	cpi	r24, 0x0E	; 14
		a2++;
    18e0:	10 f3       	brcs	.-60     	; 0x18a6 <_ZN7MCP_CAN22mcp2515_initCANBuffersEv+0x102>
    18e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    18e4:	98 89       	ldd	r25, Y+16	; 0x10
		a3++;
    18e6:	40 e0       	ldi	r20, 0x00	; 0
    18e8:	60 e6       	ldi	r22, 0x60	; 96
    18ea:	46 db       	rcall	.-2420   	; 0xf78 <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
	/* transmit buffers             */
	/* TXBnCTRL -> TXBnD7           */
	a1 = MCP_TXB0CTRL;
	a2 = MCP_TXB1CTRL;
	a3 = MCP_TXB2CTRL;
	for (i = 0; i < 14; i++) {                                          /* in-buffer loop               */
    18ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    18ee:	98 89       	ldd	r25, Y+16	; 0x10
    18f0:	40 e0       	ldi	r20, 0x00	; 0
    18f2:	60 e7       	ldi	r22, 0x70	; 112
    18f4:	41 db       	rcall	.-2430   	; 0xf78 <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
    18f6:	60 96       	adiw	r28, 0x10	; 16
		mcp2515_setRegister(a3, 0);
		a1++;
		a2++;
		a3++;
	}
	mcp2515_setRegister(MCP_RXB0CTRL, 0);
    18f8:	0f b6       	in	r0, 0x3f	; 63
    18fa:	f8 94       	cli
    18fc:	de bf       	out	0x3e, r29	; 62
    18fe:	0f be       	out	0x3f, r0	; 63
    1900:	cd bf       	out	0x3d, r28	; 61
    1902:	df 91       	pop	r29
	mcp2515_setRegister(MCP_RXB1CTRL, 0);
    1904:	cf 91       	pop	r28
    1906:	1f 91       	pop	r17
    1908:	0f 91       	pop	r16
    190a:	08 95       	ret

0000190c <_ZN7MCP_CAN12mcp2515_initEhh>:
 ** Function name:           mcp2515_init
 ** Descriptions:            init the device
 *********************************************************************************************************/

INT8U MCP_CAN::mcp2515_init(const INT8U canSpeed, const INT8U clock)                       /* mcp2515init8*/
{
    190c:	cf 93       	push	r28
    190e:	df 93       	push	r29
    1910:	cd b7       	in	r28, 0x3d	; 61
    1912:	de b7       	in	r29, 0x3e	; 62
    1914:	a1 97       	sbiw	r28, 0x21	; 33
    1916:	0f b6       	in	r0, 0x3f	; 63
    1918:	f8 94       	cli
    191a:	de bf       	out	0x3e, r29	; 62
    191c:	0f be       	out	0x3f, r0	; 63
    191e:	cd bf       	out	0x3d, r28	; 61
    1920:	9f 8f       	std	Y+31, r25	; 0x1f
    1922:	8e 8f       	std	Y+30, r24	; 0x1e
    1924:	68 a3       	std	Y+32, r22	; 0x20
    1926:	49 a3       	std	Y+33, r20	; 0x21

	INT8U res=0xff;
    1928:	8f ef       	ldi	r24, 0xFF	; 255
    192a:	89 83       	std	Y+1, r24	; 0x01

	mcp2515_reset();
    192c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    192e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1930:	fe d8       	rcall	.-3588   	; 0xb2e <_ZN7MCP_CAN13mcp2515_resetEv>
    1932:	8e 8d       	ldd	r24, Y+30	; 0x1e
	res = mcp2515_setCANCTRL_Mode(MODE_CONFIG);
    1934:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1936:	60 e8       	ldi	r22, 0x80	; 128
    1938:	c2 db       	rcall	.-2172   	; 0x10be <_ZN7MCP_CAN23mcp2515_setCANCTRL_ModeEh>
    193a:	89 83       	std	Y+1, r24	; 0x01
    193c:	80 e0       	ldi	r24, 0x00	; 0
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	a0 e2       	ldi	r26, 0x20	; 32
    1942:	b1 e4       	ldi	r27, 0x41	; 65
    1944:	8a 83       	std	Y+2, r24	; 0x02
    1946:	9b 83       	std	Y+3, r25	; 0x03
    1948:	ac 83       	std	Y+4, r26	; 0x04
    194a:	bd 83       	std	Y+5, r27	; 0x05
    194c:	20 e0       	ldi	r18, 0x00	; 0
    194e:	30 e0       	ldi	r19, 0x00	; 0
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    1950:	4a ef       	ldi	r20, 0xFA	; 250
    1952:	54 e4       	ldi	r21, 0x44	; 68
    1954:	6a 81       	ldd	r22, Y+2	; 0x02
    1956:	7b 81       	ldd	r23, Y+3	; 0x03
    1958:	8c 81       	ldd	r24, Y+4	; 0x04
    195a:	9d 81       	ldd	r25, Y+5	; 0x05
    195c:	26 d7       	rcall	.+3660   	; 0x27aa <__mulsf3>
    195e:	dc 01       	movw	r26, r24
    1960:	cb 01       	movw	r24, r22
    1962:	8e 83       	std	Y+6, r24	; 0x06
    1964:	9f 83       	std	Y+7, r25	; 0x07
    1966:	a8 87       	std	Y+8, r26	; 0x08
    1968:	b9 87       	std	Y+9, r27	; 0x09
    196a:	20 e0       	ldi	r18, 0x00	; 0
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	40 e8       	ldi	r20, 0x80	; 128
	if (__tmp < 1.0)
    1970:	5f e3       	ldi	r21, 0x3F	; 63
    1972:	6e 81       	ldd	r22, Y+6	; 0x06
    1974:	7f 81       	ldd	r23, Y+7	; 0x07
    1976:	88 85       	ldd	r24, Y+8	; 0x08
    1978:	99 85       	ldd	r25, Y+9	; 0x09
    197a:	06 d6       	rcall	.+3084   	; 0x2588 <__cmpsf2>
    197c:	88 23       	and	r24, r24
    197e:	2c f4       	brge	.+10     	; 0x198a <_ZN7MCP_CAN12mcp2515_initEhh+0x7e>
    1980:	81 e0       	ldi	r24, 0x01	; 1
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	9b 87       	std	Y+11, r25	; 0x0b
    1986:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
    1988:	3b c0       	rjmp	.+118    	; 0x1a00 <_ZN7MCP_CAN12mcp2515_initEhh+0xf4>
    198a:	20 e0       	ldi	r18, 0x00	; 0
    198c:	3f ef       	ldi	r19, 0xFF	; 255
    198e:	4f e7       	ldi	r20, 0x7F	; 127
    1990:	57 e4       	ldi	r21, 0x47	; 71
	else if (__tmp > 65535)
    1992:	6e 81       	ldd	r22, Y+6	; 0x06
    1994:	7f 81       	ldd	r23, Y+7	; 0x07
    1996:	88 85       	ldd	r24, Y+8	; 0x08
    1998:	99 85       	ldd	r25, Y+9	; 0x09
    199a:	03 d7       	rcall	.+3590   	; 0x27a2 <__gesf2>
    199c:	18 16       	cp	r1, r24
    199e:	3c f5       	brge	.+78     	; 0x19ee <_ZN7MCP_CAN12mcp2515_initEhh+0xe2>
    19a0:	20 e0       	ldi	r18, 0x00	; 0
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	40 e2       	ldi	r20, 0x20	; 32
    19a6:	51 e4       	ldi	r21, 0x41	; 65
    19a8:	6a 81       	ldd	r22, Y+2	; 0x02
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19aa:	7b 81       	ldd	r23, Y+3	; 0x03
    19ac:	8c 81       	ldd	r24, Y+4	; 0x04
    19ae:	9d 81       	ldd	r25, Y+5	; 0x05
    19b0:	fc d6       	rcall	.+3576   	; 0x27aa <__mulsf3>
    19b2:	dc 01       	movw	r26, r24
    19b4:	cb 01       	movw	r24, r22
    19b6:	bc 01       	movw	r22, r24
    19b8:	cd 01       	movw	r24, r26
    19ba:	52 d6       	rcall	.+3236   	; 0x2660 <__fixunssfsi>
    19bc:	dc 01       	movw	r26, r24
    19be:	cb 01       	movw	r24, r22
    19c0:	9b 87       	std	Y+11, r25	; 0x0b
    19c2:	8a 87       	std	Y+10, r24	; 0x0a
    19c4:	0f c0       	rjmp	.+30     	; 0x19e4 <_ZN7MCP_CAN12mcp2515_initEhh+0xd8>
    19c6:	88 ec       	ldi	r24, 0xC8	; 200
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	9d 87       	std	Y+13, r25	; 0x0d
    19cc:	8c 87       	std	Y+12, r24	; 0x0c
    19ce:	8c 85       	ldd	r24, Y+12	; 0x0c
    19d0:	9d 85       	ldd	r25, Y+13	; 0x0d
    19d2:	01 97       	sbiw	r24, 0x01	; 1
    19d4:	f1 f7       	brne	.-4      	; 0x19d2 <_ZN7MCP_CAN12mcp2515_initEhh+0xc6>
    19d6:	9d 87       	std	Y+13, r25	; 0x0d
    19d8:	8c 87       	std	Y+12, r24	; 0x0c
    19da:	8a 85       	ldd	r24, Y+10	; 0x0a
    19dc:	9b 85       	ldd	r25, Y+11	; 0x0b
    19de:	01 97       	sbiw	r24, 0x01	; 1
    19e0:	9b 87       	std	Y+11, r25	; 0x0b
    19e2:	8a 87       	std	Y+10, r24	; 0x0a
    19e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    19e6:	9b 85       	ldd	r25, Y+11	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19e8:	00 97       	sbiw	r24, 0x00	; 0
    19ea:	69 f7       	brne	.-38     	; 0x19c6 <_ZN7MCP_CAN12mcp2515_initEhh+0xba>
    19ec:	13 c0       	rjmp	.+38     	; 0x1a14 <_ZN7MCP_CAN12mcp2515_initEhh+0x108>
    19ee:	6e 81       	ldd	r22, Y+6	; 0x06
    19f0:	7f 81       	ldd	r23, Y+7	; 0x07
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19f2:	88 85       	ldd	r24, Y+8	; 0x08
    19f4:	99 85       	ldd	r25, Y+9	; 0x09
    19f6:	34 d6       	rcall	.+3176   	; 0x2660 <__fixunssfsi>
    19f8:	dc 01       	movw	r26, r24
    19fa:	cb 01       	movw	r24, r22
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19fc:	9b 87       	std	Y+11, r25	; 0x0b
    19fe:	8a 87       	std	Y+10, r24	; 0x0a
    1a00:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a02:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a04:	9f 87       	std	Y+15, r25	; 0x0f
    1a06:	8e 87       	std	Y+14, r24	; 0x0e
    1a08:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a0a:	9f 85       	ldd	r25, Y+15	; 0x0f
    1a0c:	01 97       	sbiw	r24, 0x01	; 1
    1a0e:	f1 f7       	brne	.-4      	; 0x1a0c <_ZN7MCP_CAN12mcp2515_initEhh+0x100>
    1a10:	9f 87       	std	Y+15, r25	; 0x0f
    1a12:	8e 87       	std	Y+14, r24	; 0x0e
    1a14:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a16:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1a18:	6e e0       	ldi	r22, 0x0E	; 14
    1a1a:	97 d9       	rcall	.-3282   	; 0xd4a <_ZN7MCP_CAN20mcp2515_readRegisterEh>
    1a1c:	89 83       	std	Y+1, r24	; 0x01
    1a1e:	89 81       	ldd	r24, Y+1	; 0x01
    1a20:	80 7e       	andi	r24, 0xE0	; 224
    1a22:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	res=mcp2515_readRegister(MCP_CANSTAT);
    1a24:	89 81       	ldd	r24, Y+1	; 0x01
    1a26:	80 38       	cpi	r24, 0x80	; 128
    1a28:	11 f0       	breq	.+4      	; 0x1a2e <_ZN7MCP_CAN12mcp2515_initEhh+0x122>
    1a2a:	8f ef       	ldi	r24, 0xFF	; 255
    1a2c:	9d c0       	rjmp	.+314    	; 0x1b68 <_ZN7MCP_CAN12mcp2515_initEhh+0x25c>
    1a2e:	8f ef       	ldi	r24, 0xFF	; 255
	res&=MODE_MASK;
    1a30:	89 83       	std	Y+1, r24	; 0x01
    1a32:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a34:	9f 8d       	ldd	r25, Y+31	; 0x1f

	if (res != MODE_CONFIG)
    1a36:	49 a1       	ldd	r20, Y+33	; 0x21
    1a38:	68 a1       	ldd	r22, Y+32	; 0x20
    1a3a:	66 db       	rcall	.-2356   	; 0x1108 <_ZN7MCP_CAN18mcp2515_configRateEhh>
	{
		return -1;
    1a3c:	89 83       	std	Y+1, r24	; 0x01
    1a3e:	89 81       	ldd	r24, Y+1	; 0x01
	}
	res=0xff;
    1a40:	81 30       	cpi	r24, 0x01	; 1
    1a42:	11 f4       	brne	.+4      	; 0x1a48 <_ZN7MCP_CAN12mcp2515_initEhh+0x13c>
	/* set baudrate                 */
	res=mcp2515_configRate(canSpeed, clock);
    1a44:	8f ef       	ldi	r24, 0xFF	; 255
    1a46:	90 c0       	rjmp	.+288    	; 0x1b68 <_ZN7MCP_CAN12mcp2515_initEhh+0x25c>
    1a48:	89 81       	ldd	r24, Y+1	; 0x01
    1a4a:	88 23       	and	r24, r24
    1a4c:	09 f0       	breq	.+2      	; 0x1a50 <_ZN7MCP_CAN12mcp2515_initEhh+0x144>
    1a4e:	8b c0       	rjmp	.+278    	; 0x1b66 <_ZN7MCP_CAN12mcp2515_initEhh+0x25a>
    1a50:	8e 8d       	ldd	r24, Y+30	; 0x1e
	if(res==MCP2515_FAIL)
    1a52:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1a54:	a7 de       	rcall	.-690    	; 0x17a4 <_ZN7MCP_CAN22mcp2515_initCANBuffersEv>
    1a56:	8e 8d       	ldd	r24, Y+30	; 0x1e
	{
		return -1;
    1a58:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1a5a:	43 e0       	ldi	r20, 0x03	; 3
	}
	if (res == MCP2515_OK) {
    1a5c:	6b e2       	ldi	r22, 0x2B	; 43
    1a5e:	8c da       	rcall	.-2792   	; 0xf78 <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
    1a60:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a62:	9f 8d       	ldd	r25, Y+31	; 0x1f
		/* init canbuffers              */
		mcp2515_initCANBuffers();
    1a64:	60 e0       	ldi	r22, 0x00	; 0
    1a66:	2b db       	rcall	.-2474   	; 0x10be <_ZN7MCP_CAN23mcp2515_setCANCTRL_ModeEh>
    1a68:	89 83       	std	Y+1, r24	; 0x01
    1a6a:	80 e0       	ldi	r24, 0x00	; 0

		/* interrupt mode               */
		mcp2515_setRegister(MCP_CANINTE, MCP_RX0IF | MCP_RX1IF);
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	a8 ec       	ldi	r26, 0xC8	; 200
    1a70:	b2 e4       	ldi	r27, 0x42	; 66
    1a72:	88 8b       	std	Y+16, r24	; 0x10
    1a74:	99 8b       	std	Y+17, r25	; 0x11
    1a76:	aa 8b       	std	Y+18, r26	; 0x12
		res = mcp2515_setCANCTRL_Mode(MODE_NORMAL);
    1a78:	bb 8b       	std	Y+19, r27	; 0x13
    1a7a:	20 e0       	ldi	r18, 0x00	; 0
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	4a ef       	ldi	r20, 0xFA	; 250
    1a80:	54 e4       	ldi	r21, 0x44	; 68
    1a82:	68 89       	ldd	r22, Y+16	; 0x10
    1a84:	79 89       	ldd	r23, Y+17	; 0x11
    1a86:	8a 89       	ldd	r24, Y+18	; 0x12
    1a88:	9b 89       	ldd	r25, Y+19	; 0x13
    1a8a:	8f d6       	rcall	.+3358   	; 0x27aa <__mulsf3>
    1a8c:	dc 01       	movw	r26, r24
    1a8e:	cb 01       	movw	r24, r22
    1a90:	8c 8b       	std	Y+20, r24	; 0x14
    1a92:	9d 8b       	std	Y+21, r25	; 0x15
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    1a94:	ae 8b       	std	Y+22, r26	; 0x16
    1a96:	bf 8b       	std	Y+23, r27	; 0x17
    1a98:	20 e0       	ldi	r18, 0x00	; 0
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	40 e8       	ldi	r20, 0x80	; 128
    1a9e:	5f e3       	ldi	r21, 0x3F	; 63
    1aa0:	6c 89       	ldd	r22, Y+20	; 0x14
    1aa2:	7d 89       	ldd	r23, Y+21	; 0x15
    1aa4:	8e 89       	ldd	r24, Y+22	; 0x16
    1aa6:	9f 89       	ldd	r25, Y+23	; 0x17
    1aa8:	6f d5       	rcall	.+2782   	; 0x2588 <__cmpsf2>
    1aaa:	88 23       	and	r24, r24
    1aac:	2c f4       	brge	.+10     	; 0x1ab8 <_ZN7MCP_CAN12mcp2515_initEhh+0x1ac>
    1aae:	81 e0       	ldi	r24, 0x01	; 1
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	99 8f       	std	Y+25, r25	; 0x19
	if (__tmp < 1.0)
    1ab4:	88 8f       	std	Y+24, r24	; 0x18
    1ab6:	3b c0       	rjmp	.+118    	; 0x1b2e <_ZN7MCP_CAN12mcp2515_initEhh+0x222>
    1ab8:	20 e0       	ldi	r18, 0x00	; 0
    1aba:	3f ef       	ldi	r19, 0xFF	; 255
    1abc:	4f e7       	ldi	r20, 0x7F	; 127
    1abe:	57 e4       	ldi	r21, 0x47	; 71
    1ac0:	6c 89       	ldd	r22, Y+20	; 0x14
    1ac2:	7d 89       	ldd	r23, Y+21	; 0x15
    1ac4:	8e 89       	ldd	r24, Y+22	; 0x16
    1ac6:	9f 89       	ldd	r25, Y+23	; 0x17
    1ac8:	6c d6       	rcall	.+3288   	; 0x27a2 <__gesf2>
    1aca:	18 16       	cp	r1, r24
		__ticks = 1;
    1acc:	3c f5       	brge	.+78     	; 0x1b1c <_ZN7MCP_CAN12mcp2515_initEhh+0x210>
    1ace:	20 e0       	ldi	r18, 0x00	; 0
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	40 e2       	ldi	r20, 0x20	; 32
    1ad4:	51 e4       	ldi	r21, 0x41	; 65
	else if (__tmp > 65535)
    1ad6:	68 89       	ldd	r22, Y+16	; 0x10
    1ad8:	79 89       	ldd	r23, Y+17	; 0x11
    1ada:	8a 89       	ldd	r24, Y+18	; 0x12
    1adc:	9b 89       	ldd	r25, Y+19	; 0x13
    1ade:	65 d6       	rcall	.+3274   	; 0x27aa <__mulsf3>
    1ae0:	dc 01       	movw	r26, r24
    1ae2:	cb 01       	movw	r24, r22
    1ae4:	bc 01       	movw	r22, r24
    1ae6:	cd 01       	movw	r24, r26
    1ae8:	bb d5       	rcall	.+2934   	; 0x2660 <__fixunssfsi>
    1aea:	dc 01       	movw	r26, r24
    1aec:	cb 01       	movw	r24, r22
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aee:	99 8f       	std	Y+25, r25	; 0x19
    1af0:	88 8f       	std	Y+24, r24	; 0x18
    1af2:	0f c0       	rjmp	.+30     	; 0x1b12 <_ZN7MCP_CAN12mcp2515_initEhh+0x206>
    1af4:	88 ec       	ldi	r24, 0xC8	; 200
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	9b 8f       	std	Y+27, r25	; 0x1b
    1afa:	8a 8f       	std	Y+26, r24	; 0x1a
    1afc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1afe:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1b00:	01 97       	sbiw	r24, 0x01	; 1
    1b02:	f1 f7       	brne	.-4      	; 0x1b00 <_ZN7MCP_CAN12mcp2515_initEhh+0x1f4>
    1b04:	9b 8f       	std	Y+27, r25	; 0x1b
    1b06:	8a 8f       	std	Y+26, r24	; 0x1a
    1b08:	88 8d       	ldd	r24, Y+24	; 0x18
    1b0a:	99 8d       	ldd	r25, Y+25	; 0x19
    1b0c:	01 97       	sbiw	r24, 0x01	; 1
    1b0e:	99 8f       	std	Y+25, r25	; 0x19
    1b10:	88 8f       	std	Y+24, r24	; 0x18
    1b12:	88 8d       	ldd	r24, Y+24	; 0x18
    1b14:	99 8d       	ldd	r25, Y+25	; 0x19
    1b16:	00 97       	sbiw	r24, 0x00	; 0
    1b18:	69 f7       	brne	.-38     	; 0x1af4 <_ZN7MCP_CAN12mcp2515_initEhh+0x1e8>
    1b1a:	13 c0       	rjmp	.+38     	; 0x1b42 <_ZN7MCP_CAN12mcp2515_initEhh+0x236>
    1b1c:	6c 89       	ldd	r22, Y+20	; 0x14
    1b1e:	7d 89       	ldd	r23, Y+21	; 0x15
    1b20:	8e 89       	ldd	r24, Y+22	; 0x16
    1b22:	9f 89       	ldd	r25, Y+23	; 0x17
    1b24:	9d d5       	rcall	.+2874   	; 0x2660 <__fixunssfsi>
    1b26:	dc 01       	movw	r26, r24
    1b28:	cb 01       	movw	r24, r22
    1b2a:	99 8f       	std	Y+25, r25	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b2c:	88 8f       	std	Y+24, r24	; 0x18
    1b2e:	88 8d       	ldd	r24, Y+24	; 0x18
    1b30:	99 8d       	ldd	r25, Y+25	; 0x19
    1b32:	9d 8f       	std	Y+29, r25	; 0x1d
    1b34:	8c 8f       	std	Y+28, r24	; 0x1c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b36:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1b38:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1b3a:	01 97       	sbiw	r24, 0x01	; 1
    1b3c:	f1 f7       	brne	.-4      	; 0x1b3a <_ZN7MCP_CAN12mcp2515_initEhh+0x22e>
    1b3e:	9d 8f       	std	Y+29, r25	; 0x1d
    1b40:	8c 8f       	std	Y+28, r24	; 0x1c
    1b42:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b44:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1b46:	40 e0       	ldi	r20, 0x00	; 0
    1b48:	6f e0       	ldi	r22, 0x0F	; 15
    1b4a:	16 da       	rcall	.-3028   	; 0xf78 <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
    1b4c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b4e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1b50:	6e e0       	ldi	r22, 0x0E	; 14
    1b52:	fb d8       	rcall	.-3594   	; 0xd4a <_ZN7MCP_CAN20mcp2515_readRegisterEh>
    1b54:	89 83       	std	Y+1, r24	; 0x01
    1b56:	89 81       	ldd	r24, Y+1	; 0x01
    1b58:	80 7e       	andi	r24, 0xE0	; 224
    1b5a:	89 83       	std	Y+1, r24	; 0x01
    1b5c:	89 81       	ldd	r24, Y+1	; 0x01
    1b5e:	88 23       	and	r24, r24
    1b60:	11 f4       	brne	.+4      	; 0x1b66 <_ZN7MCP_CAN12mcp2515_initEhh+0x25a>
    1b62:	80 e0       	ldi	r24, 0x00	; 0
    1b64:	01 c0       	rjmp	.+2      	; 0x1b68 <_ZN7MCP_CAN12mcp2515_initEhh+0x25c>
    1b66:	8f ef       	ldi	r24, 0xFF	; 255
		/* enter normal mode
		 *  */
		_delay_ms(100);
		//res = mcp2515_setCANCTRL_Mode(MODE_NORMAL); //SHUBHAM REMOVED IT
		mcp2515_setRegister(MCP_CANCTRL,MODE_NORMAL);
    1b68:	a1 96       	adiw	r28, 0x21	; 33
    1b6a:	0f b6       	in	r0, 0x3f	; 63
    1b6c:	f8 94       	cli
    1b6e:	de bf       	out	0x3e, r29	; 62
    1b70:	0f be       	out	0x3f, r0	; 63
    1b72:	cd bf       	out	0x3d, r28	; 61
		res=mcp2515_readRegister(MCP_CANSTAT);
    1b74:	df 91       	pop	r29
    1b76:	cf 91       	pop	r28
    1b78:	08 95       	ret

00001b7a <_ZN7MCP_CAN16mcp2515_write_idEhhm>:
/*********************************************************************************************************
 ** Function name:           mcp2515_write_id
 ** Descriptions:            write can id
 *********************************************************************************************************/
void MCP_CAN::mcp2515_write_id(const INT8U mcp_addr, const INT8U ext, const INT32U id)
{
    1b7a:	0f 93       	push	r16
    1b7c:	1f 93       	push	r17
    1b7e:	cf 93       	push	r28
    1b80:	df 93       	push	r29
    1b82:	cd b7       	in	r28, 0x3d	; 61
    1b84:	de b7       	in	r29, 0x3e	; 62
    1b86:	2e 97       	sbiw	r28, 0x0e	; 14
    1b88:	0f b6       	in	r0, 0x3f	; 63
    1b8a:	f8 94       	cli
    1b8c:	de bf       	out	0x3e, r29	; 62
    1b8e:	0f be       	out	0x3f, r0	; 63
    1b90:	cd bf       	out	0x3d, r28	; 61
    1b92:	98 87       	std	Y+8, r25	; 0x08
    1b94:	8f 83       	std	Y+7, r24	; 0x07
    1b96:	69 87       	std	Y+9, r22	; 0x09
    1b98:	4a 87       	std	Y+10, r20	; 0x0a
    1b9a:	0b 87       	std	Y+11, r16	; 0x0b
    1b9c:	1c 87       	std	Y+12, r17	; 0x0c
    1b9e:	2d 87       	std	Y+13, r18	; 0x0d
    1ba0:	3e 87       	std	Y+14, r19	; 0x0e
	uint16_t canid;
	INT8U tbufdata[4];

	canid = (uint16_t)(id & 0x0FFFF);
    1ba2:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ba4:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ba6:	9a 83       	std	Y+2, r25	; 0x02
    1ba8:	89 83       	std	Y+1, r24	; 0x01

	if (ext == 1)
    1baa:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bac:	81 30       	cpi	r24, 0x01	; 1
    1bae:	51 f5       	brne	.+84     	; 0x1c04 <_ZN7MCP_CAN16mcp2515_write_idEhhm+0x8a>
	{
		tbufdata[MCP_EID0] = (INT8U)(canid & 0xFF);
    1bb0:	89 81       	ldd	r24, Y+1	; 0x01
    1bb2:	8e 83       	std	Y+6, r24	; 0x06
		tbufdata[MCP_EID8] = (INT8U)(canid >> 8);
    1bb4:	89 81       	ldd	r24, Y+1	; 0x01
    1bb6:	9a 81       	ldd	r25, Y+2	; 0x02
    1bb8:	89 2f       	mov	r24, r25
    1bba:	99 27       	eor	r25, r25
    1bbc:	8d 83       	std	Y+5, r24	; 0x05
		canid = (uint16_t)(id >> 16);
    1bbe:	8b 85       	ldd	r24, Y+11	; 0x0b
    1bc0:	9c 85       	ldd	r25, Y+12	; 0x0c
    1bc2:	ad 85       	ldd	r26, Y+13	; 0x0d
    1bc4:	be 85       	ldd	r27, Y+14	; 0x0e
    1bc6:	cd 01       	movw	r24, r26
    1bc8:	aa 27       	eor	r26, r26
    1bca:	bb 27       	eor	r27, r27
    1bcc:	9a 83       	std	Y+2, r25	; 0x02
    1bce:	89 83       	std	Y+1, r24	; 0x01
		tbufdata[MCP_SIDL] = (INT8U)(canid & 0x03);
    1bd0:	89 81       	ldd	r24, Y+1	; 0x01
    1bd2:	83 70       	andi	r24, 0x03	; 3
    1bd4:	8c 83       	std	Y+4, r24	; 0x04
		tbufdata[MCP_SIDL] += (INT8U)((canid & 0x1C) << 3);
    1bd6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd8:	89 81       	ldd	r24, Y+1	; 0x01
    1bda:	8c 71       	andi	r24, 0x1C	; 28
    1bdc:	88 0f       	add	r24, r24
    1bde:	88 0f       	add	r24, r24
    1be0:	88 0f       	add	r24, r24
    1be2:	89 0f       	add	r24, r25
    1be4:	8c 83       	std	Y+4, r24	; 0x04
		tbufdata[MCP_SIDL] |= MCP_TXB_EXIDE_M;
    1be6:	8c 81       	ldd	r24, Y+4	; 0x04
    1be8:	88 60       	ori	r24, 0x08	; 8
    1bea:	8c 83       	std	Y+4, r24	; 0x04
		tbufdata[MCP_SIDH] = (INT8U)(canid >> 5);
    1bec:	89 81       	ldd	r24, Y+1	; 0x01
    1bee:	9a 81       	ldd	r25, Y+2	; 0x02
    1bf0:	96 95       	lsr	r25
    1bf2:	87 95       	ror	r24
    1bf4:	92 95       	swap	r25
    1bf6:	82 95       	swap	r24
    1bf8:	8f 70       	andi	r24, 0x0F	; 15
    1bfa:	89 27       	eor	r24, r25
    1bfc:	9f 70       	andi	r25, 0x0F	; 15
    1bfe:	89 27       	eor	r24, r25
    1c00:	8b 83       	std	Y+3, r24	; 0x03
    1c02:	10 c0       	rjmp	.+32     	; 0x1c24 <_ZN7MCP_CAN16mcp2515_write_idEhhm+0xaa>
	}
	else
	{
		tbufdata[MCP_SIDH] = (INT8U)(canid >> 3);
    1c04:	89 81       	ldd	r24, Y+1	; 0x01
    1c06:	9a 81       	ldd	r25, Y+2	; 0x02
    1c08:	96 95       	lsr	r25
    1c0a:	87 95       	ror	r24
    1c0c:	96 95       	lsr	r25
    1c0e:	87 95       	ror	r24
    1c10:	96 95       	lsr	r25
    1c12:	87 95       	ror	r24
    1c14:	8b 83       	std	Y+3, r24	; 0x03
		tbufdata[MCP_SIDL] = (INT8U)((canid & 0x07) << 5);
    1c16:	89 81       	ldd	r24, Y+1	; 0x01
    1c18:	82 95       	swap	r24
    1c1a:	88 0f       	add	r24, r24
    1c1c:	80 7e       	andi	r24, 0xE0	; 224
    1c1e:	8c 83       	std	Y+4, r24	; 0x04
		tbufdata[MCP_EID0] = 0;
    1c20:	1e 82       	std	Y+6, r1	; 0x06
		tbufdata[MCP_EID8] = 0;
    1c22:	1d 82       	std	Y+5, r1	; 0x05
	}
	mcp2515_setRegisterS(mcp_addr, tbufdata, 4);
    1c24:	ae 01       	movw	r20, r28
    1c26:	4d 5f       	subi	r20, 0xFD	; 253
    1c28:	5f 4f       	sbci	r21, 0xFF	; 255
    1c2a:	8f 81       	ldd	r24, Y+7	; 0x07
    1c2c:	98 85       	ldd	r25, Y+8	; 0x08
    1c2e:	24 e0       	ldi	r18, 0x04	; 4
    1c30:	69 85       	ldd	r22, Y+9	; 0x09
    1c32:	ce d9       	rcall	.-3172   	; 0xfd0 <_ZN7MCP_CAN20mcp2515_setRegisterSEhPKhh>
    1c34:	2e 96       	adiw	r28, 0x0e	; 14
}
    1c36:	0f b6       	in	r0, 0x3f	; 63
    1c38:	f8 94       	cli
    1c3a:	de bf       	out	0x3e, r29	; 62
    1c3c:	0f be       	out	0x3f, r0	; 63
    1c3e:	cd bf       	out	0x3d, r28	; 61
    1c40:	df 91       	pop	r29
    1c42:	cf 91       	pop	r28
    1c44:	1f 91       	pop	r17
    1c46:	0f 91       	pop	r16
    1c48:	08 95       	ret

00001c4a <_ZN7MCP_CAN20mcp2515_write_canMsgEh>:
/*********************************************************************************************************
 ** Function name:           mcp2515_write_canMsg
 ** Descriptions:            write msg
 *********************************************************************************************************/
void MCP_CAN::mcp2515_write_canMsg(const INT8U buffer_sidh_addr)
{
    1c4a:	0f 93       	push	r16
    1c4c:	1f 93       	push	r17
    1c4e:	cf 93       	push	r28
    1c50:	df 93       	push	r29
    1c52:	00 d0       	rcall	.+0      	; 0x1c54 <_ZN7MCP_CAN20mcp2515_write_canMsgEh+0xa>
    1c54:	00 d0       	rcall	.+0      	; 0x1c56 <_ZN7MCP_CAN20mcp2515_write_canMsgEh+0xc>
    1c56:	cd b7       	in	r28, 0x3d	; 61
    1c58:	de b7       	in	r29, 0x3e	; 62
    1c5a:	9b 83       	std	Y+3, r25	; 0x03
    1c5c:	8a 83       	std	Y+2, r24	; 0x02
    1c5e:	6c 83       	std	Y+4, r22	; 0x04

	INT8U mcp_addr;
	mcp_addr = buffer_sidh_addr;
    1c60:	8c 81       	ldd	r24, Y+4	; 0x04
    1c62:	89 83       	std	Y+1, r24	; 0x01
	mcp2515_setRegisterS(mcp_addr + 5, m_nDta, m_nDlc);                  /* write data bytes             */
    1c64:	8a 81       	ldd	r24, Y+2	; 0x02
    1c66:	9b 81       	ldd	r25, Y+3	; 0x03
    1c68:	fc 01       	movw	r30, r24
    1c6a:	25 81       	ldd	r18, Z+5	; 0x05
    1c6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6e:	9b 81       	ldd	r25, Y+3	; 0x03
    1c70:	ac 01       	movw	r20, r24
    1c72:	4a 5f       	subi	r20, 0xFA	; 250
    1c74:	5f 4f       	sbci	r21, 0xFF	; 255
    1c76:	89 81       	ldd	r24, Y+1	; 0x01
    1c78:	35 e0       	ldi	r19, 0x05	; 5
    1c7a:	38 0f       	add	r19, r24
    1c7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7e:	9b 81       	ldd	r25, Y+3	; 0x03
    1c80:	63 2f       	mov	r22, r19
    1c82:	a6 d9       	rcall	.-3252   	; 0xfd0 <_ZN7MCP_CAN20mcp2515_setRegisterSEhPKhh>
    1c84:	8a 81       	ldd	r24, Y+2	; 0x02
	if (m_nRtr == 1)                                                   /* if RTR set bit in byte       */
    1c86:	9b 81       	ldd	r25, Y+3	; 0x03
    1c88:	8a 5b       	subi	r24, 0xBA	; 186
    1c8a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c8c:	fc 01       	movw	r30, r24
    1c8e:	80 81       	ld	r24, Z
    1c90:	81 30       	cpi	r24, 0x01	; 1
    1c92:	51 f4       	brne	.+20     	; 0x1ca8 <_ZN7MCP_CAN20mcp2515_write_canMsgEh+0x5e>
    1c94:	8a 81       	ldd	r24, Y+2	; 0x02
	{
		m_nDlc |= MCP_RTR_MASK;
    1c96:	9b 81       	ldd	r25, Y+3	; 0x03
    1c98:	fc 01       	movw	r30, r24
    1c9a:	85 81       	ldd	r24, Z+5	; 0x05
    1c9c:	28 2f       	mov	r18, r24
    1c9e:	20 64       	ori	r18, 0x40	; 64
    1ca0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ca4:	fc 01       	movw	r30, r24
    1ca6:	25 83       	std	Z+5, r18	; 0x05
    1ca8:	8a 81       	ldd	r24, Y+2	; 0x02
	}
	mcp2515_setRegister((mcp_addr + 4), m_nDlc);                        /* write the RTR and DLC        */
    1caa:	9b 81       	ldd	r25, Y+3	; 0x03
    1cac:	fc 01       	movw	r30, r24
    1cae:	35 81       	ldd	r19, Z+5	; 0x05
    1cb0:	89 81       	ldd	r24, Y+1	; 0x01
    1cb2:	24 e0       	ldi	r18, 0x04	; 4
    1cb4:	28 0f       	add	r18, r24
    1cb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb8:	9b 81       	ldd	r25, Y+3	; 0x03
    1cba:	43 2f       	mov	r20, r19
    1cbc:	62 2f       	mov	r22, r18
    1cbe:	5c d9       	rcall	.-3400   	; 0xf78 <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
    1cc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc2:	9b 81       	ldd	r25, Y+3	; 0x03
	mcp2515_write_id(mcp_addr, m_nExtFlg, m_nID);                     /* write CAN id                 */
    1cc4:	fc 01       	movw	r30, r24
    1cc6:	81 81       	ldd	r24, Z+1	; 0x01
    1cc8:	92 81       	ldd	r25, Z+2	; 0x02
    1cca:	a3 81       	ldd	r26, Z+3	; 0x03
    1ccc:	b4 81       	ldd	r27, Z+4	; 0x04
    1cce:	2a 81       	ldd	r18, Y+2	; 0x02
    1cd0:	3b 81       	ldd	r19, Y+3	; 0x03
    1cd2:	f9 01       	movw	r30, r18
    1cd4:	40 81       	ld	r20, Z
    1cd6:	ea 81       	ldd	r30, Y+2	; 0x02
    1cd8:	fb 81       	ldd	r31, Y+3	; 0x03
    1cda:	8c 01       	movw	r16, r24
    1cdc:	9d 01       	movw	r18, r26
    1cde:	69 81       	ldd	r22, Y+1	; 0x01
    1ce0:	cf 01       	movw	r24, r30
    1ce2:	4b df       	rcall	.-362    	; 0x1b7a <_ZN7MCP_CAN16mcp2515_write_idEhhm>
    1ce4:	0f 90       	pop	r0
    1ce6:	0f 90       	pop	r0
    1ce8:	0f 90       	pop	r0

}
    1cea:	0f 90       	pop	r0
    1cec:	df 91       	pop	r29
    1cee:	cf 91       	pop	r28
    1cf0:	1f 91       	pop	r17
    1cf2:	0f 91       	pop	r16
    1cf4:	08 95       	ret

00001cf6 <_ZN7MCP_CAN22mcp2515_start_transmitEh>:
/*********************************************************************************************************
 ** Function name:           sendMsg
 ** Descriptions:            send message
 *********************************************************************************************************/
void MCP_CAN::mcp2515_start_transmit(const INT8U mcp_addr)              /* start transmit               */
{
    1cf6:	cf 93       	push	r28
    1cf8:	df 93       	push	r29
    1cfa:	00 d0       	rcall	.+0      	; 0x1cfc <_ZN7MCP_CAN22mcp2515_start_transmitEh+0x6>
    1cfc:	00 d0       	rcall	.+0      	; 0x1cfe <_ZN7MCP_CAN22mcp2515_start_transmitEh+0x8>
    1cfe:	1f 92       	push	r1
    1d00:	cd b7       	in	r28, 0x3d	; 61
    1d02:	de b7       	in	r29, 0x3e	; 62
    1d04:	9b 83       	std	Y+3, r25	; 0x03
    1d06:	8a 83       	std	Y+2, r24	; 0x02
    1d08:	6c 83       	std	Y+4, r22	; 0x04
	INT8U res;
	mcp2515_modifyRegister(mcp_addr - 1, MCP_TXB_TXREQ_M, MCP_TXB_TXREQ_M);
    1d0a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d0c:	3f ef       	ldi	r19, 0xFF	; 255
    1d0e:	38 0f       	add	r19, r24
    1d10:	8a 81       	ldd	r24, Y+2	; 0x02
    1d12:	9b 81       	ldd	r25, Y+3	; 0x03
    1d14:	28 e0       	ldi	r18, 0x08	; 8
    1d16:	48 e0       	ldi	r20, 0x08	; 8
    1d18:	63 2f       	mov	r22, r19
    1d1a:	9f d9       	rcall	.-3266   	; 0x105a <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh>
    1d1c:	8c 81       	ldd	r24, Y+4	; 0x04
	//mcp2515_setRegister(mcp_addr - 1,MCP_TXB_TXREQ_M);//SHUBHAM
	res=mcp2515_readRegister(mcp_addr - 1);
    1d1e:	2f ef       	ldi	r18, 0xFF	; 255
    1d20:	28 0f       	add	r18, r24
    1d22:	8a 81       	ldd	r24, Y+2	; 0x02
    1d24:	9b 81       	ldd	r25, Y+3	; 0x03
    1d26:	62 2f       	mov	r22, r18
    1d28:	10 d8       	rcall	.-4064   	; 0xd4a <_ZN7MCP_CAN20mcp2515_readRegisterEh>
    1d2a:	89 83       	std	Y+1, r24	; 0x01
    1d2c:	89 81       	ldd	r24, Y+1	; 0x01
    1d2e:	88 70       	andi	r24, 0x08	; 8

	if((res&=0x08)==0x08)
    1d30:	89 83       	std	Y+1, r24	; 0x01
    1d32:	0f 90       	pop	r0
    1d34:	0f 90       	pop	r0
	{
		//led_blink(PIN7,1);

	}
	//mcp2515_setRegister(mcp_addr - 1,MCP_TXB_TXREQ_M);//SHUBHAM
}
    1d36:	0f 90       	pop	r0
    1d38:	0f 90       	pop	r0
    1d3a:	0f 90       	pop	r0
    1d3c:	df 91       	pop	r29
    1d3e:	cf 91       	pop	r28
    1d40:	08 95       	ret

00001d42 <_ZN7MCP_CAN24mcp2515_getNextFreeTXBufEPh>:
/*********************************************************************************************************
 ** Function name:           sendMsg
 ** Descriptions:            send message
 *********************************************************************************************************/
INT8U MCP_CAN::mcp2515_getNextFreeTXBuf(INT8U *txbuf_n)                 /* get Next free txbuf          */
{
    1d42:	cf 93       	push	r28
    1d44:	df 93       	push	r29
    1d46:	cd b7       	in	r28, 0x3d	; 61
    1d48:	de b7       	in	r29, 0x3e	; 62
    1d4a:	2a 97       	sbiw	r28, 0x0a	; 10
    1d4c:	0f b6       	in	r0, 0x3f	; 63
    1d4e:	f8 94       	cli
    1d50:	de bf       	out	0x3e, r29	; 62
    1d52:	0f be       	out	0x3f, r0	; 63
    1d54:	cd bf       	out	0x3d, r28	; 61
    1d56:	98 87       	std	Y+8, r25	; 0x08
    1d58:	8f 83       	std	Y+7, r24	; 0x07
    1d5a:	7a 87       	std	Y+10, r23	; 0x0a
    1d5c:	69 87       	std	Y+9, r22	; 0x09
	INT8U res=0xff, i, ctrlval;
    1d5e:	8f ef       	ldi	r24, 0xFF	; 255
    1d60:	8a 83       	std	Y+2, r24	; 0x02
	INT8U ctrlregs[MCP_N_TXBUFFERS] = { MCP_TXB0CTRL, MCP_TXB1CTRL, MCP_TXB2CTRL };
    1d62:	80 e3       	ldi	r24, 0x30	; 48
    1d64:	8c 83       	std	Y+4, r24	; 0x04
    1d66:	80 e4       	ldi	r24, 0x40	; 64
    1d68:	8d 83       	std	Y+5, r24	; 0x05
    1d6a:	80 e5       	ldi	r24, 0x50	; 80
    1d6c:	8e 83       	std	Y+6, r24	; 0x06

	res = MCP_ALLTXBUSY;
    1d6e:	82 e0       	ldi	r24, 0x02	; 2
    1d70:	8a 83       	std	Y+2, r24	; 0x02
	*txbuf_n = 0x00;
    1d72:	89 85       	ldd	r24, Y+9	; 0x09
    1d74:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d76:	fc 01       	movw	r30, r24
    1d78:	10 82       	st	Z, r1

	/* check all 3 TX-Buffers       */
	for (i = 0; i < MCP_N_TXBUFFERS; i++) {
    1d7a:	19 82       	std	Y+1, r1	; 0x01
    1d7c:	2d c0       	rjmp	.+90     	; 0x1dd8 <_ZN7MCP_CAN24mcp2515_getNextFreeTXBufEPh+0x96>
		ctrlval = mcp2515_readRegister(ctrlregs[i]);
    1d7e:	89 81       	ldd	r24, Y+1	; 0x01
    1d80:	88 2f       	mov	r24, r24
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	9e 01       	movw	r18, r28
    1d86:	2c 5f       	subi	r18, 0xFC	; 252
    1d88:	3f 4f       	sbci	r19, 0xFF	; 255
    1d8a:	82 0f       	add	r24, r18
    1d8c:	93 1f       	adc	r25, r19
    1d8e:	fc 01       	movw	r30, r24
    1d90:	20 81       	ld	r18, Z
    1d92:	8f 81       	ldd	r24, Y+7	; 0x07
    1d94:	98 85       	ldd	r25, Y+8	; 0x08
    1d96:	62 2f       	mov	r22, r18
    1d98:	0e 94 a5 06 	call	0xd4a	; 0xd4a <_ZN7MCP_CAN20mcp2515_readRegisterEh>
    1d9c:	8b 83       	std	Y+3, r24	; 0x03
		if ((ctrlval & MCP_TXB_TXREQ_M) == 0) {
    1d9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1da0:	88 2f       	mov	r24, r24
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	88 70       	andi	r24, 0x08	; 8
    1da6:	99 27       	eor	r25, r25
    1da8:	00 97       	sbiw	r24, 0x00	; 0
    1daa:	99 f4       	brne	.+38     	; 0x1dd2 <_ZN7MCP_CAN24mcp2515_getNextFreeTXBufEPh+0x90>
			*txbuf_n = ctrlregs[i] + 1;                                   /* return SIDH-address of Buffe */
    1dac:	89 81       	ldd	r24, Y+1	; 0x01
    1dae:	88 2f       	mov	r24, r24
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	9e 01       	movw	r18, r28
    1db4:	2c 5f       	subi	r18, 0xFC	; 252
    1db6:	3f 4f       	sbci	r19, 0xFF	; 255
    1db8:	82 0f       	add	r24, r18
    1dba:	93 1f       	adc	r25, r19
    1dbc:	fc 01       	movw	r30, r24
    1dbe:	80 81       	ld	r24, Z
    1dc0:	21 e0       	ldi	r18, 0x01	; 1
    1dc2:	28 0f       	add	r18, r24
    1dc4:	89 85       	ldd	r24, Y+9	; 0x09
    1dc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dc8:	fc 01       	movw	r30, r24
    1dca:	20 83       	st	Z, r18
			/* r                            */
			res = MCP2515_OK;
    1dcc:	1a 82       	std	Y+2, r1	; 0x02
			return res;                                                 /* ! function exit              */
    1dce:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd0:	07 c0       	rjmp	.+14     	; 0x1de0 <_ZN7MCP_CAN24mcp2515_getNextFreeTXBufEPh+0x9e>

	res = MCP_ALLTXBUSY;
	*txbuf_n = 0x00;

	/* check all 3 TX-Buffers       */
	for (i = 0; i < MCP_N_TXBUFFERS; i++) {
    1dd2:	89 81       	ldd	r24, Y+1	; 0x01
    1dd4:	8f 5f       	subi	r24, 0xFF	; 255
    1dd6:	89 83       	std	Y+1, r24	; 0x01
    1dd8:	89 81       	ldd	r24, Y+1	; 0x01
    1dda:	83 30       	cpi	r24, 0x03	; 3
    1ddc:	80 f2       	brcs	.-96     	; 0x1d7e <_ZN7MCP_CAN24mcp2515_getNextFreeTXBufEPh+0x3c>
			/* r                            */
			res = MCP2515_OK;
			return res;                                                 /* ! function exit              */
		}
	}
	return res;
    1dde:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1de0:	2a 96       	adiw	r28, 0x0a	; 10
    1de2:	0f b6       	in	r0, 0x3f	; 63
    1de4:	f8 94       	cli
    1de6:	de bf       	out	0x3e, r29	; 62
    1de8:	0f be       	out	0x3f, r0	; 63
    1dea:	cd bf       	out	0x3d, r28	; 61
    1dec:	df 91       	pop	r29
    1dee:	cf 91       	pop	r28
    1df0:	08 95       	ret

00001df2 <_ZN7MCP_CANC1Ev>:

/*********************************************************************************************************
 ** Function name:           set CS
 ** Descriptions:            init CS pin and set UNSELECTED
 *********************************************************************************************************/
MCP_CAN::MCP_CAN()
    1df2:	cf 93       	push	r28
    1df4:	df 93       	push	r29
    1df6:	00 d0       	rcall	.+0      	; 0x1df8 <_ZN7MCP_CANC1Ev+0x6>
    1df8:	cd b7       	in	r28, 0x3d	; 61
    1dfa:	de b7       	in	r29, 0x3e	; 62
    1dfc:	9a 83       	std	Y+2, r25	; 0x02
    1dfe:	89 83       	std	Y+1, r24	; 0x01
{
	m_nExtFlg = 0;          /* identifier xxxID             */
    1e00:	89 81       	ldd	r24, Y+1	; 0x01
    1e02:	9a 81       	ldd	r25, Y+2	; 0x02
    1e04:	fc 01       	movw	r30, r24
    1e06:	10 82       	st	Z, r1
    m_nID = 0;                                                      /* can id                       */
    1e08:	89 81       	ldd	r24, Y+1	; 0x01
    1e0a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e0c:	fc 01       	movw	r30, r24
    1e0e:	11 82       	std	Z+1, r1	; 0x01
    1e10:	12 82       	std	Z+2, r1	; 0x02
    1e12:	13 82       	std	Z+3, r1	; 0x03
    1e14:	14 82       	std	Z+4, r1	; 0x04
	m_nDlc = 64;                                                     /* data length:                 */
    1e16:	89 81       	ldd	r24, Y+1	; 0x01
    1e18:	9a 81       	ldd	r25, Y+2	; 0x02
    1e1a:	20 e4       	ldi	r18, 0x40	; 64
    1e1c:	fc 01       	movw	r30, r24
    1e1e:	25 83       	std	Z+5, r18	; 0x05
	//m_nDta[MAX_CHAR_IN_MESSAGE];                            	/* data                         */
	m_nRtr = 0xff;                                                     /* rtr                          */
    1e20:	89 81       	ldd	r24, Y+1	; 0x01
    1e22:	9a 81       	ldd	r25, Y+2	; 0x02
    1e24:	8a 5b       	subi	r24, 0xBA	; 186
    1e26:	9f 4f       	sbci	r25, 0xFF	; 255
    1e28:	2f ef       	ldi	r18, 0xFF	; 255
    1e2a:	fc 01       	movw	r30, r24
    1e2c:	20 83       	st	Z, r18
	m_nfilhit= 0xff;
    1e2e:	89 81       	ldd	r24, Y+1	; 0x01
    1e30:	9a 81       	ldd	r25, Y+2	; 0x02
    1e32:	89 5b       	subi	r24, 0xB9	; 185
    1e34:	9f 4f       	sbci	r25, 0xFF	; 255
    1e36:	2f ef       	ldi	r18, 0xFF	; 255
    1e38:	fc 01       	movw	r30, r24
    1e3a:	20 83       	st	Z, r18
	SPICS = SS;
    1e3c:	89 81       	ldd	r24, Y+1	; 0x01
    1e3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e40:	88 5b       	subi	r24, 0xB8	; 184
    1e42:	9f 4f       	sbci	r25, 0xFF	; 255
    1e44:	24 e0       	ldi	r18, 0x04	; 4
    1e46:	fc 01       	movw	r30, r24
    1e48:	20 83       	st	Z, r18
}
    1e4a:	0f 90       	pop	r0
    1e4c:	0f 90       	pop	r0
    1e4e:	df 91       	pop	r29
    1e50:	cf 91       	pop	r28
    1e52:	08 95       	ret

00001e54 <_ZN7MCP_CAN5beginEhh>:
 *********************************************************************************************************
 ** Function name:           init
 ** Descriptions:            init can and set speed
 *********************************************************************************************************/
INT8U MCP_CAN::begin(INT8U speedset, const INT8U clockset)
{
    1e54:	cf 93       	push	r28
    1e56:	df 93       	push	r29
    1e58:	00 d0       	rcall	.+0      	; 0x1e5a <_ZN7MCP_CAN5beginEhh+0x6>
    1e5a:	00 d0       	rcall	.+0      	; 0x1e5c <_ZN7MCP_CAN5beginEhh+0x8>
    1e5c:	1f 92       	push	r1
    1e5e:	cd b7       	in	r28, 0x3d	; 61
    1e60:	de b7       	in	r29, 0x3e	; 62
    1e62:	9b 83       	std	Y+3, r25	; 0x03
    1e64:	8a 83       	std	Y+2, r24	; 0x02
    1e66:	6c 83       	std	Y+4, r22	; 0x04
    1e68:	4d 83       	std	Y+5, r20	; 0x05
	INT8U res;

	//SPI.begin();
	res = mcp2515_init(speedset, clockset);
    1e6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e6e:	4d 81       	ldd	r20, Y+5	; 0x05
    1e70:	6c 81       	ldd	r22, Y+4	; 0x04
    1e72:	4c dd       	rcall	.-1384   	; 0x190c <_ZN7MCP_CAN12mcp2515_initEhh>
    1e74:	89 83       	std	Y+1, r24	; 0x01
    1e76:	89 81       	ldd	r24, Y+1	; 0x01

	if (res == MCP2515_OK)
    1e78:	88 23       	and	r24, r24
    1e7a:	11 f4       	brne	.+4      	; 0x1e80 <_ZN7MCP_CAN5beginEhh+0x2c>
    1e7c:	80 e0       	ldi	r24, 0x00	; 0
	{

		//led_blink(PIN4,1);
		return CAN_OK;
    1e7e:	01 c0       	rjmp	.+2      	; 0x1e82 <_ZN7MCP_CAN5beginEhh+0x2e>
    1e80:	81 e0       	ldi	r24, 0x01	; 1

	}
	else
	{
		//led_blink(PIN5,1);
		return CAN_FAILINIT;
    1e82:	0f 90       	pop	r0
	}
}
    1e84:	0f 90       	pop	r0
    1e86:	0f 90       	pop	r0
    1e88:	0f 90       	pop	r0
    1e8a:	0f 90       	pop	r0
    1e8c:	df 91       	pop	r29
    1e8e:	cf 91       	pop	r28
    1e90:	08 95       	ret

00001e92 <_ZN7MCP_CAN6setMsgEmhhPh>:
/*********************************************************************************************************
 ** Function name:           setMsg
 ** Descriptions:            set can message, such as dlc, id, dta[] and so on
 *********************************************************************************************************/
INT8U MCP_CAN::setMsg(INT32U id, INT8U ext, INT8U len, INT8U *pData)
{
    1e92:	ef 92       	push	r14
    1e94:	ff 92       	push	r15
    1e96:	0f 93       	push	r16
    1e98:	cf 93       	push	r28
    1e9a:	df 93       	push	r29
    1e9c:	cd b7       	in	r28, 0x3d	; 61
    1e9e:	de b7       	in	r29, 0x3e	; 62
    1ea0:	2c 97       	sbiw	r28, 0x0c	; 12
    1ea2:	0f b6       	in	r0, 0x3f	; 63
    1ea4:	f8 94       	cli
    1ea6:	de bf       	out	0x3e, r29	; 62
    1ea8:	0f be       	out	0x3f, r0	; 63
    1eaa:	cd bf       	out	0x3d, r28	; 61
    1eac:	9c 83       	std	Y+4, r25	; 0x04
    1eae:	8b 83       	std	Y+3, r24	; 0x03
    1eb0:	4d 83       	std	Y+5, r20	; 0x05
    1eb2:	5e 83       	std	Y+6, r21	; 0x06
    1eb4:	6f 83       	std	Y+7, r22	; 0x07
    1eb6:	78 87       	std	Y+8, r23	; 0x08
    1eb8:	29 87       	std	Y+9, r18	; 0x09
    1eba:	0a 87       	std	Y+10, r16	; 0x0a
    1ebc:	fc 86       	std	Y+12, r15	; 0x0c
    1ebe:	eb 86       	std	Y+11, r14	; 0x0b
	int i;
	m_nExtFlg = ext;
    1ec0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec4:	29 85       	ldd	r18, Y+9	; 0x09
    1ec6:	fc 01       	movw	r30, r24
    1ec8:	20 83       	st	Z, r18
	m_nID = id;
    1eca:	2b 81       	ldd	r18, Y+3	; 0x03
    1ecc:	3c 81       	ldd	r19, Y+4	; 0x04
    1ece:	8d 81       	ldd	r24, Y+5	; 0x05
    1ed0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ed2:	af 81       	ldd	r26, Y+7	; 0x07
    1ed4:	b8 85       	ldd	r27, Y+8	; 0x08
    1ed6:	f9 01       	movw	r30, r18
    1ed8:	81 83       	std	Z+1, r24	; 0x01
    1eda:	92 83       	std	Z+2, r25	; 0x02
    1edc:	a3 83       	std	Z+3, r26	; 0x03
    1ede:	b4 83       	std	Z+4, r27	; 0x04
	m_nDlc = len;
    1ee0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ee4:	2a 85       	ldd	r18, Y+10	; 0x0a
    1ee6:	fc 01       	movw	r30, r24
    1ee8:	25 83       	std	Z+5, r18	; 0x05
	for(i=0;i< MAX_CHAR_IN_MESSAGE; i++)
    1eea:	1a 82       	std	Y+2, r1	; 0x02
    1eec:	19 82       	std	Y+1, r1	; 0x01
    1eee:	16 c0       	rjmp	.+44     	; 0x1f1c <_ZN7MCP_CAN6setMsgEmhhPh+0x8a>
	{
		m_nDta[i] = *(pData + i);
    1ef0:	89 81       	ldd	r24, Y+1	; 0x01
    1ef2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ef4:	2b 85       	ldd	r18, Y+11	; 0x0b
    1ef6:	3c 85       	ldd	r19, Y+12	; 0x0c
    1ef8:	82 0f       	add	r24, r18
    1efa:	93 1f       	adc	r25, r19
    1efc:	fc 01       	movw	r30, r24
    1efe:	40 81       	ld	r20, Z
    1f00:	2b 81       	ldd	r18, Y+3	; 0x03
    1f02:	3c 81       	ldd	r19, Y+4	; 0x04
    1f04:	89 81       	ldd	r24, Y+1	; 0x01
    1f06:	9a 81       	ldd	r25, Y+2	; 0x02
    1f08:	82 0f       	add	r24, r18
    1f0a:	93 1f       	adc	r25, r19
    1f0c:	06 96       	adiw	r24, 0x06	; 6
    1f0e:	fc 01       	movw	r30, r24
    1f10:	40 83       	st	Z, r20
{
	int i;
	m_nExtFlg = ext;
	m_nID = id;
	m_nDlc = len;
	for(i=0;i< MAX_CHAR_IN_MESSAGE; i++)
    1f12:	89 81       	ldd	r24, Y+1	; 0x01
    1f14:	9a 81       	ldd	r25, Y+2	; 0x02
    1f16:	01 96       	adiw	r24, 0x01	; 1
    1f18:	9a 83       	std	Y+2, r25	; 0x02
    1f1a:	89 83       	std	Y+1, r24	; 0x01
    1f1c:	89 81       	ldd	r24, Y+1	; 0x01
    1f1e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f20:	80 34       	cpi	r24, 0x40	; 64
    1f22:	91 05       	cpc	r25, r1
    1f24:	2c f3       	brlt	.-54     	; 0x1ef0 <_ZN7MCP_CAN6setMsgEmhhPh+0x5e>
	{
		m_nDta[i] = *(pData + i);
	}
	return MCP2515_OK;
    1f26:	80 e0       	ldi	r24, 0x00	; 0
}
    1f28:	2c 96       	adiw	r28, 0x0c	; 12
    1f2a:	0f b6       	in	r0, 0x3f	; 63
    1f2c:	f8 94       	cli
    1f2e:	de bf       	out	0x3e, r29	; 62
    1f30:	0f be       	out	0x3f, r0	; 63
    1f32:	cd bf       	out	0x3d, r28	; 61
    1f34:	df 91       	pop	r29
    1f36:	cf 91       	pop	r28
    1f38:	0f 91       	pop	r16
    1f3a:	ff 90       	pop	r15
    1f3c:	ef 90       	pop	r14
    1f3e:	08 95       	ret

00001f40 <_ZN7MCP_CAN8clearMsgEv>:
 ** Function name:           clearMsg
{
 ** Descriptions:            set all message to zero
 *********************************************************************************************************/
INT8U MCP_CAN::clearMsg()
{
    1f40:	cf 93       	push	r28
    1f42:	df 93       	push	r29
    1f44:	00 d0       	rcall	.+0      	; 0x1f46 <_ZN7MCP_CAN8clearMsgEv+0x6>
    1f46:	00 d0       	rcall	.+0      	; 0x1f48 <_ZN7MCP_CAN8clearMsgEv+0x8>
    1f48:	cd b7       	in	r28, 0x3d	; 61
    1f4a:	de b7       	in	r29, 0x3e	; 62
    1f4c:	9c 83       	std	Y+4, r25	; 0x04
    1f4e:	8b 83       	std	Y+3, r24	; 0x03
	m_nID = 0;
    1f50:	8b 81       	ldd	r24, Y+3	; 0x03
    1f52:	9c 81       	ldd	r25, Y+4	; 0x04
    1f54:	fc 01       	movw	r30, r24
    1f56:	11 82       	std	Z+1, r1	; 0x01
    1f58:	12 82       	std	Z+2, r1	; 0x02
    1f5a:	13 82       	std	Z+3, r1	; 0x03
    1f5c:	14 82       	std	Z+4, r1	; 0x04
	m_nDlc = 0b1000;
    1f5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f60:	9c 81       	ldd	r25, Y+4	; 0x04
    1f62:	28 e0       	ldi	r18, 0x08	; 8
    1f64:	fc 01       	movw	r30, r24
    1f66:	25 83       	std	Z+5, r18	; 0x05
	m_nExtFlg = 0;
    1f68:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f6c:	fc 01       	movw	r30, r24
    1f6e:	10 82       	st	Z, r1
	m_nRtr = 0;
    1f70:	8b 81       	ldd	r24, Y+3	; 0x03
    1f72:	9c 81       	ldd	r25, Y+4	; 0x04
    1f74:	8a 5b       	subi	r24, 0xBA	; 186
    1f76:	9f 4f       	sbci	r25, 0xFF	; 255
    1f78:	fc 01       	movw	r30, r24
    1f7a:	10 82       	st	Z, r1
	m_nfilhit = 0;
    1f7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f80:	89 5b       	subi	r24, 0xB9	; 185
    1f82:	9f 4f       	sbci	r25, 0xFF	; 255
    1f84:	fc 01       	movw	r30, r24
    1f86:	10 82       	st	Z, r1
	for (int i = 0; i < m_nDlc; i++)
    1f88:	1a 82       	std	Y+2, r1	; 0x02
    1f8a:	19 82       	std	Y+1, r1	; 0x01
    1f8c:	0e c0       	rjmp	.+28     	; 0x1faa <_ZN7MCP_CAN8clearMsgEv+0x6a>
		m_nDta[i] = 0x00;
    1f8e:	2b 81       	ldd	r18, Y+3	; 0x03
    1f90:	3c 81       	ldd	r19, Y+4	; 0x04
    1f92:	89 81       	ldd	r24, Y+1	; 0x01
    1f94:	9a 81       	ldd	r25, Y+2	; 0x02
    1f96:	82 0f       	add	r24, r18
    1f98:	93 1f       	adc	r25, r19
    1f9a:	06 96       	adiw	r24, 0x06	; 6
    1f9c:	fc 01       	movw	r30, r24
    1f9e:	10 82       	st	Z, r1
	m_nID = 0;
	m_nDlc = 0b1000;
	m_nExtFlg = 0;
	m_nRtr = 0;
	m_nfilhit = 0;
	for (int i = 0; i < m_nDlc; i++)
    1fa0:	89 81       	ldd	r24, Y+1	; 0x01
    1fa2:	9a 81       	ldd	r25, Y+2	; 0x02
    1fa4:	01 96       	adiw	r24, 0x01	; 1
    1fa6:	9a 83       	std	Y+2, r25	; 0x02
    1fa8:	89 83       	std	Y+1, r24	; 0x01
    1faa:	8b 81       	ldd	r24, Y+3	; 0x03
    1fac:	9c 81       	ldd	r25, Y+4	; 0x04
    1fae:	fc 01       	movw	r30, r24
    1fb0:	85 81       	ldd	r24, Z+5	; 0x05
    1fb2:	28 2f       	mov	r18, r24
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	89 81       	ldd	r24, Y+1	; 0x01
    1fb8:	9a 81       	ldd	r25, Y+2	; 0x02
    1fba:	82 17       	cp	r24, r18
    1fbc:	93 07       	cpc	r25, r19
    1fbe:	3c f3       	brlt	.-50     	; 0x1f8e <_ZN7MCP_CAN8clearMsgEv+0x4e>
		m_nDta[i] = 0x00;

	return MCP2515_OK;
    1fc0:	80 e0       	ldi	r24, 0x00	; 0
}
    1fc2:	0f 90       	pop	r0
    1fc4:	0f 90       	pop	r0
    1fc6:	0f 90       	pop	r0
    1fc8:	0f 90       	pop	r0
    1fca:	df 91       	pop	r29
    1fcc:	cf 91       	pop	r28
    1fce:	08 95       	ret

00001fd0 <_ZN7MCP_CAN7sendMsgEv>:
/*********************************************************************************************************
 ** Function name:           sendMsg
 ** Descriptions:            send message
 *********************************************************************************************************/
INT8U MCP_CAN::sendMsg()
{
    1fd0:	cf 93       	push	r28
    1fd2:	df 93       	push	r29
    1fd4:	cd b7       	in	r28, 0x3d	; 61
    1fd6:	de b7       	in	r29, 0x3e	; 62
    1fd8:	27 97       	sbiw	r28, 0x07	; 7
    1fda:	0f b6       	in	r0, 0x3f	; 63
    1fdc:	f8 94       	cli
    1fde:	de bf       	out	0x3e, r29	; 62
    1fe0:	0f be       	out	0x3f, r0	; 63
    1fe2:	cd bf       	out	0x3d, r28	; 61
    1fe4:	9f 83       	std	Y+7, r25	; 0x07
    1fe6:	8e 83       	std	Y+6, r24	; 0x06
	INT8U res, res1, txbuf_n;
	uint16_t uiTimeOut = 0;
    1fe8:	1a 82       	std	Y+2, r1	; 0x02
    1fea:	19 82       	std	Y+1, r1	; 0x01

	do {
		res = mcp2515_getNextFreeTXBuf(&txbuf_n);                       /* info = addr.                 */
    1fec:	9e 01       	movw	r18, r28
    1fee:	2b 5f       	subi	r18, 0xFB	; 251
    1ff0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ff2:	8e 81       	ldd	r24, Y+6	; 0x06
    1ff4:	9f 81       	ldd	r25, Y+7	; 0x07
    1ff6:	b9 01       	movw	r22, r18
    1ff8:	a4 de       	rcall	.-696    	; 0x1d42 <_ZN7MCP_CAN24mcp2515_getNextFreeTXBufEPh>
    1ffa:	8b 83       	std	Y+3, r24	; 0x03
    1ffc:	89 81       	ldd	r24, Y+1	; 0x01
		uiTimeOut++;
    1ffe:	9a 81       	ldd	r25, Y+2	; 0x02
    2000:	01 96       	adiw	r24, 0x01	; 1
    2002:	9a 83       	std	Y+2, r25	; 0x02
    2004:	89 83       	std	Y+1, r24	; 0x01
    2006:	8b 81       	ldd	r24, Y+3	; 0x03
INT8U MCP_CAN::sendMsg()
{
	INT8U res, res1, txbuf_n;
	uint16_t uiTimeOut = 0;

	do {
    2008:	82 30       	cpi	r24, 0x02	; 2
    200a:	29 f4       	brne	.+10     	; 0x2016 <_ZN7MCP_CAN7sendMsgEv+0x46>
    200c:	89 81       	ldd	r24, Y+1	; 0x01
		res = mcp2515_getNextFreeTXBuf(&txbuf_n);                       /* info = addr.                 */
		uiTimeOut++;
	} while (res == MCP_ALLTXBUSY && (uiTimeOut < TIMEOUTVALUE));
    200e:	9a 81       	ldd	r25, Y+2	; 0x02
    2010:	82 33       	cpi	r24, 0x32	; 50
    2012:	91 05       	cpc	r25, r1
    2014:	58 f3       	brcs	.-42     	; 0x1fec <_ZN7MCP_CAN7sendMsgEv+0x1c>
    2016:	89 81       	ldd	r24, Y+1	; 0x01

	if (uiTimeOut == TIMEOUTVALUE)
    2018:	9a 81       	ldd	r25, Y+2	; 0x02
    201a:	82 33       	cpi	r24, 0x32	; 50
    201c:	91 05       	cpc	r25, r1
    201e:	11 f4       	brne	.+4      	; 0x2024 <_ZN7MCP_CAN7sendMsgEv+0x54>
    2020:	86 e0       	ldi	r24, 0x06	; 6
	{
		return CAN_GETTXBFTIMEOUT;                                      /* get tx buff time out         */
    2022:	2d c0       	rjmp	.+90     	; 0x207e <_ZN7MCP_CAN7sendMsgEv+0xae>
    2024:	1a 82       	std	Y+2, r1	; 0x02
	}
	uiTimeOut = 0;
    2026:	19 82       	std	Y+1, r1	; 0x01
    2028:	2d 81       	ldd	r18, Y+5	; 0x05
	mcp2515_write_canMsg(txbuf_n);
    202a:	8e 81       	ldd	r24, Y+6	; 0x06
    202c:	9f 81       	ldd	r25, Y+7	; 0x07
    202e:	62 2f       	mov	r22, r18
    2030:	0c de       	rcall	.-1000   	; 0x1c4a <_ZN7MCP_CAN20mcp2515_write_canMsgEh>
    2032:	2d 81       	ldd	r18, Y+5	; 0x05
    2034:	8e 81       	ldd	r24, Y+6	; 0x06
	mcp2515_start_transmit(txbuf_n);
    2036:	9f 81       	ldd	r25, Y+7	; 0x07
    2038:	62 2f       	mov	r22, r18
    203a:	5d de       	rcall	.-838    	; 0x1cf6 <_ZN7MCP_CAN22mcp2515_start_transmitEh>
    203c:	89 81       	ldd	r24, Y+1	; 0x01
    203e:	9a 81       	ldd	r25, Y+2	; 0x02
    2040:	01 96       	adiw	r24, 0x01	; 1
	do
	{
		uiTimeOut++;
    2042:	9a 83       	std	Y+2, r25	; 0x02
    2044:	89 83       	std	Y+1, r24	; 0x01
    2046:	8d 81       	ldd	r24, Y+5	; 0x05
    2048:	2f ef       	ldi	r18, 0xFF	; 255
    204a:	28 0f       	add	r18, r24
		res1 = mcp2515_readRegister(txbuf_n-1);		/* read send buff ctrl reg 	*/
    204c:	8e 81       	ldd	r24, Y+6	; 0x06
    204e:	9f 81       	ldd	r25, Y+7	; 0x07
    2050:	62 2f       	mov	r22, r18
    2052:	0e 94 a5 06 	call	0xd4a	; 0xd4a <_ZN7MCP_CAN20mcp2515_readRegisterEh>
    2056:	8c 83       	std	Y+4, r24	; 0x04
    2058:	8c 81       	ldd	r24, Y+4	; 0x04
    205a:	88 70       	andi	r24, 0x08	; 8
    205c:	8c 83       	std	Y+4, r24	; 0x04
		res1 = res1 & 0x08;
    205e:	8c 81       	ldd	r24, Y+4	; 0x04
    2060:	88 23       	and	r24, r24
    2062:	29 f0       	breq	.+10     	; 0x206e <_ZN7MCP_CAN7sendMsgEv+0x9e>
		return CAN_GETTXBFTIMEOUT;                                      /* get tx buff time out         */
	}
	uiTimeOut = 0;
	mcp2515_write_canMsg(txbuf_n);
	mcp2515_start_transmit(txbuf_n);
	do
    2064:	89 81       	ldd	r24, Y+1	; 0x01
    2066:	9a 81       	ldd	r25, Y+2	; 0x02
    2068:	82 33       	cpi	r24, 0x32	; 50
	{
		uiTimeOut++;
		res1 = mcp2515_readRegister(txbuf_n-1);		/* read send buff ctrl reg 	*/
		res1 = res1 & 0x08;
	} while (res1 && (uiTimeOut < TIMEOUTVALUE));
    206a:	91 05       	cpc	r25, r1
    206c:	38 f3       	brcs	.-50     	; 0x203c <_ZN7MCP_CAN7sendMsgEv+0x6c>
    206e:	89 81       	ldd	r24, Y+1	; 0x01
    2070:	9a 81       	ldd	r25, Y+2	; 0x02
    2072:	82 33       	cpi	r24, 0x32	; 50

	if (uiTimeOut == TIMEOUTVALUE)                                       /* send msg timeout             */
    2074:	91 05       	cpc	r25, r1
    2076:	11 f4       	brne	.+4      	; 0x207c <_ZN7MCP_CAN7sendMsgEv+0xac>
    2078:	87 e0       	ldi	r24, 0x07	; 7
    207a:	01 c0       	rjmp	.+2      	; 0x207e <_ZN7MCP_CAN7sendMsgEv+0xae>
    207c:	80 e0       	ldi	r24, 0x00	; 0
	{
		return CAN_SENDMSGTIMEOUT;
    207e:	27 96       	adiw	r28, 0x07	; 7
    2080:	0f b6       	in	r0, 0x3f	; 63
	}
	return CAN_OK;
    2082:	f8 94       	cli
}
    2084:	de bf       	out	0x3e, r29	; 62
    2086:	0f be       	out	0x3f, r0	; 63
    2088:	cd bf       	out	0x3d, r28	; 61
    208a:	df 91       	pop	r29
    208c:	cf 91       	pop	r28
    208e:	08 95       	ret

00002090 <_ZN7MCP_CAN10sendMsgBufEmhhPh>:
/*********************************************************************************************************
 ** Function name:           sendMsgBuf
 ** Descriptions:            send buf
 *********************************************************************************************************/
INT8U MCP_CAN::sendMsgBuf(INT32U id, INT8U ext, INT8U len, INT8U *buf)
{
    2090:	ef 92       	push	r14
    2092:	ff 92       	push	r15
    2094:	0f 93       	push	r16
    2096:	cf 93       	push	r28
    2098:	df 93       	push	r29
    209a:	cd b7       	in	r28, 0x3d	; 61
    209c:	de b7       	in	r29, 0x3e	; 62
    209e:	2b 97       	sbiw	r28, 0x0b	; 11
    20a0:	0f b6       	in	r0, 0x3f	; 63
    20a2:	f8 94       	cli
    20a4:	de bf       	out	0x3e, r29	; 62
    20a6:	0f be       	out	0x3f, r0	; 63
    20a8:	cd bf       	out	0x3d, r28	; 61
    20aa:	9b 83       	std	Y+3, r25	; 0x03
    20ac:	8a 83       	std	Y+2, r24	; 0x02
    20ae:	4c 83       	std	Y+4, r20	; 0x04
    20b0:	5d 83       	std	Y+5, r21	; 0x05
    20b2:	6e 83       	std	Y+6, r22	; 0x06
    20b4:	7f 83       	std	Y+7, r23	; 0x07
    20b6:	28 87       	std	Y+8, r18	; 0x08
    20b8:	09 87       	std	Y+9, r16	; 0x09
    20ba:	fb 86       	std	Y+11, r15	; 0x0b
    20bc:	ea 86       	std	Y+10, r14	; 0x0a
	INT8U res;
	setMsg(id, ext, len, buf);
    20be:	2a 85       	ldd	r18, Y+10	; 0x0a
    20c0:	3b 85       	ldd	r19, Y+11	; 0x0b
    20c2:	8c 81       	ldd	r24, Y+4	; 0x04
    20c4:	9d 81       	ldd	r25, Y+5	; 0x05
    20c6:	ae 81       	ldd	r26, Y+6	; 0x06
    20c8:	bf 81       	ldd	r27, Y+7	; 0x07
    20ca:	ea 81       	ldd	r30, Y+2	; 0x02
    20cc:	fb 81       	ldd	r31, Y+3	; 0x03
    20ce:	79 01       	movw	r14, r18
    20d0:	09 85       	ldd	r16, Y+9	; 0x09
    20d2:	28 85       	ldd	r18, Y+8	; 0x08
    20d4:	ac 01       	movw	r20, r24
    20d6:	bd 01       	movw	r22, r26
    20d8:	cf 01       	movw	r24, r30
    20da:	db de       	rcall	.-586    	; 0x1e92 <_ZN7MCP_CAN6setMsgEmhhPh>
    20dc:	8a 81       	ldd	r24, Y+2	; 0x02
	res=sendMsg();
    20de:	9b 81       	ldd	r25, Y+3	; 0x03
    20e0:	77 df       	rcall	.-274    	; 0x1fd0 <_ZN7MCP_CAN7sendMsgEv>
    20e2:	89 83       	std	Y+1, r24	; 0x01
    20e4:	89 81       	ldd	r24, Y+1	; 0x01
    20e6:	2b 96       	adiw	r28, 0x0b	; 11
	return res;
    20e8:	0f b6       	in	r0, 0x3f	; 63
}
    20ea:	f8 94       	cli
    20ec:	de bf       	out	0x3e, r29	; 62
    20ee:	0f be       	out	0x3f, r0	; 63
    20f0:	cd bf       	out	0x3d, r28	; 61
    20f2:	df 91       	pop	r29
    20f4:	cf 91       	pop	r28
    20f6:	0f 91       	pop	r16
    20f8:	ff 90       	pop	r15
    20fa:	ef 90       	pop	r14
    20fc:	08 95       	ret

000020fe <_Z15spi_init_masterv>:
	//PORTA=0xff; //PORTA as o/p for blinking leds
}


void spi_init_master (void)
{
    20fe:	cf 93       	push	r28
    2100:	df 93       	push	r29
    2102:	cd b7       	in	r28, 0x3d	; 61
    2104:	de b7       	in	r29, 0x3e	; 62
    2106:	2e 97       	sbiw	r28, 0x0e	; 14
    2108:	0f b6       	in	r0, 0x3f	; 63
    210a:	f8 94       	cli
    210c:	de bf       	out	0x3e, r29	; 62
    210e:	0f be       	out	0x3f, r0	; 63
    2110:	cd bf       	out	0x3d, r28	; 61
	DDRB=(1<<MOSI)|(1<<SCK)|(1<<SS);  //Set MOSI, SCK as Output and others as i/p
    2112:	87 e3       	ldi	r24, 0x37	; 55
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	20 eb       	ldi	r18, 0xB0	; 176
    2118:	fc 01       	movw	r30, r24
    211a:	20 83       	st	Z, r18

	PORTB|=(1<<SS);
    211c:	88 e3       	ldi	r24, 0x38	; 56
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	28 e3       	ldi	r18, 0x38	; 56
    2122:	30 e0       	ldi	r19, 0x00	; 0
    2124:	f9 01       	movw	r30, r18
    2126:	20 81       	ld	r18, Z
    2128:	20 61       	ori	r18, 0x10	; 16
    212a:	fc 01       	movw	r30, r24
    212c:	20 83       	st	Z, r18
    212e:	80 e0       	ldi	r24, 0x00	; 0
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	a0 ea       	ldi	r26, 0xA0	; 160
    2134:	b0 e4       	ldi	r27, 0x40	; 64
    2136:	89 83       	std	Y+1, r24	; 0x01
    2138:	9a 83       	std	Y+2, r25	; 0x02
    213a:	ab 83       	std	Y+3, r26	; 0x03
    213c:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    213e:	20 e0       	ldi	r18, 0x00	; 0
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	4a ef       	ldi	r20, 0xFA	; 250
    2144:	54 e4       	ldi	r21, 0x44	; 68
    2146:	69 81       	ldd	r22, Y+1	; 0x01
    2148:	7a 81       	ldd	r23, Y+2	; 0x02
    214a:	8b 81       	ldd	r24, Y+3	; 0x03
    214c:	9c 81       	ldd	r25, Y+4	; 0x04
    214e:	2d d3       	rcall	.+1626   	; 0x27aa <__mulsf3>
    2150:	dc 01       	movw	r26, r24
    2152:	cb 01       	movw	r24, r22
    2154:	8d 83       	std	Y+5, r24	; 0x05
    2156:	9e 83       	std	Y+6, r25	; 0x06
    2158:	af 83       	std	Y+7, r26	; 0x07
    215a:	b8 87       	std	Y+8, r27	; 0x08
    215c:	20 e0       	ldi	r18, 0x00	; 0
	if (__tmp < 1.0)
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	40 e8       	ldi	r20, 0x80	; 128
    2162:	5f e3       	ldi	r21, 0x3F	; 63
    2164:	6d 81       	ldd	r22, Y+5	; 0x05
    2166:	7e 81       	ldd	r23, Y+6	; 0x06
    2168:	8f 81       	ldd	r24, Y+7	; 0x07
    216a:	98 85       	ldd	r25, Y+8	; 0x08
    216c:	0d d2       	rcall	.+1050   	; 0x2588 <__cmpsf2>
    216e:	88 23       	and	r24, r24
    2170:	2c f4       	brge	.+10     	; 0x217c <_Z15spi_init_masterv+0x7e>
    2172:	81 e0       	ldi	r24, 0x01	; 1
    2174:	90 e0       	ldi	r25, 0x00	; 0
		__ticks = 1;
    2176:	9a 87       	std	Y+10, r25	; 0x0a
    2178:	89 87       	std	Y+9, r24	; 0x09
    217a:	3b c0       	rjmp	.+118    	; 0x21f2 <_Z15spi_init_masterv+0xf4>
    217c:	20 e0       	ldi	r18, 0x00	; 0
    217e:	3f ef       	ldi	r19, 0xFF	; 255
	else if (__tmp > 65535)
    2180:	4f e7       	ldi	r20, 0x7F	; 127
    2182:	57 e4       	ldi	r21, 0x47	; 71
    2184:	6d 81       	ldd	r22, Y+5	; 0x05
    2186:	7e 81       	ldd	r23, Y+6	; 0x06
    2188:	8f 81       	ldd	r24, Y+7	; 0x07
    218a:	98 85       	ldd	r25, Y+8	; 0x08
    218c:	0a d3       	rcall	.+1556   	; 0x27a2 <__gesf2>
    218e:	18 16       	cp	r1, r24
    2190:	3c f5       	brge	.+78     	; 0x21e0 <_Z15spi_init_masterv+0xe2>
    2192:	20 e0       	ldi	r18, 0x00	; 0
    2194:	30 e0       	ldi	r19, 0x00	; 0
    2196:	40 e2       	ldi	r20, 0x20	; 32
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2198:	51 e4       	ldi	r21, 0x41	; 65
    219a:	69 81       	ldd	r22, Y+1	; 0x01
    219c:	7a 81       	ldd	r23, Y+2	; 0x02
    219e:	8b 81       	ldd	r24, Y+3	; 0x03
    21a0:	9c 81       	ldd	r25, Y+4	; 0x04
    21a2:	03 d3       	rcall	.+1542   	; 0x27aa <__mulsf3>
    21a4:	dc 01       	movw	r26, r24
    21a6:	cb 01       	movw	r24, r22
    21a8:	bc 01       	movw	r22, r24
    21aa:	cd 01       	movw	r24, r26
    21ac:	59 d2       	rcall	.+1202   	; 0x2660 <__fixunssfsi>
    21ae:	dc 01       	movw	r26, r24
    21b0:	cb 01       	movw	r24, r22
    21b2:	9a 87       	std	Y+10, r25	; 0x0a
    21b4:	89 87       	std	Y+9, r24	; 0x09
    21b6:	0f c0       	rjmp	.+30     	; 0x21d6 <_Z15spi_init_masterv+0xd8>
    21b8:	88 ec       	ldi	r24, 0xC8	; 200
    21ba:	90 e0       	ldi	r25, 0x00	; 0
    21bc:	9c 87       	std	Y+12, r25	; 0x0c
    21be:	8b 87       	std	Y+11, r24	; 0x0b
    21c0:	8b 85       	ldd	r24, Y+11	; 0x0b
    21c2:	9c 85       	ldd	r25, Y+12	; 0x0c
    21c4:	01 97       	sbiw	r24, 0x01	; 1
    21c6:	f1 f7       	brne	.-4      	; 0x21c4 <_Z15spi_init_masterv+0xc6>
    21c8:	9c 87       	std	Y+12, r25	; 0x0c
    21ca:	8b 87       	std	Y+11, r24	; 0x0b
    21cc:	89 85       	ldd	r24, Y+9	; 0x09
    21ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    21d0:	01 97       	sbiw	r24, 0x01	; 1
    21d2:	9a 87       	std	Y+10, r25	; 0x0a
    21d4:	89 87       	std	Y+9, r24	; 0x09
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21d6:	89 85       	ldd	r24, Y+9	; 0x09
    21d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    21da:	00 97       	sbiw	r24, 0x00	; 0
    21dc:	69 f7       	brne	.-38     	; 0x21b8 <_Z15spi_init_masterv+0xba>
    21de:	13 c0       	rjmp	.+38     	; 0x2206 <_Z15spi_init_masterv+0x108>
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21e0:	6d 81       	ldd	r22, Y+5	; 0x05
    21e2:	7e 81       	ldd	r23, Y+6	; 0x06
    21e4:	8f 81       	ldd	r24, Y+7	; 0x07
    21e6:	98 85       	ldd	r25, Y+8	; 0x08
    21e8:	3b d2       	rcall	.+1142   	; 0x2660 <__fixunssfsi>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ea:	dc 01       	movw	r26, r24
    21ec:	cb 01       	movw	r24, r22
    21ee:	9a 87       	std	Y+10, r25	; 0x0a
    21f0:	89 87       	std	Y+9, r24	; 0x09
    21f2:	89 85       	ldd	r24, Y+9	; 0x09
    21f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21f6:	9e 87       	std	Y+14, r25	; 0x0e
    21f8:	8d 87       	std	Y+13, r24	; 0x0d
    21fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    21fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    21fe:	01 97       	sbiw	r24, 0x01	; 1
    2200:	f1 f7       	brne	.-4      	; 0x21fe <_Z15spi_init_masterv+0x100>
    2202:	9e 87       	std	Y+14, r25	; 0x0e
    2204:	8d 87       	std	Y+13, r24	; 0x0d
    2206:	8d e2       	ldi	r24, 0x2D	; 45
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	21 e5       	ldi	r18, 0x51	; 81
    220c:	fc 01       	movw	r30, r24
    220e:	20 83       	st	Z, r18
    2210:	8a e3       	ldi	r24, 0x3A	; 58
	_delay_ms(5);



	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);//|(1<<CPOL)|(1<<CPHA); //Enable SPI, Set as Master,&//Prescaler: Fosc/16, Enable Interrupts
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	2f ef       	ldi	r18, 0xFF	; 255
    2216:	fc 01       	movw	r30, r24
    2218:	20 83       	st	Z, r18
    221a:	2e 96       	adiw	r28, 0x0e	; 14

	DDRA=0xff;
    221c:	0f b6       	in	r0, 0x3f	; 63
    221e:	f8 94       	cli
    2220:	de bf       	out	0x3e, r29	; 62
    2222:	0f be       	out	0x3f, r0	; 63
    2224:	cd bf       	out	0x3d, r28	; 61
	//PORTA=0xff;
}
    2226:	df 91       	pop	r29
    2228:	cf 91       	pop	r28
    222a:	08 95       	ret

0000222c <_Z14spi_tranceiverh>:

//Function to send and receive data
unsigned char spi_tranceiver (unsigned char data)
{
    222c:	cf 93       	push	r28
    222e:	df 93       	push	r29
    2230:	cd b7       	in	r28, 0x3d	; 61
    2232:	de b7       	in	r29, 0x3e	; 62
    2234:	69 97       	sbiw	r28, 0x19	; 25
    2236:	0f b6       	in	r0, 0x3f	; 63
    2238:	f8 94       	cli
    223a:	de bf       	out	0x3e, r29	; 62
    223c:	0f be       	out	0x3f, r0	; 63
    223e:	cd bf       	out	0x3d, r28	; 61
    2240:	89 8f       	std	Y+25, r24	; 0x19
    2242:	80 e0       	ldi	r24, 0x00	; 0
    2244:	90 e0       	ldi	r25, 0x00	; 0
    2246:	a0 ea       	ldi	r26, 0xA0	; 160
    2248:	b0 e4       	ldi	r27, 0x40	; 64
    224a:	89 83       	std	Y+1, r24	; 0x01
    224c:	9a 83       	std	Y+2, r25	; 0x02
    224e:	ab 83       	std	Y+3, r26	; 0x03
    2250:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 3e6) * __us;
    2252:	2b ea       	ldi	r18, 0xAB	; 171
    2254:	3a ea       	ldi	r19, 0xAA	; 170
    2256:	4a e2       	ldi	r20, 0x2A	; 42
    2258:	50 e4       	ldi	r21, 0x40	; 64
    225a:	69 81       	ldd	r22, Y+1	; 0x01
    225c:	7a 81       	ldd	r23, Y+2	; 0x02
    225e:	8b 81       	ldd	r24, Y+3	; 0x03
    2260:	9c 81       	ldd	r25, Y+4	; 0x04
    2262:	a3 d2       	rcall	.+1350   	; 0x27aa <__mulsf3>
    2264:	dc 01       	movw	r26, r24
    2266:	cb 01       	movw	r24, r22
    2268:	8d 83       	std	Y+5, r24	; 0x05
    226a:	9e 83       	std	Y+6, r25	; 0x06
    226c:	af 83       	std	Y+7, r26	; 0x07
    226e:	b8 87       	std	Y+8, r27	; 0x08
    2270:	20 e0       	ldi	r18, 0x00	; 0
	if (__tmp < 1.0)
    2272:	30 e0       	ldi	r19, 0x00	; 0
    2274:	40 e8       	ldi	r20, 0x80	; 128
    2276:	5f e3       	ldi	r21, 0x3F	; 63
    2278:	6d 81       	ldd	r22, Y+5	; 0x05
    227a:	7e 81       	ldd	r23, Y+6	; 0x06
    227c:	8f 81       	ldd	r24, Y+7	; 0x07
    227e:	98 85       	ldd	r25, Y+8	; 0x08
    2280:	83 d1       	rcall	.+774    	; 0x2588 <__cmpsf2>
    2282:	88 23       	and	r24, r24
    2284:	1c f4       	brge	.+6      	; 0x228c <_Z14spi_tranceiverh+0x60>
    2286:	81 e0       	ldi	r24, 0x01	; 1
    2288:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
    228a:	88 c0       	rjmp	.+272    	; 0x239c <_Z14spi_tranceiverh+0x170>
    228c:	20 e0       	ldi	r18, 0x00	; 0
    228e:	30 e0       	ldi	r19, 0x00	; 0
	else if (__tmp > 255)
    2290:	4f e7       	ldi	r20, 0x7F	; 127
    2292:	53 e4       	ldi	r21, 0x43	; 67
    2294:	6d 81       	ldd	r22, Y+5	; 0x05
    2296:	7e 81       	ldd	r23, Y+6	; 0x06
    2298:	8f 81       	ldd	r24, Y+7	; 0x07
    229a:	98 85       	ldd	r25, Y+8	; 0x08
    229c:	82 d2       	rcall	.+1284   	; 0x27a2 <__gesf2>
    229e:	18 16       	cp	r1, r24
    22a0:	0c f0       	brlt	.+2      	; 0x22a4 <_Z14spi_tranceiverh+0x78>
    22a2:	74 c0       	rjmp	.+232    	; 0x238c <_Z14spi_tranceiverh+0x160>
    22a4:	20 e0       	ldi	r18, 0x00	; 0
    22a6:	30 e0       	ldi	r19, 0x00	; 0
    22a8:	4a e7       	ldi	r20, 0x7A	; 122
	{
		_delay_ms(__us / 1000.0);
    22aa:	54 e4       	ldi	r21, 0x44	; 68
    22ac:	69 81       	ldd	r22, Y+1	; 0x01
    22ae:	7a 81       	ldd	r23, Y+2	; 0x02
    22b0:	8b 81       	ldd	r24, Y+3	; 0x03
    22b2:	9c 81       	ldd	r25, Y+4	; 0x04
    22b4:	6d d1       	rcall	.+730    	; 0x2590 <__divsf3>
    22b6:	dc 01       	movw	r26, r24
    22b8:	cb 01       	movw	r24, r22
    22ba:	8a 87       	std	Y+10, r24	; 0x0a
    22bc:	9b 87       	std	Y+11, r25	; 0x0b
    22be:	ac 87       	std	Y+12, r26	; 0x0c
    22c0:	bd 87       	std	Y+13, r27	; 0x0d
    22c2:	20 e0       	ldi	r18, 0x00	; 0
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	4a ef       	ldi	r20, 0xFA	; 250
    22c8:	54 e4       	ldi	r21, 0x44	; 68
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    22ca:	6a 85       	ldd	r22, Y+10	; 0x0a
    22cc:	7b 85       	ldd	r23, Y+11	; 0x0b
    22ce:	8c 85       	ldd	r24, Y+12	; 0x0c
    22d0:	9d 85       	ldd	r25, Y+13	; 0x0d
    22d2:	6b d2       	rcall	.+1238   	; 0x27aa <__mulsf3>
    22d4:	dc 01       	movw	r26, r24
    22d6:	cb 01       	movw	r24, r22
    22d8:	8e 87       	std	Y+14, r24	; 0x0e
    22da:	9f 87       	std	Y+15, r25	; 0x0f
    22dc:	a8 8b       	std	Y+16, r26	; 0x10
    22de:	b9 8b       	std	Y+17, r27	; 0x11
    22e0:	20 e0       	ldi	r18, 0x00	; 0
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	40 e8       	ldi	r20, 0x80	; 128
    22e6:	5f e3       	ldi	r21, 0x3F	; 63
    22e8:	6e 85       	ldd	r22, Y+14	; 0x0e
	if (__tmp < 1.0)
    22ea:	7f 85       	ldd	r23, Y+15	; 0x0f
    22ec:	88 89       	ldd	r24, Y+16	; 0x10
    22ee:	99 89       	ldd	r25, Y+17	; 0x11
    22f0:	4b d1       	rcall	.+662    	; 0x2588 <__cmpsf2>
    22f2:	88 23       	and	r24, r24
    22f4:	2c f4       	brge	.+10     	; 0x2300 <_Z14spi_tranceiverh+0xd4>
    22f6:	81 e0       	ldi	r24, 0x01	; 1
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	9b 8b       	std	Y+19, r25	; 0x13
    22fc:	8a 8b       	std	Y+18, r24	; 0x12
    22fe:	3b c0       	rjmp	.+118    	; 0x2376 <_Z14spi_tranceiverh+0x14a>
    2300:	20 e0       	ldi	r18, 0x00	; 0
		__ticks = 1;
    2302:	3f ef       	ldi	r19, 0xFF	; 255
    2304:	4f e7       	ldi	r20, 0x7F	; 127
    2306:	57 e4       	ldi	r21, 0x47	; 71
    2308:	6e 85       	ldd	r22, Y+14	; 0x0e
    230a:	7f 85       	ldd	r23, Y+15	; 0x0f
	else if (__tmp > 65535)
    230c:	88 89       	ldd	r24, Y+16	; 0x10
    230e:	99 89       	ldd	r25, Y+17	; 0x11
    2310:	48 d2       	rcall	.+1168   	; 0x27a2 <__gesf2>
    2312:	18 16       	cp	r1, r24
    2314:	3c f5       	brge	.+78     	; 0x2364 <_Z14spi_tranceiverh+0x138>
    2316:	20 e0       	ldi	r18, 0x00	; 0
    2318:	30 e0       	ldi	r19, 0x00	; 0
    231a:	40 e2       	ldi	r20, 0x20	; 32
    231c:	51 e4       	ldi	r21, 0x41	; 65
    231e:	6a 85       	ldd	r22, Y+10	; 0x0a
    2320:	7b 85       	ldd	r23, Y+11	; 0x0b
    2322:	8c 85       	ldd	r24, Y+12	; 0x0c
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2324:	9d 85       	ldd	r25, Y+13	; 0x0d
    2326:	41 d2       	rcall	.+1154   	; 0x27aa <__mulsf3>
    2328:	dc 01       	movw	r26, r24
    232a:	cb 01       	movw	r24, r22
    232c:	bc 01       	movw	r22, r24
    232e:	cd 01       	movw	r24, r26
    2330:	97 d1       	rcall	.+814    	; 0x2660 <__fixunssfsi>
    2332:	dc 01       	movw	r26, r24
    2334:	cb 01       	movw	r24, r22
    2336:	9b 8b       	std	Y+19, r25	; 0x13
    2338:	8a 8b       	std	Y+18, r24	; 0x12
    233a:	0f c0       	rjmp	.+30     	; 0x235a <_Z14spi_tranceiverh+0x12e>
    233c:	88 ec       	ldi	r24, 0xC8	; 200
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	9d 8b       	std	Y+21, r25	; 0x15
    2342:	8c 8b       	std	Y+20, r24	; 0x14
    2344:	8c 89       	ldd	r24, Y+20	; 0x14
    2346:	9d 89       	ldd	r25, Y+21	; 0x15
    2348:	01 97       	sbiw	r24, 0x01	; 1
    234a:	f1 f7       	brne	.-4      	; 0x2348 <_Z14spi_tranceiverh+0x11c>
    234c:	9d 8b       	std	Y+21, r25	; 0x15
    234e:	8c 8b       	std	Y+20, r24	; 0x14
    2350:	8a 89       	ldd	r24, Y+18	; 0x12
    2352:	9b 89       	ldd	r25, Y+19	; 0x13
    2354:	01 97       	sbiw	r24, 0x01	; 1
    2356:	9b 8b       	std	Y+19, r25	; 0x13
    2358:	8a 8b       	std	Y+18, r24	; 0x12
    235a:	8a 89       	ldd	r24, Y+18	; 0x12
    235c:	9b 89       	ldd	r25, Y+19	; 0x13
    235e:	00 97       	sbiw	r24, 0x00	; 0
    2360:	69 f7       	brne	.-38     	; 0x233c <_Z14spi_tranceiverh+0x110>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2362:	22 c0       	rjmp	.+68     	; 0x23a8 <_Z14spi_tranceiverh+0x17c>
    2364:	6e 85       	ldd	r22, Y+14	; 0x0e
    2366:	7f 85       	ldd	r23, Y+15	; 0x0f
    2368:	88 89       	ldd	r24, Y+16	; 0x10
    236a:	99 89       	ldd	r25, Y+17	; 0x11
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    236c:	79 d1       	rcall	.+754    	; 0x2660 <__fixunssfsi>
    236e:	dc 01       	movw	r26, r24
    2370:	cb 01       	movw	r24, r22
    2372:	9b 8b       	std	Y+19, r25	; 0x13
    2374:	8a 8b       	std	Y+18, r24	; 0x12
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2376:	8a 89       	ldd	r24, Y+18	; 0x12
    2378:	9b 89       	ldd	r25, Y+19	; 0x13
    237a:	9f 8b       	std	Y+23, r25	; 0x17
    237c:	8e 8b       	std	Y+22, r24	; 0x16
    237e:	8e 89       	ldd	r24, Y+22	; 0x16
    2380:	9f 89       	ldd	r25, Y+23	; 0x17
    2382:	01 97       	sbiw	r24, 0x01	; 1
    2384:	f1 f7       	brne	.-4      	; 0x2382 <_Z14spi_tranceiverh+0x156>
    2386:	9f 8b       	std	Y+23, r25	; 0x17
    2388:	8e 8b       	std	Y+22, r24	; 0x16
    238a:	0e c0       	rjmp	.+28     	; 0x23a8 <_Z14spi_tranceiverh+0x17c>
    238c:	6d 81       	ldd	r22, Y+5	; 0x05
    238e:	7e 81       	ldd	r23, Y+6	; 0x06
    2390:	8f 81       	ldd	r24, Y+7	; 0x07
    2392:	98 85       	ldd	r25, Y+8	; 0x08
    2394:	65 d1       	rcall	.+714    	; 0x2660 <__fixunssfsi>
    2396:	dc 01       	movw	r26, r24
    2398:	cb 01       	movw	r24, r22
    239a:	89 87       	std	Y+9, r24	; 0x09
    239c:	89 85       	ldd	r24, Y+9	; 0x09
    239e:	88 8f       	std	Y+24, r24	; 0x18
    23a0:	88 8d       	ldd	r24, Y+24	; 0x18
    23a2:	8a 95       	dec	r24
    23a4:	f1 f7       	brne	.-4      	; 0x23a2 <_Z14spi_tranceiverh+0x176>
    23a6:	88 8f       	std	Y+24, r24	; 0x18
    23a8:	8f e2       	ldi	r24, 0x2F	; 47
    23aa:	90 e0       	ldi	r25, 0x00	; 0
    23ac:	29 8d       	ldd	r18, Y+25	; 0x19
    23ae:	fc 01       	movw	r30, r24
    23b0:	20 83       	st	Z, r18
    23b2:	00 00       	nop
    23b4:	8e e2       	ldi	r24, 0x2E	; 46
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	fc 01       	movw	r30, r24
    23ba:	80 81       	ld	r24, Z
    23bc:	80 95       	com	r24
	_delay_us(5);
	SPDR = data;                   //Load data into the buffer
    23be:	88 1f       	adc	r24, r24
    23c0:	88 27       	eor	r24, r24
    23c2:	88 1f       	adc	r24, r24
    23c4:	88 23       	and	r24, r24
    23c6:	b1 f7       	brne	.-20     	; 0x23b4 <_Z14spi_tranceiverh+0x188>
	while(!(SPSR & (1<<SPIF) ));       //Wait until transmission complete
    23c8:	8f e2       	ldi	r24, 0x2F	; 47
    23ca:	90 e0       	ldi	r25, 0x00	; 0
    23cc:	fc 01       	movw	r30, r24
    23ce:	80 81       	ld	r24, Z
    23d0:	69 96       	adiw	r28, 0x19	; 25
    23d2:	0f b6       	in	r0, 0x3f	; 63
    23d4:	f8 94       	cli
    23d6:	de bf       	out	0x3e, r29	; 62
    23d8:	0f be       	out	0x3f, r0	; 63
    23da:	cd bf       	out	0x3d, r28	; 61
    23dc:	df 91       	pop	r29

	return(SPDR);                      //Return received data
    23de:	cf 91       	pop	r28
    23e0:	08 95       	ret

000023e2 <_Z9uart_initm>:
#include "uart.h"

void uart_init(uint32_t baud)
{
    23e2:	cf 93       	push	r28
    23e4:	df 93       	push	r29
    23e6:	cd b7       	in	r28, 0x3d	; 61
    23e8:	de b7       	in	r29, 0x3e	; 62
    23ea:	2a 97       	sbiw	r28, 0x0a	; 10
    23ec:	0f b6       	in	r0, 0x3f	; 63
    23ee:	f8 94       	cli
    23f0:	de bf       	out	0x3e, r29	; 62
    23f2:	0f be       	out	0x3f, r0	; 63
    23f4:	cd bf       	out	0x3d, r28	; 61
    23f6:	6b 83       	std	Y+3, r22	; 0x03
    23f8:	7c 83       	std	Y+4, r23	; 0x04
    23fa:	8d 83       	std	Y+5, r24	; 0x05
    23fc:	9e 83       	std	Y+6, r25	; 0x06
	// set up baud rate
	uint16_t ubrr = (F_CPU >> 4) / baud - 1;
    23fe:	80 e2       	ldi	r24, 0x20	; 32
    2400:	91 ea       	ldi	r25, 0xA1	; 161
    2402:	a7 e0       	ldi	r26, 0x07	; 7
    2404:	b0 e0       	ldi	r27, 0x00	; 0
    2406:	2b 81       	ldd	r18, Y+3	; 0x03
    2408:	3c 81       	ldd	r19, Y+4	; 0x04
    240a:	4d 81       	ldd	r20, Y+5	; 0x05
    240c:	5e 81       	ldd	r21, Y+6	; 0x06
    240e:	bc 01       	movw	r22, r24
    2410:	cd 01       	movw	r24, r26
    2412:	7e d0       	rcall	.+252    	; 0x2510 <__udivmodsi4>
    2414:	da 01       	movw	r26, r20
    2416:	c9 01       	movw	r24, r18
    2418:	01 97       	sbiw	r24, 0x01	; 1
    241a:	9a 83       	std	Y+2, r25	; 0x02
    241c:	89 83       	std	Y+1, r24	; 0x01
    241e:	89 e2       	ldi	r24, 0x29	; 41
	UBRRL = ubrr & 0x00FF;
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	29 81       	ldd	r18, Y+1	; 0x01
    2424:	fc 01       	movw	r30, r24
    2426:	20 83       	st	Z, r18
    2428:	80 e4       	ldi	r24, 0x40	; 64
	UBRRH = ubrr >> 8;
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	29 81       	ldd	r18, Y+1	; 0x01
    242e:	3a 81       	ldd	r19, Y+2	; 0x02
    2430:	23 2f       	mov	r18, r19
    2432:	33 27       	eor	r19, r19
    2434:	fc 01       	movw	r30, r24
    2436:	20 83       	st	Z, r18
    2438:	80 e4       	ldi	r24, 0x40	; 64
	// 8-bit transfer, no parity, 1 stop bit
	UCSRC = BV(URSEL) | BV(UCSZ1) | BV(UCSZ0);
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	26 e8       	ldi	r18, 0x86	; 134
    243e:	fc 01       	movw	r30, r24
    2440:	20 83       	st	Z, r18
    2442:	8a e2       	ldi	r24, 0x2A	; 42
	// enable tx, rx
	UCSRB = BV(TXEN) | BV(RXEN);
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	28 e1       	ldi	r18, 0x18	; 24
    2448:	fc 01       	movw	r30, r24
    244a:	20 83       	st	Z, r18
    244c:	2a 96       	adiw	r28, 0x0a	; 10
}
    244e:	0f b6       	in	r0, 0x3f	; 63
    2450:	f8 94       	cli
    2452:	de bf       	out	0x3e, r29	; 62
    2454:	0f be       	out	0x3f, r0	; 63
    2456:	cd bf       	out	0x3d, r28	; 61
    2458:	df 91       	pop	r29
    245a:	cf 91       	pop	r28
    245c:	08 95       	ret

0000245e <_Z10uart_putchc>:

void uart_putch(char ch)
{
    245e:	cf 93       	push	r28
    2460:	df 93       	push	r29
    2462:	1f 92       	push	r1
    2464:	cd b7       	in	r28, 0x3d	; 61
    2466:	de b7       	in	r29, 0x3e	; 62
    2468:	89 83       	std	Y+1, r24	; 0x01
	// wait while UDRE bit is 0
	while((UCSRA & BV(UDRE))==0);
    246a:	00 00       	nop
    246c:	8b e2       	ldi	r24, 0x2B	; 43
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	fc 01       	movw	r30, r24
    2472:	80 81       	ld	r24, Z
    2474:	88 2f       	mov	r24, r24
    2476:	90 e0       	ldi	r25, 0x00	; 0
    2478:	80 72       	andi	r24, 0x20	; 32
    247a:	99 27       	eor	r25, r25
    247c:	21 e0       	ldi	r18, 0x01	; 1
    247e:	00 97       	sbiw	r24, 0x00	; 0
    2480:	09 f0       	breq	.+2      	; 0x2484 <_Z10uart_putchc+0x26>
    2482:	20 e0       	ldi	r18, 0x00	; 0
    2484:	22 23       	and	r18, r18
    2486:	91 f7       	brne	.-28     	; 0x246c <_Z10uart_putchc+0xe>
	// then write data to UDR
	UDR = ch;
    2488:	8c e2       	ldi	r24, 0x2C	; 44
    248a:	90 e0       	ldi	r25, 0x00	; 0
    248c:	29 81       	ldd	r18, Y+1	; 0x01
    248e:	fc 01       	movw	r30, r24
    2490:	20 83       	st	Z, r18
}
    2492:	0f 90       	pop	r0
    2494:	df 91       	pop	r29
    2496:	cf 91       	pop	r28
    2498:	08 95       	ret

0000249a <_Z9uart_putsPc>:
	while((UCSRA & BV(RXC))==0);
	// then read data from UDR
	return (char)UDR;
}
void uart_puts(char str[])
{
    249a:	cf 93       	push	r28
    249c:	df 93       	push	r29
    249e:	00 d0       	rcall	.+0      	; 0x24a0 <_Z9uart_putsPc+0x6>
    24a0:	1f 92       	push	r1
    24a2:	cd b7       	in	r28, 0x3d	; 61
    24a4:	de b7       	in	r29, 0x3e	; 62
    24a6:	9b 83       	std	Y+3, r25	; 0x03
    24a8:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i;
	for(i=0; str[i]!='\0'; i++)
    24aa:	19 82       	std	Y+1, r1	; 0x01
    24ac:	0d c0       	rjmp	.+26     	; 0x24c8 <_Z9uart_putsPc+0x2e>
		uart_putch(str[i]);
    24ae:	89 81       	ldd	r24, Y+1	; 0x01
    24b0:	88 2f       	mov	r24, r24
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	2a 81       	ldd	r18, Y+2	; 0x02
    24b6:	3b 81       	ldd	r19, Y+3	; 0x03
    24b8:	82 0f       	add	r24, r18
    24ba:	93 1f       	adc	r25, r19
    24bc:	fc 01       	movw	r30, r24
    24be:	80 81       	ld	r24, Z
    24c0:	ce df       	rcall	.-100    	; 0x245e <_Z10uart_putchc>
    24c2:	89 81       	ldd	r24, Y+1	; 0x01
	return (char)UDR;
}
void uart_puts(char str[])
{
	uint8_t i;
	for(i=0; str[i]!='\0'; i++)
    24c4:	8f 5f       	subi	r24, 0xFF	; 255
    24c6:	89 83       	std	Y+1, r24	; 0x01
    24c8:	89 81       	ldd	r24, Y+1	; 0x01
    24ca:	88 2f       	mov	r24, r24
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	2a 81       	ldd	r18, Y+2	; 0x02
    24d0:	3b 81       	ldd	r19, Y+3	; 0x03
    24d2:	82 0f       	add	r24, r18
    24d4:	93 1f       	adc	r25, r19
    24d6:	fc 01       	movw	r30, r24
    24d8:	80 81       	ld	r24, Z
    24da:	88 23       	and	r24, r24
    24dc:	41 f7       	brne	.-48     	; 0x24ae <_Z9uart_putsPc+0x14>
    24de:	0f 90       	pop	r0
		uart_putch(str[i]);
}
    24e0:	0f 90       	pop	r0
    24e2:	0f 90       	pop	r0
    24e4:	df 91       	pop	r29
    24e6:	cf 91       	pop	r28
    24e8:	08 95       	ret

000024ea <__divmodhi4>:
    24ea:	97 fb       	bst	r25, 7
    24ec:	07 2e       	mov	r0, r23
    24ee:	16 f4       	brtc	.+4      	; 0x24f4 <__divmodhi4+0xa>
    24f0:	00 94       	com	r0
    24f2:	06 d0       	rcall	.+12     	; 0x2500 <__divmodhi4_neg1>
    24f4:	77 fd       	sbrc	r23, 7
    24f6:	08 d0       	rcall	.+16     	; 0x2508 <__divmodhi4_neg2>
    24f8:	2d d0       	rcall	.+90     	; 0x2554 <__udivmodhi4>
    24fa:	07 fc       	sbrc	r0, 7
    24fc:	05 d0       	rcall	.+10     	; 0x2508 <__divmodhi4_neg2>
    24fe:	3e f4       	brtc	.+14     	; 0x250e <__divmodhi4_exit>

00002500 <__divmodhi4_neg1>:
    2500:	90 95       	com	r25
    2502:	81 95       	neg	r24
    2504:	9f 4f       	sbci	r25, 0xFF	; 255
    2506:	08 95       	ret

00002508 <__divmodhi4_neg2>:
    2508:	70 95       	com	r23
    250a:	61 95       	neg	r22
    250c:	7f 4f       	sbci	r23, 0xFF	; 255

0000250e <__divmodhi4_exit>:
    250e:	08 95       	ret

00002510 <__udivmodsi4>:
    2510:	a1 e2       	ldi	r26, 0x21	; 33
    2512:	1a 2e       	mov	r1, r26
    2514:	aa 1b       	sub	r26, r26
    2516:	bb 1b       	sub	r27, r27
    2518:	fd 01       	movw	r30, r26
    251a:	0d c0       	rjmp	.+26     	; 0x2536 <__udivmodsi4_ep>

0000251c <__udivmodsi4_loop>:
    251c:	aa 1f       	adc	r26, r26
    251e:	bb 1f       	adc	r27, r27
    2520:	ee 1f       	adc	r30, r30
    2522:	ff 1f       	adc	r31, r31
    2524:	a2 17       	cp	r26, r18
    2526:	b3 07       	cpc	r27, r19
    2528:	e4 07       	cpc	r30, r20
    252a:	f5 07       	cpc	r31, r21
    252c:	20 f0       	brcs	.+8      	; 0x2536 <__udivmodsi4_ep>
    252e:	a2 1b       	sub	r26, r18
    2530:	b3 0b       	sbc	r27, r19
    2532:	e4 0b       	sbc	r30, r20
    2534:	f5 0b       	sbc	r31, r21

00002536 <__udivmodsi4_ep>:
    2536:	66 1f       	adc	r22, r22
    2538:	77 1f       	adc	r23, r23
    253a:	88 1f       	adc	r24, r24
    253c:	99 1f       	adc	r25, r25
    253e:	1a 94       	dec	r1
    2540:	69 f7       	brne	.-38     	; 0x251c <__udivmodsi4_loop>
    2542:	60 95       	com	r22
    2544:	70 95       	com	r23
    2546:	80 95       	com	r24
    2548:	90 95       	com	r25
    254a:	9b 01       	movw	r18, r22
    254c:	ac 01       	movw	r20, r24
    254e:	bd 01       	movw	r22, r26
    2550:	cf 01       	movw	r24, r30
    2552:	08 95       	ret

00002554 <__udivmodhi4>:
    2554:	aa 1b       	sub	r26, r26
    2556:	bb 1b       	sub	r27, r27
    2558:	51 e1       	ldi	r21, 0x11	; 17
    255a:	07 c0       	rjmp	.+14     	; 0x256a <__udivmodhi4_ep>

0000255c <__udivmodhi4_loop>:
    255c:	aa 1f       	adc	r26, r26
    255e:	bb 1f       	adc	r27, r27
    2560:	a6 17       	cp	r26, r22
    2562:	b7 07       	cpc	r27, r23
    2564:	10 f0       	brcs	.+4      	; 0x256a <__udivmodhi4_ep>
    2566:	a6 1b       	sub	r26, r22
    2568:	b7 0b       	sbc	r27, r23

0000256a <__udivmodhi4_ep>:
    256a:	88 1f       	adc	r24, r24
    256c:	99 1f       	adc	r25, r25
    256e:	5a 95       	dec	r21
    2570:	a9 f7       	brne	.-22     	; 0x255c <__udivmodhi4_loop>
    2572:	80 95       	com	r24
    2574:	90 95       	com	r25
    2576:	bc 01       	movw	r22, r24
    2578:	cd 01       	movw	r24, r26
    257a:	08 95       	ret

0000257c <__tablejump2__>:
    257c:	ee 0f       	add	r30, r30
    257e:	ff 1f       	adc	r31, r31
    2580:	05 90       	lpm	r0, Z+
    2582:	f4 91       	lpm	r31, Z
    2584:	e0 2d       	mov	r30, r0
    2586:	09 94       	ijmp

00002588 <__cmpsf2>:
    2588:	97 d0       	rcall	.+302    	; 0x26b8 <__fp_cmp>
    258a:	08 f4       	brcc	.+2      	; 0x258e <__cmpsf2+0x6>
    258c:	81 e0       	ldi	r24, 0x01	; 1
    258e:	08 95       	ret

00002590 <__divsf3>:
    2590:	0c d0       	rcall	.+24     	; 0x25aa <__divsf3x>
    2592:	cd c0       	rjmp	.+410    	; 0x272e <__fp_round>
    2594:	c5 d0       	rcall	.+394    	; 0x2720 <__fp_pscB>
    2596:	40 f0       	brcs	.+16     	; 0x25a8 <__divsf3+0x18>
    2598:	bc d0       	rcall	.+376    	; 0x2712 <__fp_pscA>
    259a:	30 f0       	brcs	.+12     	; 0x25a8 <__divsf3+0x18>
    259c:	21 f4       	brne	.+8      	; 0x25a6 <__divsf3+0x16>
    259e:	5f 3f       	cpi	r21, 0xFF	; 255
    25a0:	19 f0       	breq	.+6      	; 0x25a8 <__divsf3+0x18>
    25a2:	ae c0       	rjmp	.+348    	; 0x2700 <__fp_inf>
    25a4:	51 11       	cpse	r21, r1
    25a6:	f7 c0       	rjmp	.+494    	; 0x2796 <__fp_szero>
    25a8:	b1 c0       	rjmp	.+354    	; 0x270c <__fp_nan>

000025aa <__divsf3x>:
    25aa:	d2 d0       	rcall	.+420    	; 0x2750 <__fp_split3>
    25ac:	98 f3       	brcs	.-26     	; 0x2594 <__divsf3+0x4>

000025ae <__divsf3_pse>:
    25ae:	99 23       	and	r25, r25
    25b0:	c9 f3       	breq	.-14     	; 0x25a4 <__divsf3+0x14>
    25b2:	55 23       	and	r21, r21
    25b4:	b1 f3       	breq	.-20     	; 0x25a2 <__divsf3+0x12>
    25b6:	95 1b       	sub	r25, r21
    25b8:	55 0b       	sbc	r21, r21
    25ba:	bb 27       	eor	r27, r27
    25bc:	aa 27       	eor	r26, r26
    25be:	62 17       	cp	r22, r18
    25c0:	73 07       	cpc	r23, r19
    25c2:	84 07       	cpc	r24, r20
    25c4:	38 f0       	brcs	.+14     	; 0x25d4 <__divsf3_pse+0x26>
    25c6:	9f 5f       	subi	r25, 0xFF	; 255
    25c8:	5f 4f       	sbci	r21, 0xFF	; 255
    25ca:	22 0f       	add	r18, r18
    25cc:	33 1f       	adc	r19, r19
    25ce:	44 1f       	adc	r20, r20
    25d0:	aa 1f       	adc	r26, r26
    25d2:	a9 f3       	breq	.-22     	; 0x25be <__divsf3_pse+0x10>
    25d4:	33 d0       	rcall	.+102    	; 0x263c <__divsf3_pse+0x8e>
    25d6:	0e 2e       	mov	r0, r30
    25d8:	3a f0       	brmi	.+14     	; 0x25e8 <__divsf3_pse+0x3a>
    25da:	e0 e8       	ldi	r30, 0x80	; 128
    25dc:	30 d0       	rcall	.+96     	; 0x263e <__divsf3_pse+0x90>
    25de:	91 50       	subi	r25, 0x01	; 1
    25e0:	50 40       	sbci	r21, 0x00	; 0
    25e2:	e6 95       	lsr	r30
    25e4:	00 1c       	adc	r0, r0
    25e6:	ca f7       	brpl	.-14     	; 0x25da <__divsf3_pse+0x2c>
    25e8:	29 d0       	rcall	.+82     	; 0x263c <__divsf3_pse+0x8e>
    25ea:	fe 2f       	mov	r31, r30
    25ec:	27 d0       	rcall	.+78     	; 0x263c <__divsf3_pse+0x8e>
    25ee:	66 0f       	add	r22, r22
    25f0:	77 1f       	adc	r23, r23
    25f2:	88 1f       	adc	r24, r24
    25f4:	bb 1f       	adc	r27, r27
    25f6:	26 17       	cp	r18, r22
    25f8:	37 07       	cpc	r19, r23
    25fa:	48 07       	cpc	r20, r24
    25fc:	ab 07       	cpc	r26, r27
    25fe:	b0 e8       	ldi	r27, 0x80	; 128
    2600:	09 f0       	breq	.+2      	; 0x2604 <__divsf3_pse+0x56>
    2602:	bb 0b       	sbc	r27, r27
    2604:	80 2d       	mov	r24, r0
    2606:	bf 01       	movw	r22, r30
    2608:	ff 27       	eor	r31, r31
    260a:	93 58       	subi	r25, 0x83	; 131
    260c:	5f 4f       	sbci	r21, 0xFF	; 255
    260e:	2a f0       	brmi	.+10     	; 0x261a <__divsf3_pse+0x6c>
    2610:	9e 3f       	cpi	r25, 0xFE	; 254
    2612:	51 05       	cpc	r21, r1
    2614:	68 f0       	brcs	.+26     	; 0x2630 <__divsf3_pse+0x82>
    2616:	74 c0       	rjmp	.+232    	; 0x2700 <__fp_inf>
    2618:	be c0       	rjmp	.+380    	; 0x2796 <__fp_szero>
    261a:	5f 3f       	cpi	r21, 0xFF	; 255
    261c:	ec f3       	brlt	.-6      	; 0x2618 <__divsf3_pse+0x6a>
    261e:	98 3e       	cpi	r25, 0xE8	; 232
    2620:	dc f3       	brlt	.-10     	; 0x2618 <__divsf3_pse+0x6a>
    2622:	86 95       	lsr	r24
    2624:	77 95       	ror	r23
    2626:	67 95       	ror	r22
    2628:	b7 95       	ror	r27
    262a:	f7 95       	ror	r31
    262c:	9f 5f       	subi	r25, 0xFF	; 255
    262e:	c9 f7       	brne	.-14     	; 0x2622 <__divsf3_pse+0x74>
    2630:	88 0f       	add	r24, r24
    2632:	91 1d       	adc	r25, r1
    2634:	96 95       	lsr	r25
    2636:	87 95       	ror	r24
    2638:	97 f9       	bld	r25, 7
    263a:	08 95       	ret
    263c:	e1 e0       	ldi	r30, 0x01	; 1
    263e:	66 0f       	add	r22, r22
    2640:	77 1f       	adc	r23, r23
    2642:	88 1f       	adc	r24, r24
    2644:	bb 1f       	adc	r27, r27
    2646:	62 17       	cp	r22, r18
    2648:	73 07       	cpc	r23, r19
    264a:	84 07       	cpc	r24, r20
    264c:	ba 07       	cpc	r27, r26
    264e:	20 f0       	brcs	.+8      	; 0x2658 <__divsf3_pse+0xaa>
    2650:	62 1b       	sub	r22, r18
    2652:	73 0b       	sbc	r23, r19
    2654:	84 0b       	sbc	r24, r20
    2656:	ba 0b       	sbc	r27, r26
    2658:	ee 1f       	adc	r30, r30
    265a:	88 f7       	brcc	.-30     	; 0x263e <__divsf3_pse+0x90>
    265c:	e0 95       	com	r30
    265e:	08 95       	ret

00002660 <__fixunssfsi>:
    2660:	7f d0       	rcall	.+254    	; 0x2760 <__fp_splitA>
    2662:	88 f0       	brcs	.+34     	; 0x2686 <__fixunssfsi+0x26>
    2664:	9f 57       	subi	r25, 0x7F	; 127
    2666:	90 f0       	brcs	.+36     	; 0x268c <__fixunssfsi+0x2c>
    2668:	b9 2f       	mov	r27, r25
    266a:	99 27       	eor	r25, r25
    266c:	b7 51       	subi	r27, 0x17	; 23
    266e:	a0 f0       	brcs	.+40     	; 0x2698 <__fixunssfsi+0x38>
    2670:	d1 f0       	breq	.+52     	; 0x26a6 <__fixunssfsi+0x46>
    2672:	66 0f       	add	r22, r22
    2674:	77 1f       	adc	r23, r23
    2676:	88 1f       	adc	r24, r24
    2678:	99 1f       	adc	r25, r25
    267a:	1a f0       	brmi	.+6      	; 0x2682 <__fixunssfsi+0x22>
    267c:	ba 95       	dec	r27
    267e:	c9 f7       	brne	.-14     	; 0x2672 <__fixunssfsi+0x12>
    2680:	12 c0       	rjmp	.+36     	; 0x26a6 <__fixunssfsi+0x46>
    2682:	b1 30       	cpi	r27, 0x01	; 1
    2684:	81 f0       	breq	.+32     	; 0x26a6 <__fixunssfsi+0x46>
    2686:	86 d0       	rcall	.+268    	; 0x2794 <__fp_zero>
    2688:	b1 e0       	ldi	r27, 0x01	; 1
    268a:	08 95       	ret
    268c:	83 c0       	rjmp	.+262    	; 0x2794 <__fp_zero>
    268e:	67 2f       	mov	r22, r23
    2690:	78 2f       	mov	r23, r24
    2692:	88 27       	eor	r24, r24
    2694:	b8 5f       	subi	r27, 0xF8	; 248
    2696:	39 f0       	breq	.+14     	; 0x26a6 <__fixunssfsi+0x46>
    2698:	b9 3f       	cpi	r27, 0xF9	; 249
    269a:	cc f3       	brlt	.-14     	; 0x268e <__fixunssfsi+0x2e>
    269c:	86 95       	lsr	r24
    269e:	77 95       	ror	r23
    26a0:	67 95       	ror	r22
    26a2:	b3 95       	inc	r27
    26a4:	d9 f7       	brne	.-10     	; 0x269c <__fixunssfsi+0x3c>
    26a6:	3e f4       	brtc	.+14     	; 0x26b6 <__fixunssfsi+0x56>
    26a8:	90 95       	com	r25
    26aa:	80 95       	com	r24
    26ac:	70 95       	com	r23
    26ae:	61 95       	neg	r22
    26b0:	7f 4f       	sbci	r23, 0xFF	; 255
    26b2:	8f 4f       	sbci	r24, 0xFF	; 255
    26b4:	9f 4f       	sbci	r25, 0xFF	; 255
    26b6:	08 95       	ret

000026b8 <__fp_cmp>:
    26b8:	99 0f       	add	r25, r25
    26ba:	00 08       	sbc	r0, r0
    26bc:	55 0f       	add	r21, r21
    26be:	aa 0b       	sbc	r26, r26
    26c0:	e0 e8       	ldi	r30, 0x80	; 128
    26c2:	fe ef       	ldi	r31, 0xFE	; 254
    26c4:	16 16       	cp	r1, r22
    26c6:	17 06       	cpc	r1, r23
    26c8:	e8 07       	cpc	r30, r24
    26ca:	f9 07       	cpc	r31, r25
    26cc:	c0 f0       	brcs	.+48     	; 0x26fe <__fp_cmp+0x46>
    26ce:	12 16       	cp	r1, r18
    26d0:	13 06       	cpc	r1, r19
    26d2:	e4 07       	cpc	r30, r20
    26d4:	f5 07       	cpc	r31, r21
    26d6:	98 f0       	brcs	.+38     	; 0x26fe <__fp_cmp+0x46>
    26d8:	62 1b       	sub	r22, r18
    26da:	73 0b       	sbc	r23, r19
    26dc:	84 0b       	sbc	r24, r20
    26de:	95 0b       	sbc	r25, r21
    26e0:	39 f4       	brne	.+14     	; 0x26f0 <__fp_cmp+0x38>
    26e2:	0a 26       	eor	r0, r26
    26e4:	61 f0       	breq	.+24     	; 0x26fe <__fp_cmp+0x46>
    26e6:	23 2b       	or	r18, r19
    26e8:	24 2b       	or	r18, r20
    26ea:	25 2b       	or	r18, r21
    26ec:	21 f4       	brne	.+8      	; 0x26f6 <__fp_cmp+0x3e>
    26ee:	08 95       	ret
    26f0:	0a 26       	eor	r0, r26
    26f2:	09 f4       	brne	.+2      	; 0x26f6 <__fp_cmp+0x3e>
    26f4:	a1 40       	sbci	r26, 0x01	; 1
    26f6:	a6 95       	lsr	r26
    26f8:	8f ef       	ldi	r24, 0xFF	; 255
    26fa:	81 1d       	adc	r24, r1
    26fc:	81 1d       	adc	r24, r1
    26fe:	08 95       	ret

00002700 <__fp_inf>:
    2700:	97 f9       	bld	r25, 7
    2702:	9f 67       	ori	r25, 0x7F	; 127
    2704:	80 e8       	ldi	r24, 0x80	; 128
    2706:	70 e0       	ldi	r23, 0x00	; 0
    2708:	60 e0       	ldi	r22, 0x00	; 0
    270a:	08 95       	ret

0000270c <__fp_nan>:
    270c:	9f ef       	ldi	r25, 0xFF	; 255
    270e:	80 ec       	ldi	r24, 0xC0	; 192
    2710:	08 95       	ret

00002712 <__fp_pscA>:
    2712:	00 24       	eor	r0, r0
    2714:	0a 94       	dec	r0
    2716:	16 16       	cp	r1, r22
    2718:	17 06       	cpc	r1, r23
    271a:	18 06       	cpc	r1, r24
    271c:	09 06       	cpc	r0, r25
    271e:	08 95       	ret

00002720 <__fp_pscB>:
    2720:	00 24       	eor	r0, r0
    2722:	0a 94       	dec	r0
    2724:	12 16       	cp	r1, r18
    2726:	13 06       	cpc	r1, r19
    2728:	14 06       	cpc	r1, r20
    272a:	05 06       	cpc	r0, r21
    272c:	08 95       	ret

0000272e <__fp_round>:
    272e:	09 2e       	mov	r0, r25
    2730:	03 94       	inc	r0
    2732:	00 0c       	add	r0, r0
    2734:	11 f4       	brne	.+4      	; 0x273a <__fp_round+0xc>
    2736:	88 23       	and	r24, r24
    2738:	52 f0       	brmi	.+20     	; 0x274e <__fp_round+0x20>
    273a:	bb 0f       	add	r27, r27
    273c:	40 f4       	brcc	.+16     	; 0x274e <__fp_round+0x20>
    273e:	bf 2b       	or	r27, r31
    2740:	11 f4       	brne	.+4      	; 0x2746 <__fp_round+0x18>
    2742:	60 ff       	sbrs	r22, 0
    2744:	04 c0       	rjmp	.+8      	; 0x274e <__fp_round+0x20>
    2746:	6f 5f       	subi	r22, 0xFF	; 255
    2748:	7f 4f       	sbci	r23, 0xFF	; 255
    274a:	8f 4f       	sbci	r24, 0xFF	; 255
    274c:	9f 4f       	sbci	r25, 0xFF	; 255
    274e:	08 95       	ret

00002750 <__fp_split3>:
    2750:	57 fd       	sbrc	r21, 7
    2752:	90 58       	subi	r25, 0x80	; 128
    2754:	44 0f       	add	r20, r20
    2756:	55 1f       	adc	r21, r21
    2758:	59 f0       	breq	.+22     	; 0x2770 <__fp_splitA+0x10>
    275a:	5f 3f       	cpi	r21, 0xFF	; 255
    275c:	71 f0       	breq	.+28     	; 0x277a <__fp_splitA+0x1a>
    275e:	47 95       	ror	r20

00002760 <__fp_splitA>:
    2760:	88 0f       	add	r24, r24
    2762:	97 fb       	bst	r25, 7
    2764:	99 1f       	adc	r25, r25
    2766:	61 f0       	breq	.+24     	; 0x2780 <__fp_splitA+0x20>
    2768:	9f 3f       	cpi	r25, 0xFF	; 255
    276a:	79 f0       	breq	.+30     	; 0x278a <__fp_splitA+0x2a>
    276c:	87 95       	ror	r24
    276e:	08 95       	ret
    2770:	12 16       	cp	r1, r18
    2772:	13 06       	cpc	r1, r19
    2774:	14 06       	cpc	r1, r20
    2776:	55 1f       	adc	r21, r21
    2778:	f2 cf       	rjmp	.-28     	; 0x275e <__fp_split3+0xe>
    277a:	46 95       	lsr	r20
    277c:	f1 df       	rcall	.-30     	; 0x2760 <__fp_splitA>
    277e:	08 c0       	rjmp	.+16     	; 0x2790 <__fp_splitA+0x30>
    2780:	16 16       	cp	r1, r22
    2782:	17 06       	cpc	r1, r23
    2784:	18 06       	cpc	r1, r24
    2786:	99 1f       	adc	r25, r25
    2788:	f1 cf       	rjmp	.-30     	; 0x276c <__fp_splitA+0xc>
    278a:	86 95       	lsr	r24
    278c:	71 05       	cpc	r23, r1
    278e:	61 05       	cpc	r22, r1
    2790:	08 94       	sec
    2792:	08 95       	ret

00002794 <__fp_zero>:
    2794:	e8 94       	clt

00002796 <__fp_szero>:
    2796:	bb 27       	eor	r27, r27
    2798:	66 27       	eor	r22, r22
    279a:	77 27       	eor	r23, r23
    279c:	cb 01       	movw	r24, r22
    279e:	97 f9       	bld	r25, 7
    27a0:	08 95       	ret

000027a2 <__gesf2>:
    27a2:	8a df       	rcall	.-236    	; 0x26b8 <__fp_cmp>
    27a4:	08 f4       	brcc	.+2      	; 0x27a8 <__gesf2+0x6>
    27a6:	8f ef       	ldi	r24, 0xFF	; 255
    27a8:	08 95       	ret

000027aa <__mulsf3>:
    27aa:	0b d0       	rcall	.+22     	; 0x27c2 <__mulsf3x>
    27ac:	c0 cf       	rjmp	.-128    	; 0x272e <__fp_round>
    27ae:	b1 df       	rcall	.-158    	; 0x2712 <__fp_pscA>
    27b0:	28 f0       	brcs	.+10     	; 0x27bc <__mulsf3+0x12>
    27b2:	b6 df       	rcall	.-148    	; 0x2720 <__fp_pscB>
    27b4:	18 f0       	brcs	.+6      	; 0x27bc <__mulsf3+0x12>
    27b6:	95 23       	and	r25, r21
    27b8:	09 f0       	breq	.+2      	; 0x27bc <__mulsf3+0x12>
    27ba:	a2 cf       	rjmp	.-188    	; 0x2700 <__fp_inf>
    27bc:	a7 cf       	rjmp	.-178    	; 0x270c <__fp_nan>
    27be:	11 24       	eor	r1, r1
    27c0:	ea cf       	rjmp	.-44     	; 0x2796 <__fp_szero>

000027c2 <__mulsf3x>:
    27c2:	c6 df       	rcall	.-116    	; 0x2750 <__fp_split3>
    27c4:	a0 f3       	brcs	.-24     	; 0x27ae <__mulsf3+0x4>

000027c6 <__mulsf3_pse>:
    27c6:	95 9f       	mul	r25, r21
    27c8:	d1 f3       	breq	.-12     	; 0x27be <__mulsf3+0x14>
    27ca:	95 0f       	add	r25, r21
    27cc:	50 e0       	ldi	r21, 0x00	; 0
    27ce:	55 1f       	adc	r21, r21
    27d0:	62 9f       	mul	r22, r18
    27d2:	f0 01       	movw	r30, r0
    27d4:	72 9f       	mul	r23, r18
    27d6:	bb 27       	eor	r27, r27
    27d8:	f0 0d       	add	r31, r0
    27da:	b1 1d       	adc	r27, r1
    27dc:	63 9f       	mul	r22, r19
    27de:	aa 27       	eor	r26, r26
    27e0:	f0 0d       	add	r31, r0
    27e2:	b1 1d       	adc	r27, r1
    27e4:	aa 1f       	adc	r26, r26
    27e6:	64 9f       	mul	r22, r20
    27e8:	66 27       	eor	r22, r22
    27ea:	b0 0d       	add	r27, r0
    27ec:	a1 1d       	adc	r26, r1
    27ee:	66 1f       	adc	r22, r22
    27f0:	82 9f       	mul	r24, r18
    27f2:	22 27       	eor	r18, r18
    27f4:	b0 0d       	add	r27, r0
    27f6:	a1 1d       	adc	r26, r1
    27f8:	62 1f       	adc	r22, r18
    27fa:	73 9f       	mul	r23, r19
    27fc:	b0 0d       	add	r27, r0
    27fe:	a1 1d       	adc	r26, r1
    2800:	62 1f       	adc	r22, r18
    2802:	83 9f       	mul	r24, r19
    2804:	a0 0d       	add	r26, r0
    2806:	61 1d       	adc	r22, r1
    2808:	22 1f       	adc	r18, r18
    280a:	74 9f       	mul	r23, r20
    280c:	33 27       	eor	r19, r19
    280e:	a0 0d       	add	r26, r0
    2810:	61 1d       	adc	r22, r1
    2812:	23 1f       	adc	r18, r19
    2814:	84 9f       	mul	r24, r20
    2816:	60 0d       	add	r22, r0
    2818:	21 1d       	adc	r18, r1
    281a:	82 2f       	mov	r24, r18
    281c:	76 2f       	mov	r23, r22
    281e:	6a 2f       	mov	r22, r26
    2820:	11 24       	eor	r1, r1
    2822:	9f 57       	subi	r25, 0x7F	; 127
    2824:	50 40       	sbci	r21, 0x00	; 0
    2826:	8a f0       	brmi	.+34     	; 0x284a <__mulsf3_pse+0x84>
    2828:	e1 f0       	breq	.+56     	; 0x2862 <__mulsf3_pse+0x9c>
    282a:	88 23       	and	r24, r24
    282c:	4a f0       	brmi	.+18     	; 0x2840 <__mulsf3_pse+0x7a>
    282e:	ee 0f       	add	r30, r30
    2830:	ff 1f       	adc	r31, r31
    2832:	bb 1f       	adc	r27, r27
    2834:	66 1f       	adc	r22, r22
    2836:	77 1f       	adc	r23, r23
    2838:	88 1f       	adc	r24, r24
    283a:	91 50       	subi	r25, 0x01	; 1
    283c:	50 40       	sbci	r21, 0x00	; 0
    283e:	a9 f7       	brne	.-22     	; 0x282a <__mulsf3_pse+0x64>
    2840:	9e 3f       	cpi	r25, 0xFE	; 254
    2842:	51 05       	cpc	r21, r1
    2844:	70 f0       	brcs	.+28     	; 0x2862 <__mulsf3_pse+0x9c>
    2846:	5c cf       	rjmp	.-328    	; 0x2700 <__fp_inf>
    2848:	a6 cf       	rjmp	.-180    	; 0x2796 <__fp_szero>
    284a:	5f 3f       	cpi	r21, 0xFF	; 255
    284c:	ec f3       	brlt	.-6      	; 0x2848 <__mulsf3_pse+0x82>
    284e:	98 3e       	cpi	r25, 0xE8	; 232
    2850:	dc f3       	brlt	.-10     	; 0x2848 <__mulsf3_pse+0x82>
    2852:	86 95       	lsr	r24
    2854:	77 95       	ror	r23
    2856:	67 95       	ror	r22
    2858:	b7 95       	ror	r27
    285a:	f7 95       	ror	r31
    285c:	e7 95       	ror	r30
    285e:	9f 5f       	subi	r25, 0xFF	; 255
    2860:	c1 f7       	brne	.-16     	; 0x2852 <__mulsf3_pse+0x8c>
    2862:	fe 2b       	or	r31, r30
    2864:	88 0f       	add	r24, r24
    2866:	91 1d       	adc	r25, r1
    2868:	96 95       	lsr	r25
    286a:	87 95       	ror	r24
    286c:	97 f9       	bld	r25, 7
    286e:	08 95       	ret

00002870 <_exit>:
    2870:	f8 94       	cli

00002872 <__stop_program>:
    2872:	ff cf       	rjmp	.-2      	; 0x2872 <__stop_program>


Trial2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d18  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000320  08007ee8  08007ee8  00017ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008208  08008208  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  08008208  08008208  00018208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008210  08008210  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008210  08008210  00018210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008214  08008214  00018214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08008218  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000466c  200001d8  080083f0  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004844  080083f0  00024844  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014577  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002cb2  00000000  00000000  0003477f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010f0  00000000  00000000  00037438  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f98  00000000  00000000  00038528  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022c41  00000000  00000000  000394c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000def2  00000000  00000000  0005c101  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d806c  00000000  00000000  00069ff3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014205f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f28  00000000  00000000  001420dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007ed0 	.word	0x08007ed0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	08007ed0 	.word	0x08007ed0

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b972 	b.w	80005dc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	4688      	mov	r8, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14b      	bne.n	80003b6 <__udivmoddi4+0xa6>
 800031e:	428a      	cmp	r2, r1
 8000320:	4615      	mov	r5, r2
 8000322:	d967      	bls.n	80003f4 <__udivmoddi4+0xe4>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0720 	rsb	r7, r2, #32
 800032e:	fa01 f302 	lsl.w	r3, r1, r2
 8000332:	fa20 f707 	lsr.w	r7, r0, r7
 8000336:	4095      	lsls	r5, r2
 8000338:	ea47 0803 	orr.w	r8, r7, r3
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbb8 f7fe 	udiv	r7, r8, lr
 8000348:	fa1f fc85 	uxth.w	ip, r5
 800034c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000350:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000354:	fb07 f10c 	mul.w	r1, r7, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000362:	f080 811b 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8118 	bls.w	800059c <__udivmoddi4+0x28c>
 800036c:	3f02      	subs	r7, #2
 800036e:	442b      	add	r3, r5
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0fe 	udiv	r0, r3, lr
 8000378:	fb0e 3310 	mls	r3, lr, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fc0c 	mul.w	ip, r0, ip
 8000384:	45a4      	cmp	ip, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	192c      	adds	r4, r5, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038e:	f080 8107 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000392:	45a4      	cmp	ip, r4
 8000394:	f240 8104 	bls.w	80005a0 <__udivmoddi4+0x290>
 8000398:	3802      	subs	r0, #2
 800039a:	442c      	add	r4, r5
 800039c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a0:	eba4 040c 	sub.w	r4, r4, ip
 80003a4:	2700      	movs	r7, #0
 80003a6:	b11e      	cbz	r6, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c6 4300 	strd	r4, r3, [r6]
 80003b0:	4639      	mov	r1, r7
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0xbe>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80eb 	beq.w	8000596 <__udivmoddi4+0x286>
 80003c0:	2700      	movs	r7, #0
 80003c2:	e9c6 0100 	strd	r0, r1, [r6]
 80003c6:	4638      	mov	r0, r7
 80003c8:	4639      	mov	r1, r7
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f783 	clz	r7, r3
 80003d2:	2f00      	cmp	r7, #0
 80003d4:	d147      	bne.n	8000466 <__udivmoddi4+0x156>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0xd0>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80fa 	bhi.w	80005d4 <__udivmoddi4+0x2c4>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0303 	sbc.w	r3, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	4698      	mov	r8, r3
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d0e0      	beq.n	80003b0 <__udivmoddi4+0xa0>
 80003ee:	e9c6 4800 	strd	r4, r8, [r6]
 80003f2:	e7dd      	b.n	80003b0 <__udivmoddi4+0xa0>
 80003f4:	b902      	cbnz	r2, 80003f8 <__udivmoddi4+0xe8>
 80003f6:	deff      	udf	#255	; 0xff
 80003f8:	fab2 f282 	clz	r2, r2
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f040 808f 	bne.w	8000520 <__udivmoddi4+0x210>
 8000402:	1b49      	subs	r1, r1, r5
 8000404:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000408:	fa1f f885 	uxth.w	r8, r5
 800040c:	2701      	movs	r7, #1
 800040e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fb0e 111c 	mls	r1, lr, ip, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb08 f10c 	mul.w	r1, r8, ip
 8000420:	4299      	cmp	r1, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x124>
 8000424:	18eb      	adds	r3, r5, r3
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4299      	cmp	r1, r3
 800042e:	f200 80cd 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 8000432:	4684      	mov	ip, r0
 8000434:	1a59      	subs	r1, r3, r1
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000440:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x14c>
 800044c:	192c      	adds	r4, r5, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x14a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80b6 	bhi.w	80005c6 <__udivmoddi4+0x2b6>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e79f      	b.n	80003a6 <__udivmoddi4+0x96>
 8000466:	f1c7 0c20 	rsb	ip, r7, #32
 800046a:	40bb      	lsls	r3, r7
 800046c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000470:	ea4e 0e03 	orr.w	lr, lr, r3
 8000474:	fa01 f407 	lsl.w	r4, r1, r7
 8000478:	fa20 f50c 	lsr.w	r5, r0, ip
 800047c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000480:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000484:	4325      	orrs	r5, r4
 8000486:	fbb3 f9f8 	udiv	r9, r3, r8
 800048a:	0c2c      	lsrs	r4, r5, #16
 800048c:	fb08 3319 	mls	r3, r8, r9, r3
 8000490:	fa1f fa8e 	uxth.w	sl, lr
 8000494:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000498:	fb09 f40a 	mul.w	r4, r9, sl
 800049c:	429c      	cmp	r4, r3
 800049e:	fa02 f207 	lsl.w	r2, r2, r7
 80004a2:	fa00 f107 	lsl.w	r1, r0, r7
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1e 0303 	adds.w	r3, lr, r3
 80004ac:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004b0:	f080 8087 	bcs.w	80005c2 <__udivmoddi4+0x2b2>
 80004b4:	429c      	cmp	r4, r3
 80004b6:	f240 8084 	bls.w	80005c2 <__udivmoddi4+0x2b2>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4473      	add	r3, lr
 80004c0:	1b1b      	subs	r3, r3, r4
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3310 	mls	r3, r8, r0, r3
 80004cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004d4:	45a2      	cmp	sl, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1e 0404 	adds.w	r4, lr, r4
 80004dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004e0:	d26b      	bcs.n	80005ba <__udivmoddi4+0x2aa>
 80004e2:	45a2      	cmp	sl, r4
 80004e4:	d969      	bls.n	80005ba <__udivmoddi4+0x2aa>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4474      	add	r4, lr
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	fba0 8902 	umull	r8, r9, r0, r2
 80004f2:	eba4 040a 	sub.w	r4, r4, sl
 80004f6:	454c      	cmp	r4, r9
 80004f8:	46c2      	mov	sl, r8
 80004fa:	464b      	mov	r3, r9
 80004fc:	d354      	bcc.n	80005a8 <__udivmoddi4+0x298>
 80004fe:	d051      	beq.n	80005a4 <__udivmoddi4+0x294>
 8000500:	2e00      	cmp	r6, #0
 8000502:	d069      	beq.n	80005d8 <__udivmoddi4+0x2c8>
 8000504:	ebb1 050a 	subs.w	r5, r1, sl
 8000508:	eb64 0403 	sbc.w	r4, r4, r3
 800050c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000510:	40fd      	lsrs	r5, r7
 8000512:	40fc      	lsrs	r4, r7
 8000514:	ea4c 0505 	orr.w	r5, ip, r5
 8000518:	e9c6 5400 	strd	r5, r4, [r6]
 800051c:	2700      	movs	r7, #0
 800051e:	e747      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f703 	lsr.w	r7, r0, r3
 8000528:	4095      	lsls	r5, r2
 800052a:	fa01 f002 	lsl.w	r0, r1, r2
 800052e:	fa21 f303 	lsr.w	r3, r1, r3
 8000532:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000536:	4338      	orrs	r0, r7
 8000538:	0c01      	lsrs	r1, r0, #16
 800053a:	fbb3 f7fe 	udiv	r7, r3, lr
 800053e:	fa1f f885 	uxth.w	r8, r5
 8000542:	fb0e 3317 	mls	r3, lr, r7, r3
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb07 f308 	mul.w	r3, r7, r8
 800054e:	428b      	cmp	r3, r1
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x256>
 8000556:	1869      	adds	r1, r5, r1
 8000558:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800055c:	d22f      	bcs.n	80005be <__udivmoddi4+0x2ae>
 800055e:	428b      	cmp	r3, r1
 8000560:	d92d      	bls.n	80005be <__udivmoddi4+0x2ae>
 8000562:	3f02      	subs	r7, #2
 8000564:	4429      	add	r1, r5
 8000566:	1acb      	subs	r3, r1, r3
 8000568:	b281      	uxth	r1, r0
 800056a:	fbb3 f0fe 	udiv	r0, r3, lr
 800056e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000572:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000576:	fb00 f308 	mul.w	r3, r0, r8
 800057a:	428b      	cmp	r3, r1
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x27e>
 800057e:	1869      	adds	r1, r5, r1
 8000580:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000584:	d217      	bcs.n	80005b6 <__udivmoddi4+0x2a6>
 8000586:	428b      	cmp	r3, r1
 8000588:	d915      	bls.n	80005b6 <__udivmoddi4+0x2a6>
 800058a:	3802      	subs	r0, #2
 800058c:	4429      	add	r1, r5
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000594:	e73b      	b.n	800040e <__udivmoddi4+0xfe>
 8000596:	4637      	mov	r7, r6
 8000598:	4630      	mov	r0, r6
 800059a:	e709      	b.n	80003b0 <__udivmoddi4+0xa0>
 800059c:	4607      	mov	r7, r0
 800059e:	e6e7      	b.n	8000370 <__udivmoddi4+0x60>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6fb      	b.n	800039c <__udivmoddi4+0x8c>
 80005a4:	4541      	cmp	r1, r8
 80005a6:	d2ab      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005ac:	eb69 020e 	sbc.w	r2, r9, lr
 80005b0:	3801      	subs	r0, #1
 80005b2:	4613      	mov	r3, r2
 80005b4:	e7a4      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b6:	4660      	mov	r0, ip
 80005b8:	e7e9      	b.n	800058e <__udivmoddi4+0x27e>
 80005ba:	4618      	mov	r0, r3
 80005bc:	e795      	b.n	80004ea <__udivmoddi4+0x1da>
 80005be:	4667      	mov	r7, ip
 80005c0:	e7d1      	b.n	8000566 <__udivmoddi4+0x256>
 80005c2:	4681      	mov	r9, r0
 80005c4:	e77c      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c6:	3802      	subs	r0, #2
 80005c8:	442c      	add	r4, r5
 80005ca:	e747      	b.n	800045c <__udivmoddi4+0x14c>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	442b      	add	r3, r5
 80005d2:	e72f      	b.n	8000434 <__udivmoddi4+0x124>
 80005d4:	4638      	mov	r0, r7
 80005d6:	e708      	b.n	80003ea <__udivmoddi4+0xda>
 80005d8:	4637      	mov	r7, r6
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0xa0>

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005e4:	4b0e      	ldr	r3, [pc, #56]	; (8000620 <HAL_Init+0x40>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a0d      	ldr	r2, [pc, #52]	; (8000620 <HAL_Init+0x40>)
 80005ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005f0:	4b0b      	ldr	r3, [pc, #44]	; (8000620 <HAL_Init+0x40>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a0a      	ldr	r2, [pc, #40]	; (8000620 <HAL_Init+0x40>)
 80005f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005fc:	4b08      	ldr	r3, [pc, #32]	; (8000620 <HAL_Init+0x40>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a07      	ldr	r2, [pc, #28]	; (8000620 <HAL_Init+0x40>)
 8000602:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000606:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000608:	2003      	movs	r0, #3
 800060a:	f000 f8c4 	bl	8000796 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800060e:	2000      	movs	r0, #0
 8000610:	f006 f9f2 	bl	80069f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000614:	f006 f974 	bl	8006900 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000618:	2300      	movs	r3, #0
}
 800061a:	4618      	mov	r0, r3
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40023c00 	.word	0x40023c00

08000624 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  return uwTick;
 8000628:	4b03      	ldr	r3, [pc, #12]	; (8000638 <HAL_GetTick+0x14>)
 800062a:	681b      	ldr	r3, [r3, #0]
}
 800062c:	4618      	mov	r0, r3
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	200046f4 	.word	0x200046f4

0800063c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800063c:	b480      	push	{r7}
 800063e:	b085      	sub	sp, #20
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	f003 0307 	and.w	r3, r3, #7
 800064a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800064c:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <__NVIC_SetPriorityGrouping+0x44>)
 800064e:	68db      	ldr	r3, [r3, #12]
 8000650:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000652:	68ba      	ldr	r2, [r7, #8]
 8000654:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000658:	4013      	ands	r3, r2
 800065a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000664:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800066c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800066e:	4a04      	ldr	r2, [pc, #16]	; (8000680 <__NVIC_SetPriorityGrouping+0x44>)
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	60d3      	str	r3, [r2, #12]
}
 8000674:	bf00      	nop
 8000676:	3714      	adds	r7, #20
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr
 8000680:	e000ed00 	.word	0xe000ed00

08000684 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000688:	4b04      	ldr	r3, [pc, #16]	; (800069c <__NVIC_GetPriorityGrouping+0x18>)
 800068a:	68db      	ldr	r3, [r3, #12]
 800068c:	0a1b      	lsrs	r3, r3, #8
 800068e:	f003 0307 	and.w	r3, r3, #7
}
 8000692:	4618      	mov	r0, r3
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	e000ed00 	.word	0xe000ed00

080006a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	db0b      	blt.n	80006ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006b2:	79fb      	ldrb	r3, [r7, #7]
 80006b4:	f003 021f 	and.w	r2, r3, #31
 80006b8:	4907      	ldr	r1, [pc, #28]	; (80006d8 <__NVIC_EnableIRQ+0x38>)
 80006ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006be:	095b      	lsrs	r3, r3, #5
 80006c0:	2001      	movs	r0, #1
 80006c2:	fa00 f202 	lsl.w	r2, r0, r2
 80006c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006ca:	bf00      	nop
 80006cc:	370c      	adds	r7, #12
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	e000e100 	.word	0xe000e100

080006dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	6039      	str	r1, [r7, #0]
 80006e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	db0a      	blt.n	8000706 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	b2da      	uxtb	r2, r3
 80006f4:	490c      	ldr	r1, [pc, #48]	; (8000728 <__NVIC_SetPriority+0x4c>)
 80006f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006fa:	0112      	lsls	r2, r2, #4
 80006fc:	b2d2      	uxtb	r2, r2
 80006fe:	440b      	add	r3, r1
 8000700:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000704:	e00a      	b.n	800071c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	b2da      	uxtb	r2, r3
 800070a:	4908      	ldr	r1, [pc, #32]	; (800072c <__NVIC_SetPriority+0x50>)
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	f003 030f 	and.w	r3, r3, #15
 8000712:	3b04      	subs	r3, #4
 8000714:	0112      	lsls	r2, r2, #4
 8000716:	b2d2      	uxtb	r2, r2
 8000718:	440b      	add	r3, r1
 800071a:	761a      	strb	r2, [r3, #24]
}
 800071c:	bf00      	nop
 800071e:	370c      	adds	r7, #12
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr
 8000728:	e000e100 	.word	0xe000e100
 800072c:	e000ed00 	.word	0xe000ed00

08000730 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000730:	b480      	push	{r7}
 8000732:	b089      	sub	sp, #36	; 0x24
 8000734:	af00      	add	r7, sp, #0
 8000736:	60f8      	str	r0, [r7, #12]
 8000738:	60b9      	str	r1, [r7, #8]
 800073a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	f003 0307 	and.w	r3, r3, #7
 8000742:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000744:	69fb      	ldr	r3, [r7, #28]
 8000746:	f1c3 0307 	rsb	r3, r3, #7
 800074a:	2b04      	cmp	r3, #4
 800074c:	bf28      	it	cs
 800074e:	2304      	movcs	r3, #4
 8000750:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000752:	69fb      	ldr	r3, [r7, #28]
 8000754:	3304      	adds	r3, #4
 8000756:	2b06      	cmp	r3, #6
 8000758:	d902      	bls.n	8000760 <NVIC_EncodePriority+0x30>
 800075a:	69fb      	ldr	r3, [r7, #28]
 800075c:	3b03      	subs	r3, #3
 800075e:	e000      	b.n	8000762 <NVIC_EncodePriority+0x32>
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000764:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000768:	69bb      	ldr	r3, [r7, #24]
 800076a:	fa02 f303 	lsl.w	r3, r2, r3
 800076e:	43da      	mvns	r2, r3
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	401a      	ands	r2, r3
 8000774:	697b      	ldr	r3, [r7, #20]
 8000776:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000778:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800077c:	697b      	ldr	r3, [r7, #20]
 800077e:	fa01 f303 	lsl.w	r3, r1, r3
 8000782:	43d9      	mvns	r1, r3
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000788:	4313      	orrs	r3, r2
         );
}
 800078a:	4618      	mov	r0, r3
 800078c:	3724      	adds	r7, #36	; 0x24
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr

08000796 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000796:	b580      	push	{r7, lr}
 8000798:	b082      	sub	sp, #8
 800079a:	af00      	add	r7, sp, #0
 800079c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800079e:	6878      	ldr	r0, [r7, #4]
 80007a0:	f7ff ff4c 	bl	800063c <__NVIC_SetPriorityGrouping>
}
 80007a4:	bf00      	nop
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}

080007ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b086      	sub	sp, #24
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	4603      	mov	r3, r0
 80007b4:	60b9      	str	r1, [r7, #8]
 80007b6:	607a      	str	r2, [r7, #4]
 80007b8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007ba:	2300      	movs	r3, #0
 80007bc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007be:	f7ff ff61 	bl	8000684 <__NVIC_GetPriorityGrouping>
 80007c2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007c4:	687a      	ldr	r2, [r7, #4]
 80007c6:	68b9      	ldr	r1, [r7, #8]
 80007c8:	6978      	ldr	r0, [r7, #20]
 80007ca:	f7ff ffb1 	bl	8000730 <NVIC_EncodePriority>
 80007ce:	4602      	mov	r2, r0
 80007d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007d4:	4611      	mov	r1, r2
 80007d6:	4618      	mov	r0, r3
 80007d8:	f7ff ff80 	bl	80006dc <__NVIC_SetPriority>
}
 80007dc:	bf00      	nop
 80007de:	3718      	adds	r7, #24
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	4603      	mov	r3, r0
 80007ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff ff54 	bl	80006a0 <__NVIC_EnableIRQ>
}
 80007f8:	bf00      	nop
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800080e:	b2db      	uxtb	r3, r3
 8000810:	2b02      	cmp	r3, #2
 8000812:	d004      	beq.n	800081e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	2280      	movs	r2, #128	; 0x80
 8000818:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800081a:	2301      	movs	r3, #1
 800081c:	e00c      	b.n	8000838 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2205      	movs	r2, #5
 8000822:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	681a      	ldr	r2, [r3, #0]
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f022 0201 	bic.w	r2, r2, #1
 8000834:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000836:	2300      	movs	r3, #0
}
 8000838:	4618      	mov	r0, r3
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr

08000844 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000844:	b480      	push	{r7}
 8000846:	b089      	sub	sp, #36	; 0x24
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800084e:	2300      	movs	r3, #0
 8000850:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000852:	2300      	movs	r3, #0
 8000854:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000856:	2300      	movs	r3, #0
 8000858:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800085a:	2300      	movs	r3, #0
 800085c:	61fb      	str	r3, [r7, #28]
 800085e:	e165      	b.n	8000b2c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000860:	2201      	movs	r2, #1
 8000862:	69fb      	ldr	r3, [r7, #28]
 8000864:	fa02 f303 	lsl.w	r3, r2, r3
 8000868:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	697a      	ldr	r2, [r7, #20]
 8000870:	4013      	ands	r3, r2
 8000872:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000874:	693a      	ldr	r2, [r7, #16]
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	429a      	cmp	r2, r3
 800087a:	f040 8154 	bne.w	8000b26 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	685b      	ldr	r3, [r3, #4]
 8000882:	2b01      	cmp	r3, #1
 8000884:	d00b      	beq.n	800089e <HAL_GPIO_Init+0x5a>
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	685b      	ldr	r3, [r3, #4]
 800088a:	2b02      	cmp	r3, #2
 800088c:	d007      	beq.n	800089e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000892:	2b11      	cmp	r3, #17
 8000894:	d003      	beq.n	800089e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	685b      	ldr	r3, [r3, #4]
 800089a:	2b12      	cmp	r3, #18
 800089c:	d130      	bne.n	8000900 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	689b      	ldr	r3, [r3, #8]
 80008a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80008a4:	69fb      	ldr	r3, [r7, #28]
 80008a6:	005b      	lsls	r3, r3, #1
 80008a8:	2203      	movs	r2, #3
 80008aa:	fa02 f303 	lsl.w	r3, r2, r3
 80008ae:	43db      	mvns	r3, r3
 80008b0:	69ba      	ldr	r2, [r7, #24]
 80008b2:	4013      	ands	r3, r2
 80008b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	68da      	ldr	r2, [r3, #12]
 80008ba:	69fb      	ldr	r3, [r7, #28]
 80008bc:	005b      	lsls	r3, r3, #1
 80008be:	fa02 f303 	lsl.w	r3, r2, r3
 80008c2:	69ba      	ldr	r2, [r7, #24]
 80008c4:	4313      	orrs	r3, r2
 80008c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	69ba      	ldr	r2, [r7, #24]
 80008cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008d4:	2201      	movs	r2, #1
 80008d6:	69fb      	ldr	r3, [r7, #28]
 80008d8:	fa02 f303 	lsl.w	r3, r2, r3
 80008dc:	43db      	mvns	r3, r3
 80008de:	69ba      	ldr	r2, [r7, #24]
 80008e0:	4013      	ands	r3, r2
 80008e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	685b      	ldr	r3, [r3, #4]
 80008e8:	091b      	lsrs	r3, r3, #4
 80008ea:	f003 0201 	and.w	r2, r3, #1
 80008ee:	69fb      	ldr	r3, [r7, #28]
 80008f0:	fa02 f303 	lsl.w	r3, r2, r3
 80008f4:	69ba      	ldr	r2, [r7, #24]
 80008f6:	4313      	orrs	r3, r2
 80008f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	69ba      	ldr	r2, [r7, #24]
 80008fe:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	68db      	ldr	r3, [r3, #12]
 8000904:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000906:	69fb      	ldr	r3, [r7, #28]
 8000908:	005b      	lsls	r3, r3, #1
 800090a:	2203      	movs	r2, #3
 800090c:	fa02 f303 	lsl.w	r3, r2, r3
 8000910:	43db      	mvns	r3, r3
 8000912:	69ba      	ldr	r2, [r7, #24]
 8000914:	4013      	ands	r3, r2
 8000916:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	689a      	ldr	r2, [r3, #8]
 800091c:	69fb      	ldr	r3, [r7, #28]
 800091e:	005b      	lsls	r3, r3, #1
 8000920:	fa02 f303 	lsl.w	r3, r2, r3
 8000924:	69ba      	ldr	r2, [r7, #24]
 8000926:	4313      	orrs	r3, r2
 8000928:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	69ba      	ldr	r2, [r7, #24]
 800092e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	2b02      	cmp	r3, #2
 8000936:	d003      	beq.n	8000940 <HAL_GPIO_Init+0xfc>
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	2b12      	cmp	r3, #18
 800093e:	d123      	bne.n	8000988 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000940:	69fb      	ldr	r3, [r7, #28]
 8000942:	08da      	lsrs	r2, r3, #3
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	3208      	adds	r2, #8
 8000948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800094c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	f003 0307 	and.w	r3, r3, #7
 8000954:	009b      	lsls	r3, r3, #2
 8000956:	220f      	movs	r2, #15
 8000958:	fa02 f303 	lsl.w	r3, r2, r3
 800095c:	43db      	mvns	r3, r3
 800095e:	69ba      	ldr	r2, [r7, #24]
 8000960:	4013      	ands	r3, r2
 8000962:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	691a      	ldr	r2, [r3, #16]
 8000968:	69fb      	ldr	r3, [r7, #28]
 800096a:	f003 0307 	and.w	r3, r3, #7
 800096e:	009b      	lsls	r3, r3, #2
 8000970:	fa02 f303 	lsl.w	r3, r2, r3
 8000974:	69ba      	ldr	r2, [r7, #24]
 8000976:	4313      	orrs	r3, r2
 8000978:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800097a:	69fb      	ldr	r3, [r7, #28]
 800097c:	08da      	lsrs	r2, r3, #3
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	3208      	adds	r2, #8
 8000982:	69b9      	ldr	r1, [r7, #24]
 8000984:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800098e:	69fb      	ldr	r3, [r7, #28]
 8000990:	005b      	lsls	r3, r3, #1
 8000992:	2203      	movs	r2, #3
 8000994:	fa02 f303 	lsl.w	r3, r2, r3
 8000998:	43db      	mvns	r3, r3
 800099a:	69ba      	ldr	r2, [r7, #24]
 800099c:	4013      	ands	r3, r2
 800099e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	f003 0203 	and.w	r2, r3, #3
 80009a8:	69fb      	ldr	r3, [r7, #28]
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	fa02 f303 	lsl.w	r3, r2, r3
 80009b0:	69ba      	ldr	r2, [r7, #24]
 80009b2:	4313      	orrs	r3, r2
 80009b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	69ba      	ldr	r2, [r7, #24]
 80009ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	685b      	ldr	r3, [r3, #4]
 80009c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	f000 80ae 	beq.w	8000b26 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	4b5c      	ldr	r3, [pc, #368]	; (8000b40 <HAL_GPIO_Init+0x2fc>)
 80009d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d2:	4a5b      	ldr	r2, [pc, #364]	; (8000b40 <HAL_GPIO_Init+0x2fc>)
 80009d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d8:	6453      	str	r3, [r2, #68]	; 0x44
 80009da:	4b59      	ldr	r3, [pc, #356]	; (8000b40 <HAL_GPIO_Init+0x2fc>)
 80009dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009e6:	4a57      	ldr	r2, [pc, #348]	; (8000b44 <HAL_GPIO_Init+0x300>)
 80009e8:	69fb      	ldr	r3, [r7, #28]
 80009ea:	089b      	lsrs	r3, r3, #2
 80009ec:	3302      	adds	r3, #2
 80009ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009f4:	69fb      	ldr	r3, [r7, #28]
 80009f6:	f003 0303 	and.w	r3, r3, #3
 80009fa:	009b      	lsls	r3, r3, #2
 80009fc:	220f      	movs	r2, #15
 80009fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000a02:	43db      	mvns	r3, r3
 8000a04:	69ba      	ldr	r2, [r7, #24]
 8000a06:	4013      	ands	r3, r2
 8000a08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4a4e      	ldr	r2, [pc, #312]	; (8000b48 <HAL_GPIO_Init+0x304>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d025      	beq.n	8000a5e <HAL_GPIO_Init+0x21a>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4a4d      	ldr	r2, [pc, #308]	; (8000b4c <HAL_GPIO_Init+0x308>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d01f      	beq.n	8000a5a <HAL_GPIO_Init+0x216>
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4a4c      	ldr	r2, [pc, #304]	; (8000b50 <HAL_GPIO_Init+0x30c>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d019      	beq.n	8000a56 <HAL_GPIO_Init+0x212>
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4a4b      	ldr	r2, [pc, #300]	; (8000b54 <HAL_GPIO_Init+0x310>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d013      	beq.n	8000a52 <HAL_GPIO_Init+0x20e>
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4a4a      	ldr	r2, [pc, #296]	; (8000b58 <HAL_GPIO_Init+0x314>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d00d      	beq.n	8000a4e <HAL_GPIO_Init+0x20a>
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	4a49      	ldr	r2, [pc, #292]	; (8000b5c <HAL_GPIO_Init+0x318>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d007      	beq.n	8000a4a <HAL_GPIO_Init+0x206>
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4a48      	ldr	r2, [pc, #288]	; (8000b60 <HAL_GPIO_Init+0x31c>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d101      	bne.n	8000a46 <HAL_GPIO_Init+0x202>
 8000a42:	2306      	movs	r3, #6
 8000a44:	e00c      	b.n	8000a60 <HAL_GPIO_Init+0x21c>
 8000a46:	2307      	movs	r3, #7
 8000a48:	e00a      	b.n	8000a60 <HAL_GPIO_Init+0x21c>
 8000a4a:	2305      	movs	r3, #5
 8000a4c:	e008      	b.n	8000a60 <HAL_GPIO_Init+0x21c>
 8000a4e:	2304      	movs	r3, #4
 8000a50:	e006      	b.n	8000a60 <HAL_GPIO_Init+0x21c>
 8000a52:	2303      	movs	r3, #3
 8000a54:	e004      	b.n	8000a60 <HAL_GPIO_Init+0x21c>
 8000a56:	2302      	movs	r3, #2
 8000a58:	e002      	b.n	8000a60 <HAL_GPIO_Init+0x21c>
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e000      	b.n	8000a60 <HAL_GPIO_Init+0x21c>
 8000a5e:	2300      	movs	r3, #0
 8000a60:	69fa      	ldr	r2, [r7, #28]
 8000a62:	f002 0203 	and.w	r2, r2, #3
 8000a66:	0092      	lsls	r2, r2, #2
 8000a68:	4093      	lsls	r3, r2
 8000a6a:	69ba      	ldr	r2, [r7, #24]
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a70:	4934      	ldr	r1, [pc, #208]	; (8000b44 <HAL_GPIO_Init+0x300>)
 8000a72:	69fb      	ldr	r3, [r7, #28]
 8000a74:	089b      	lsrs	r3, r3, #2
 8000a76:	3302      	adds	r3, #2
 8000a78:	69ba      	ldr	r2, [r7, #24]
 8000a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a7e:	4b39      	ldr	r3, [pc, #228]	; (8000b64 <HAL_GPIO_Init+0x320>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a84:	693b      	ldr	r3, [r7, #16]
 8000a86:	43db      	mvns	r3, r3
 8000a88:	69ba      	ldr	r2, [r7, #24]
 8000a8a:	4013      	ands	r3, r2
 8000a8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d003      	beq.n	8000aa2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000a9a:	69ba      	ldr	r2, [r7, #24]
 8000a9c:	693b      	ldr	r3, [r7, #16]
 8000a9e:	4313      	orrs	r3, r2
 8000aa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000aa2:	4a30      	ldr	r2, [pc, #192]	; (8000b64 <HAL_GPIO_Init+0x320>)
 8000aa4:	69bb      	ldr	r3, [r7, #24]
 8000aa6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000aa8:	4b2e      	ldr	r3, [pc, #184]	; (8000b64 <HAL_GPIO_Init+0x320>)
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000aae:	693b      	ldr	r3, [r7, #16]
 8000ab0:	43db      	mvns	r3, r3
 8000ab2:	69ba      	ldr	r2, [r7, #24]
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d003      	beq.n	8000acc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000ac4:	69ba      	ldr	r2, [r7, #24]
 8000ac6:	693b      	ldr	r3, [r7, #16]
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000acc:	4a25      	ldr	r2, [pc, #148]	; (8000b64 <HAL_GPIO_Init+0x320>)
 8000ace:	69bb      	ldr	r3, [r7, #24]
 8000ad0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ad2:	4b24      	ldr	r3, [pc, #144]	; (8000b64 <HAL_GPIO_Init+0x320>)
 8000ad4:	689b      	ldr	r3, [r3, #8]
 8000ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ad8:	693b      	ldr	r3, [r7, #16]
 8000ada:	43db      	mvns	r3, r3
 8000adc:	69ba      	ldr	r2, [r7, #24]
 8000ade:	4013      	ands	r3, r2
 8000ae0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d003      	beq.n	8000af6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000aee:	69ba      	ldr	r2, [r7, #24]
 8000af0:	693b      	ldr	r3, [r7, #16]
 8000af2:	4313      	orrs	r3, r2
 8000af4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000af6:	4a1b      	ldr	r2, [pc, #108]	; (8000b64 <HAL_GPIO_Init+0x320>)
 8000af8:	69bb      	ldr	r3, [r7, #24]
 8000afa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000afc:	4b19      	ldr	r3, [pc, #100]	; (8000b64 <HAL_GPIO_Init+0x320>)
 8000afe:	68db      	ldr	r3, [r3, #12]
 8000b00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b02:	693b      	ldr	r3, [r7, #16]
 8000b04:	43db      	mvns	r3, r3
 8000b06:	69ba      	ldr	r2, [r7, #24]
 8000b08:	4013      	ands	r3, r2
 8000b0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d003      	beq.n	8000b20 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000b18:	69ba      	ldr	r2, [r7, #24]
 8000b1a:	693b      	ldr	r3, [r7, #16]
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000b20:	4a10      	ldr	r2, [pc, #64]	; (8000b64 <HAL_GPIO_Init+0x320>)
 8000b22:	69bb      	ldr	r3, [r7, #24]
 8000b24:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b26:	69fb      	ldr	r3, [r7, #28]
 8000b28:	3301      	adds	r3, #1
 8000b2a:	61fb      	str	r3, [r7, #28]
 8000b2c:	69fb      	ldr	r3, [r7, #28]
 8000b2e:	2b0f      	cmp	r3, #15
 8000b30:	f67f ae96 	bls.w	8000860 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b34:	bf00      	nop
 8000b36:	3724      	adds	r7, #36	; 0x24
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40013800 	.word	0x40013800
 8000b48:	40020000 	.word	0x40020000
 8000b4c:	40020400 	.word	0x40020400
 8000b50:	40020800 	.word	0x40020800
 8000b54:	40020c00 	.word	0x40020c00
 8000b58:	40021000 	.word	0x40021000
 8000b5c:	40021400 	.word	0x40021400
 8000b60:	40021800 	.word	0x40021800
 8000b64:	40013c00 	.word	0x40013c00

08000b68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	460b      	mov	r3, r1
 8000b72:	807b      	strh	r3, [r7, #2]
 8000b74:	4613      	mov	r3, r2
 8000b76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b78:	787b      	ldrb	r3, [r7, #1]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d003      	beq.n	8000b86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b7e:	887a      	ldrh	r2, [r7, #2]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000b84:	e003      	b.n	8000b8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b86:	887b      	ldrh	r3, [r7, #2]
 8000b88:	041a      	lsls	r2, r3, #16
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	619a      	str	r2, [r3, #24]
}
 8000b8e:	bf00      	nop
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
	...

08000b9c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000ba6:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ba8:	695a      	ldr	r2, [r3, #20]
 8000baa:	88fb      	ldrh	r3, [r7, #6]
 8000bac:	4013      	ands	r3, r2
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d006      	beq.n	8000bc0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000bb2:	4a05      	ldr	r2, [pc, #20]	; (8000bc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000bb4:	88fb      	ldrh	r3, [r7, #6]
 8000bb6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000bb8:	88fb      	ldrh	r3, [r7, #6]
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f000 f806 	bl	8000bcc <HAL_GPIO_EXTI_Callback>
  }
}
 8000bc0:	bf00      	nop
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40013c00 	.word	0x40013c00

08000bcc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000bd6:	bf00      	nop
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
	...

08000be4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000be8:	4b03      	ldr	r3, [pc, #12]	; (8000bf8 <HAL_RCC_GetHCLKFreq+0x14>)
 8000bea:	681b      	ldr	r3, [r3, #0]
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	20000004 	.word	0x20000004

08000bfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000c00:	f7ff fff0 	bl	8000be4 <HAL_RCC_GetHCLKFreq>
 8000c04:	4601      	mov	r1, r0
 8000c06:	4b05      	ldr	r3, [pc, #20]	; (8000c1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8000c08:	689b      	ldr	r3, [r3, #8]
 8000c0a:	0a9b      	lsrs	r3, r3, #10
 8000c0c:	f003 0307 	and.w	r3, r3, #7
 8000c10:	4a03      	ldr	r2, [pc, #12]	; (8000c20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000c12:	5cd3      	ldrb	r3, [r2, r3]
 8000c14:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40023800 	.word	0x40023800
 8000c20:	08008044 	.word	0x08008044

08000c24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000c28:	f7ff ffdc 	bl	8000be4 <HAL_RCC_GetHCLKFreq>
 8000c2c:	4601      	mov	r1, r0
 8000c2e:	4b05      	ldr	r3, [pc, #20]	; (8000c44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000c30:	689b      	ldr	r3, [r3, #8]
 8000c32:	0b5b      	lsrs	r3, r3, #13
 8000c34:	f003 0307 	and.w	r3, r3, #7
 8000c38:	4a03      	ldr	r2, [pc, #12]	; (8000c48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000c3a:	5cd3      	ldrb	r3, [r2, r3]
 8000c3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40023800 	.word	0x40023800
 8000c48:	08008044 	.word	0x08008044

08000c4c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	220f      	movs	r2, #15
 8000c5a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000c5c:	4b12      	ldr	r3, [pc, #72]	; (8000ca8 <HAL_RCC_GetClockConfig+0x5c>)
 8000c5e:	689b      	ldr	r3, [r3, #8]
 8000c60:	f003 0203 	and.w	r2, r3, #3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8000c68:	4b0f      	ldr	r3, [pc, #60]	; (8000ca8 <HAL_RCC_GetClockConfig+0x5c>)
 8000c6a:	689b      	ldr	r3, [r3, #8]
 8000c6c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8000c74:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <HAL_RCC_GetClockConfig+0x5c>)
 8000c76:	689b      	ldr	r3, [r3, #8]
 8000c78:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8000c80:	4b09      	ldr	r3, [pc, #36]	; (8000ca8 <HAL_RCC_GetClockConfig+0x5c>)
 8000c82:	689b      	ldr	r3, [r3, #8]
 8000c84:	08db      	lsrs	r3, r3, #3
 8000c86:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8000c8e:	4b07      	ldr	r3, [pc, #28]	; (8000cac <HAL_RCC_GetClockConfig+0x60>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f003 020f 	and.w	r2, r3, #15
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	601a      	str	r2, [r3, #0]
}
 8000c9a:	bf00      	nop
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	40023c00 	.word	0x40023c00

08000cb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d101      	bne.n	8000cc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e01d      	b.n	8000cfe <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d106      	bne.n	8000cdc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f000 f815 	bl	8000d06 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2202      	movs	r2, #2
 8000ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	3304      	adds	r3, #4
 8000cec:	4619      	mov	r1, r3
 8000cee:	4610      	mov	r0, r2
 8000cf0:	f000 f972 	bl	8000fd8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8000cfc:	2300      	movs	r3, #0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8000d06:	b480      	push	{r7}
 8000d08:	b083      	sub	sp, #12
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8000d0e:	bf00      	nop
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr

08000d1a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	b085      	sub	sp, #20
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	68da      	ldr	r2, [r3, #12]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f042 0201 	orr.w	r2, r2, #1
 8000d30:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	689b      	ldr	r3, [r3, #8]
 8000d38:	f003 0307 	and.w	r3, r3, #7
 8000d3c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	2b06      	cmp	r3, #6
 8000d42:	d007      	beq.n	8000d54 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f042 0201 	orr.w	r2, r2, #1
 8000d52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000d54:	2300      	movs	r3, #0
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3714      	adds	r7, #20
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b082      	sub	sp, #8
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	691b      	ldr	r3, [r3, #16]
 8000d70:	f003 0302 	and.w	r3, r3, #2
 8000d74:	2b02      	cmp	r3, #2
 8000d76:	d122      	bne.n	8000dbe <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	68db      	ldr	r3, [r3, #12]
 8000d7e:	f003 0302 	and.w	r3, r3, #2
 8000d82:	2b02      	cmp	r3, #2
 8000d84:	d11b      	bne.n	8000dbe <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f06f 0202 	mvn.w	r2, #2
 8000d8e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2201      	movs	r2, #1
 8000d94:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	699b      	ldr	r3, [r3, #24]
 8000d9c:	f003 0303 	and.w	r3, r3, #3
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d003      	beq.n	8000dac <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f000 f8f8 	bl	8000f9a <HAL_TIM_IC_CaptureCallback>
 8000daa:	e005      	b.n	8000db8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f000 f8ea 	bl	8000f86 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f000 f8fb 	bl	8000fae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2200      	movs	r2, #0
 8000dbc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	691b      	ldr	r3, [r3, #16]
 8000dc4:	f003 0304 	and.w	r3, r3, #4
 8000dc8:	2b04      	cmp	r3, #4
 8000dca:	d122      	bne.n	8000e12 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	68db      	ldr	r3, [r3, #12]
 8000dd2:	f003 0304 	and.w	r3, r3, #4
 8000dd6:	2b04      	cmp	r3, #4
 8000dd8:	d11b      	bne.n	8000e12 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f06f 0204 	mvn.w	r2, #4
 8000de2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2202      	movs	r2, #2
 8000de8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	699b      	ldr	r3, [r3, #24]
 8000df0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d003      	beq.n	8000e00 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f000 f8ce 	bl	8000f9a <HAL_TIM_IC_CaptureCallback>
 8000dfe:	e005      	b.n	8000e0c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f000 f8c0 	bl	8000f86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f000 f8d1 	bl	8000fae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2200      	movs	r2, #0
 8000e10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	691b      	ldr	r3, [r3, #16]
 8000e18:	f003 0308 	and.w	r3, r3, #8
 8000e1c:	2b08      	cmp	r3, #8
 8000e1e:	d122      	bne.n	8000e66 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	68db      	ldr	r3, [r3, #12]
 8000e26:	f003 0308 	and.w	r3, r3, #8
 8000e2a:	2b08      	cmp	r3, #8
 8000e2c:	d11b      	bne.n	8000e66 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f06f 0208 	mvn.w	r2, #8
 8000e36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2204      	movs	r2, #4
 8000e3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	69db      	ldr	r3, [r3, #28]
 8000e44:	f003 0303 	and.w	r3, r3, #3
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d003      	beq.n	8000e54 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000e4c:	6878      	ldr	r0, [r7, #4]
 8000e4e:	f000 f8a4 	bl	8000f9a <HAL_TIM_IC_CaptureCallback>
 8000e52:	e005      	b.n	8000e60 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f000 f896 	bl	8000f86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f000 f8a7 	bl	8000fae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2200      	movs	r2, #0
 8000e64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	691b      	ldr	r3, [r3, #16]
 8000e6c:	f003 0310 	and.w	r3, r3, #16
 8000e70:	2b10      	cmp	r3, #16
 8000e72:	d122      	bne.n	8000eba <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	68db      	ldr	r3, [r3, #12]
 8000e7a:	f003 0310 	and.w	r3, r3, #16
 8000e7e:	2b10      	cmp	r3, #16
 8000e80:	d11b      	bne.n	8000eba <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f06f 0210 	mvn.w	r2, #16
 8000e8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2208      	movs	r2, #8
 8000e90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	69db      	ldr	r3, [r3, #28]
 8000e98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d003      	beq.n	8000ea8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f000 f87a 	bl	8000f9a <HAL_TIM_IC_CaptureCallback>
 8000ea6:	e005      	b.n	8000eb4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	f000 f86c 	bl	8000f86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f000 f87d 	bl	8000fae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	691b      	ldr	r3, [r3, #16]
 8000ec0:	f003 0301 	and.w	r3, r3, #1
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d10e      	bne.n	8000ee6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	68db      	ldr	r3, [r3, #12]
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d107      	bne.n	8000ee6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f06f 0201 	mvn.w	r2, #1
 8000ede:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8000ee0:	6878      	ldr	r0, [r7, #4]
 8000ee2:	f000 f846 	bl	8000f72 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	691b      	ldr	r3, [r3, #16]
 8000eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ef0:	2b80      	cmp	r3, #128	; 0x80
 8000ef2:	d10e      	bne.n	8000f12 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	68db      	ldr	r3, [r3, #12]
 8000efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000efe:	2b80      	cmp	r3, #128	; 0x80
 8000f00:	d107      	bne.n	8000f12 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8000f0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8000f0c:	6878      	ldr	r0, [r7, #4]
 8000f0e:	f000 f90d 	bl	800112c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	691b      	ldr	r3, [r3, #16]
 8000f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f1c:	2b40      	cmp	r3, #64	; 0x40
 8000f1e:	d10e      	bne.n	8000f3e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	68db      	ldr	r3, [r3, #12]
 8000f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f2a:	2b40      	cmp	r3, #64	; 0x40
 8000f2c:	d107      	bne.n	8000f3e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000f36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f000 f842 	bl	8000fc2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	691b      	ldr	r3, [r3, #16]
 8000f44:	f003 0320 	and.w	r3, r3, #32
 8000f48:	2b20      	cmp	r3, #32
 8000f4a:	d10e      	bne.n	8000f6a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	68db      	ldr	r3, [r3, #12]
 8000f52:	f003 0320 	and.w	r3, r3, #32
 8000f56:	2b20      	cmp	r3, #32
 8000f58:	d107      	bne.n	8000f6a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f06f 0220 	mvn.w	r2, #32
 8000f62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f000 f8d7 	bl	8001118 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f72:	b480      	push	{r7}
 8000f74:	b083      	sub	sp, #12
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8000f7a:	bf00      	nop
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f86:	b480      	push	{r7}
 8000f88:	b083      	sub	sp, #12
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	b083      	sub	sp, #12
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr

08000fae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	b083      	sub	sp, #12
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8000fb6:	bf00      	nop
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr

08000fc2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	b083      	sub	sp, #12
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8000fca:	bf00      	nop
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
	...

08000fd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	4a40      	ldr	r2, [pc, #256]	; (80010ec <TIM_Base_SetConfig+0x114>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d013      	beq.n	8001018 <TIM_Base_SetConfig+0x40>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ff6:	d00f      	beq.n	8001018 <TIM_Base_SetConfig+0x40>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4a3d      	ldr	r2, [pc, #244]	; (80010f0 <TIM_Base_SetConfig+0x118>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d00b      	beq.n	8001018 <TIM_Base_SetConfig+0x40>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	4a3c      	ldr	r2, [pc, #240]	; (80010f4 <TIM_Base_SetConfig+0x11c>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d007      	beq.n	8001018 <TIM_Base_SetConfig+0x40>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4a3b      	ldr	r2, [pc, #236]	; (80010f8 <TIM_Base_SetConfig+0x120>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d003      	beq.n	8001018 <TIM_Base_SetConfig+0x40>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	4a3a      	ldr	r2, [pc, #232]	; (80010fc <TIM_Base_SetConfig+0x124>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d108      	bne.n	800102a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800101e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	68fa      	ldr	r2, [r7, #12]
 8001026:	4313      	orrs	r3, r2
 8001028:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a2f      	ldr	r2, [pc, #188]	; (80010ec <TIM_Base_SetConfig+0x114>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d02b      	beq.n	800108a <TIM_Base_SetConfig+0xb2>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001038:	d027      	beq.n	800108a <TIM_Base_SetConfig+0xb2>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a2c      	ldr	r2, [pc, #176]	; (80010f0 <TIM_Base_SetConfig+0x118>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d023      	beq.n	800108a <TIM_Base_SetConfig+0xb2>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a2b      	ldr	r2, [pc, #172]	; (80010f4 <TIM_Base_SetConfig+0x11c>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d01f      	beq.n	800108a <TIM_Base_SetConfig+0xb2>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a2a      	ldr	r2, [pc, #168]	; (80010f8 <TIM_Base_SetConfig+0x120>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d01b      	beq.n	800108a <TIM_Base_SetConfig+0xb2>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a29      	ldr	r2, [pc, #164]	; (80010fc <TIM_Base_SetConfig+0x124>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d017      	beq.n	800108a <TIM_Base_SetConfig+0xb2>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a28      	ldr	r2, [pc, #160]	; (8001100 <TIM_Base_SetConfig+0x128>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d013      	beq.n	800108a <TIM_Base_SetConfig+0xb2>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a27      	ldr	r2, [pc, #156]	; (8001104 <TIM_Base_SetConfig+0x12c>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d00f      	beq.n	800108a <TIM_Base_SetConfig+0xb2>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a26      	ldr	r2, [pc, #152]	; (8001108 <TIM_Base_SetConfig+0x130>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d00b      	beq.n	800108a <TIM_Base_SetConfig+0xb2>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a25      	ldr	r2, [pc, #148]	; (800110c <TIM_Base_SetConfig+0x134>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d007      	beq.n	800108a <TIM_Base_SetConfig+0xb2>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a24      	ldr	r2, [pc, #144]	; (8001110 <TIM_Base_SetConfig+0x138>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d003      	beq.n	800108a <TIM_Base_SetConfig+0xb2>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a23      	ldr	r2, [pc, #140]	; (8001114 <TIM_Base_SetConfig+0x13c>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d108      	bne.n	800109c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001090:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	68db      	ldr	r3, [r3, #12]
 8001096:	68fa      	ldr	r2, [r7, #12]
 8001098:	4313      	orrs	r3, r2
 800109a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	695b      	ldr	r3, [r3, #20]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	68fa      	ldr	r2, [r7, #12]
 80010ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	689a      	ldr	r2, [r3, #8]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	4a0a      	ldr	r2, [pc, #40]	; (80010ec <TIM_Base_SetConfig+0x114>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d003      	beq.n	80010d0 <TIM_Base_SetConfig+0xf8>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4a0c      	ldr	r2, [pc, #48]	; (80010fc <TIM_Base_SetConfig+0x124>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d103      	bne.n	80010d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	691a      	ldr	r2, [r3, #16]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2201      	movs	r2, #1
 80010dc:	615a      	str	r2, [r3, #20]
}
 80010de:	bf00      	nop
 80010e0:	3714      	adds	r7, #20
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	40010000 	.word	0x40010000
 80010f0:	40000400 	.word	0x40000400
 80010f4:	40000800 	.word	0x40000800
 80010f8:	40000c00 	.word	0x40000c00
 80010fc:	40010400 	.word	0x40010400
 8001100:	40014000 	.word	0x40014000
 8001104:	40014400 	.word	0x40014400
 8001108:	40014800 	.word	0x40014800
 800110c:	40001800 	.word	0x40001800
 8001110:	40001c00 	.word	0x40001c00
 8001114:	40002000 	.word	0x40002000

08001118 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001134:	bf00      	nop
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d101      	bne.n	8001152 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	e03f      	b.n	80011d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001158:	b2db      	uxtb	r3, r3
 800115a:	2b00      	cmp	r3, #0
 800115c:	d106      	bne.n	800116c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2200      	movs	r2, #0
 8001162:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f005 fbf6 	bl	8006958 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2224      	movs	r2, #36	; 0x24
 8001170:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	68da      	ldr	r2, [r3, #12]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001182:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f000 fc3d 	bl	8001a04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	691a      	ldr	r2, [r3, #16]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001198:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	695a      	ldr	r2, [r3, #20]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80011a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	68da      	ldr	r2, [r3, #12]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80011b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2200      	movs	r2, #0
 80011be:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2220      	movs	r2, #32
 80011c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2220      	movs	r2, #32
 80011cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b088      	sub	sp, #32
 80011de:	af02      	add	r7, sp, #8
 80011e0:	60f8      	str	r0, [r7, #12]
 80011e2:	60b9      	str	r1, [r7, #8]
 80011e4:	603b      	str	r3, [r7, #0]
 80011e6:	4613      	mov	r3, r2
 80011e8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80011ea:	2300      	movs	r3, #0
 80011ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	2b20      	cmp	r3, #32
 80011f8:	f040 8083 	bne.w	8001302 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d002      	beq.n	8001208 <HAL_UART_Transmit+0x2e>
 8001202:	88fb      	ldrh	r3, [r7, #6]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d101      	bne.n	800120c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e07b      	b.n	8001304 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001212:	2b01      	cmp	r3, #1
 8001214:	d101      	bne.n	800121a <HAL_UART_Transmit+0x40>
 8001216:	2302      	movs	r3, #2
 8001218:	e074      	b.n	8001304 <HAL_UART_Transmit+0x12a>
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	2201      	movs	r2, #1
 800121e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	2200      	movs	r2, #0
 8001226:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	2221      	movs	r2, #33	; 0x21
 800122c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001230:	f7ff f9f8 	bl	8000624 <HAL_GetTick>
 8001234:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	88fa      	ldrh	r2, [r7, #6]
 800123a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	88fa      	ldrh	r2, [r7, #6]
 8001240:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	2200      	movs	r2, #0
 8001246:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800124a:	e042      	b.n	80012d2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001250:	b29b      	uxth	r3, r3
 8001252:	3b01      	subs	r3, #1
 8001254:	b29a      	uxth	r2, r3
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001262:	d122      	bne.n	80012aa <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	9300      	str	r3, [sp, #0]
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	2200      	movs	r2, #0
 800126c:	2180      	movs	r1, #128	; 0x80
 800126e:	68f8      	ldr	r0, [r7, #12]
 8001270:	f000 fa5c 	bl	800172c <UART_WaitOnFlagUntilTimeout>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e042      	b.n	8001304 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	881b      	ldrh	r3, [r3, #0]
 8001286:	461a      	mov	r2, r3
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001290:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	691b      	ldr	r3, [r3, #16]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d103      	bne.n	80012a2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	3302      	adds	r3, #2
 800129e:	60bb      	str	r3, [r7, #8]
 80012a0:	e017      	b.n	80012d2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	3301      	adds	r3, #1
 80012a6:	60bb      	str	r3, [r7, #8]
 80012a8:	e013      	b.n	80012d2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	9300      	str	r3, [sp, #0]
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	2200      	movs	r2, #0
 80012b2:	2180      	movs	r1, #128	; 0x80
 80012b4:	68f8      	ldr	r0, [r7, #12]
 80012b6:	f000 fa39 	bl	800172c <UART_WaitOnFlagUntilTimeout>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80012c0:	2303      	movs	r3, #3
 80012c2:	e01f      	b.n	8001304 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	1c5a      	adds	r2, r3, #1
 80012c8:	60ba      	str	r2, [r7, #8]
 80012ca:	781a      	ldrb	r2, [r3, #0]
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d1b7      	bne.n	800124c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	9300      	str	r3, [sp, #0]
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	2200      	movs	r2, #0
 80012e4:	2140      	movs	r1, #64	; 0x40
 80012e6:	68f8      	ldr	r0, [r7, #12]
 80012e8:	f000 fa20 	bl	800172c <UART_WaitOnFlagUntilTimeout>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	e006      	b.n	8001304 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	2220      	movs	r2, #32
 80012fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80012fe:	2300      	movs	r3, #0
 8001300:	e000      	b.n	8001304 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001302:	2302      	movs	r3, #2
  }
}
 8001304:	4618      	mov	r0, r3
 8001306:	3718      	adds	r7, #24
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b088      	sub	sp, #32
 8001310:	af02      	add	r7, sp, #8
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	60b9      	str	r1, [r7, #8]
 8001316:	603b      	str	r3, [r7, #0]
 8001318:	4613      	mov	r3, r2
 800131a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800131c:	2300      	movs	r3, #0
 800131e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001326:	b2db      	uxtb	r3, r3
 8001328:	2b20      	cmp	r3, #32
 800132a:	f040 8090 	bne.w	800144e <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d002      	beq.n	800133a <HAL_UART_Receive+0x2e>
 8001334:	88fb      	ldrh	r3, [r7, #6]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d101      	bne.n	800133e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e088      	b.n	8001450 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001344:	2b01      	cmp	r3, #1
 8001346:	d101      	bne.n	800134c <HAL_UART_Receive+0x40>
 8001348:	2302      	movs	r3, #2
 800134a:	e081      	b.n	8001450 <HAL_UART_Receive+0x144>
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	2201      	movs	r2, #1
 8001350:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	2200      	movs	r2, #0
 8001358:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	2222      	movs	r2, #34	; 0x22
 800135e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001362:	f7ff f95f 	bl	8000624 <HAL_GetTick>
 8001366:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	88fa      	ldrh	r2, [r7, #6]
 800136c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	88fa      	ldrh	r2, [r7, #6]
 8001372:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	2200      	movs	r2, #0
 8001378:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800137c:	e05c      	b.n	8001438 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001382:	b29b      	uxth	r3, r3
 8001384:	3b01      	subs	r3, #1
 8001386:	b29a      	uxth	r2, r3
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001394:	d12b      	bne.n	80013ee <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	9300      	str	r3, [sp, #0]
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	2200      	movs	r2, #0
 800139e:	2120      	movs	r1, #32
 80013a0:	68f8      	ldr	r0, [r7, #12]
 80013a2:	f000 f9c3 	bl	800172c <UART_WaitOnFlagUntilTimeout>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	e04f      	b.n	8001450 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	691b      	ldr	r3, [r3, #16]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d10c      	bne.n	80013d6 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80013c8:	b29a      	uxth	r2, r3
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	3302      	adds	r3, #2
 80013d2:	60bb      	str	r3, [r7, #8]
 80013d4:	e030      	b.n	8001438 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	b29b      	uxth	r3, r3
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	b29a      	uxth	r2, r3
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	3301      	adds	r3, #1
 80013ea:	60bb      	str	r3, [r7, #8]
 80013ec:	e024      	b.n	8001438 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	9300      	str	r3, [sp, #0]
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	2200      	movs	r2, #0
 80013f6:	2120      	movs	r1, #32
 80013f8:	68f8      	ldr	r0, [r7, #12]
 80013fa:	f000 f997 	bl	800172c <UART_WaitOnFlagUntilTimeout>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8001404:	2303      	movs	r3, #3
 8001406:	e023      	b.n	8001450 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	691b      	ldr	r3, [r3, #16]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d108      	bne.n	8001422 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	6859      	ldr	r1, [r3, #4]
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	1c5a      	adds	r2, r3, #1
 800141a:	60ba      	str	r2, [r7, #8]
 800141c:	b2ca      	uxtb	r2, r1
 800141e:	701a      	strb	r2, [r3, #0]
 8001420:	e00a      	b.n	8001438 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	b2da      	uxtb	r2, r3
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	1c59      	adds	r1, r3, #1
 800142e:	60b9      	str	r1, [r7, #8]
 8001430:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001434:	b2d2      	uxtb	r2, r2
 8001436:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800143c:	b29b      	uxth	r3, r3
 800143e:	2b00      	cmp	r3, #0
 8001440:	d19d      	bne.n	800137e <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	2220      	movs	r2, #32
 8001446:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800144a:	2300      	movs	r3, #0
 800144c:	e000      	b.n	8001450 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 800144e:	2302      	movs	r3, #2
  }
}
 8001450:	4618      	mov	r0, r3
 8001452:	3718      	adds	r7, #24
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001458:	b480      	push	{r7}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	4613      	mov	r3, r2
 8001464:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800146c:	b2db      	uxtb	r3, r3
 800146e:	2b20      	cmp	r3, #32
 8001470:	d140      	bne.n	80014f4 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d002      	beq.n	800147e <HAL_UART_Receive_IT+0x26>
 8001478:	88fb      	ldrh	r3, [r7, #6]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d101      	bne.n	8001482 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e039      	b.n	80014f6 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001488:	2b01      	cmp	r3, #1
 800148a:	d101      	bne.n	8001490 <HAL_UART_Receive_IT+0x38>
 800148c:	2302      	movs	r3, #2
 800148e:	e032      	b.n	80014f6 <HAL_UART_Receive_IT+0x9e>
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	2201      	movs	r2, #1
 8001494:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	68ba      	ldr	r2, [r7, #8]
 800149c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	88fa      	ldrh	r2, [r7, #6]
 80014a2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	88fa      	ldrh	r2, [r7, #6]
 80014a8:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	2200      	movs	r2, #0
 80014ae:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	2222      	movs	r2, #34	; 0x22
 80014b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	2200      	movs	r2, #0
 80014bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	68da      	ldr	r2, [r3, #12]
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80014ce:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	695a      	ldr	r2, [r3, #20]
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f042 0201 	orr.w	r2, r2, #1
 80014de:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	68da      	ldr	r2, [r3, #12]
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f042 0220 	orr.w	r2, r2, #32
 80014ee:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80014f0:	2300      	movs	r3, #0
 80014f2:	e000      	b.n	80014f6 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80014f4:	2302      	movs	r3, #2
  }
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3714      	adds	r7, #20
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
	...

08001504 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b088      	sub	sp, #32
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	695b      	ldr	r3, [r3, #20]
 8001522:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001524:	2300      	movs	r3, #0
 8001526:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001528:	2300      	movs	r3, #0
 800152a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	f003 030f 	and.w	r3, r3, #15
 8001532:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d10d      	bne.n	8001556 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	f003 0320 	and.w	r3, r3, #32
 8001540:	2b00      	cmp	r3, #0
 8001542:	d008      	beq.n	8001556 <HAL_UART_IRQHandler+0x52>
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	f003 0320 	and.w	r3, r3, #32
 800154a:	2b00      	cmp	r3, #0
 800154c:	d003      	beq.n	8001556 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f000 f9d6 	bl	8001900 <UART_Receive_IT>
      return;
 8001554:	e0d1      	b.n	80016fa <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	2b00      	cmp	r3, #0
 800155a:	f000 80b0 	beq.w	80016be <HAL_UART_IRQHandler+0x1ba>
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	f003 0301 	and.w	r3, r3, #1
 8001564:	2b00      	cmp	r3, #0
 8001566:	d105      	bne.n	8001574 <HAL_UART_IRQHandler+0x70>
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800156e:	2b00      	cmp	r3, #0
 8001570:	f000 80a5 	beq.w	80016be <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	2b00      	cmp	r3, #0
 800157c:	d00a      	beq.n	8001594 <HAL_UART_IRQHandler+0x90>
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001584:	2b00      	cmp	r3, #0
 8001586:	d005      	beq.n	8001594 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800158c:	f043 0201 	orr.w	r2, r3, #1
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	f003 0304 	and.w	r3, r3, #4
 800159a:	2b00      	cmp	r3, #0
 800159c:	d00a      	beq.n	80015b4 <HAL_UART_IRQHandler+0xb0>
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	f003 0301 	and.w	r3, r3, #1
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d005      	beq.n	80015b4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015ac:	f043 0202 	orr.w	r2, r3, #2
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d00a      	beq.n	80015d4 <HAL_UART_IRQHandler+0xd0>
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	f003 0301 	and.w	r3, r3, #1
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d005      	beq.n	80015d4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015cc:	f043 0204 	orr.w	r2, r3, #4
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	f003 0308 	and.w	r3, r3, #8
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d00f      	beq.n	80015fe <HAL_UART_IRQHandler+0xfa>
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	f003 0320 	and.w	r3, r3, #32
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d104      	bne.n	80015f2 <HAL_UART_IRQHandler+0xee>
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d005      	beq.n	80015fe <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015f6:	f043 0208 	orr.w	r2, r3, #8
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001602:	2b00      	cmp	r3, #0
 8001604:	d078      	beq.n	80016f8 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	f003 0320 	and.w	r3, r3, #32
 800160c:	2b00      	cmp	r3, #0
 800160e:	d007      	beq.n	8001620 <HAL_UART_IRQHandler+0x11c>
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	f003 0320 	and.w	r3, r3, #32
 8001616:	2b00      	cmp	r3, #0
 8001618:	d002      	beq.n	8001620 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f000 f970 	bl	8001900 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	695b      	ldr	r3, [r3, #20]
 8001626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800162a:	2b40      	cmp	r3, #64	; 0x40
 800162c:	bf0c      	ite	eq
 800162e:	2301      	moveq	r3, #1
 8001630:	2300      	movne	r3, #0
 8001632:	b2db      	uxtb	r3, r3
 8001634:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800163a:	f003 0308 	and.w	r3, r3, #8
 800163e:	2b00      	cmp	r3, #0
 8001640:	d102      	bne.n	8001648 <HAL_UART_IRQHandler+0x144>
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d031      	beq.n	80016ac <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f000 f8b9 	bl	80017c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	695b      	ldr	r3, [r3, #20]
 8001654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001658:	2b40      	cmp	r3, #64	; 0x40
 800165a:	d123      	bne.n	80016a4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	695a      	ldr	r2, [r3, #20]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800166a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001670:	2b00      	cmp	r3, #0
 8001672:	d013      	beq.n	800169c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001678:	4a21      	ldr	r2, [pc, #132]	; (8001700 <HAL_UART_IRQHandler+0x1fc>)
 800167a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff f8bd 	bl	8000800 <HAL_DMA_Abort_IT>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d016      	beq.n	80016ba <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001690:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001696:	4610      	mov	r0, r2
 8001698:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800169a:	e00e      	b.n	80016ba <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f000 f83b 	bl	8001718 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80016a2:	e00a      	b.n	80016ba <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f000 f837 	bl	8001718 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80016aa:	e006      	b.n	80016ba <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f000 f833 	bl	8001718 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2200      	movs	r2, #0
 80016b6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80016b8:	e01e      	b.n	80016f8 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80016ba:	bf00      	nop
    return;
 80016bc:	e01c      	b.n	80016f8 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d008      	beq.n	80016da <HAL_UART_IRQHandler+0x1d6>
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d003      	beq.n	80016da <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f000 f8a6 	bl	8001824 <UART_Transmit_IT>
    return;
 80016d8:	e00f      	b.n	80016fa <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d00a      	beq.n	80016fa <HAL_UART_IRQHandler+0x1f6>
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d005      	beq.n	80016fa <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f000 f8ee 	bl	80018d0 <UART_EndTransmit_IT>
    return;
 80016f4:	bf00      	nop
 80016f6:	e000      	b.n	80016fa <HAL_UART_IRQHandler+0x1f6>
    return;
 80016f8:	bf00      	nop
  }
}
 80016fa:	3720      	adds	r7, #32
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	080017fd 	.word	0x080017fd

08001704 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800170c:	bf00      	nop
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	60b9      	str	r1, [r7, #8]
 8001736:	603b      	str	r3, [r7, #0]
 8001738:	4613      	mov	r3, r2
 800173a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800173c:	e02c      	b.n	8001798 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001744:	d028      	beq.n	8001798 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d007      	beq.n	800175c <UART_WaitOnFlagUntilTimeout+0x30>
 800174c:	f7fe ff6a 	bl	8000624 <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	429a      	cmp	r2, r3
 800175a:	d21d      	bcs.n	8001798 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	68da      	ldr	r2, [r3, #12]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800176a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	695a      	ldr	r2, [r3, #20]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f022 0201 	bic.w	r2, r2, #1
 800177a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2220      	movs	r2, #32
 8001780:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2220      	movs	r2, #32
 8001788:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2200      	movs	r2, #0
 8001790:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e00f      	b.n	80017b8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	4013      	ands	r3, r2
 80017a2:	68ba      	ldr	r2, [r7, #8]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	bf0c      	ite	eq
 80017a8:	2301      	moveq	r3, #1
 80017aa:	2300      	movne	r3, #0
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	461a      	mov	r2, r3
 80017b0:	79fb      	ldrb	r3, [r7, #7]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d0c3      	beq.n	800173e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80017b6:	2300      	movs	r3, #0
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3710      	adds	r7, #16
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}

080017c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	68da      	ldr	r2, [r3, #12]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80017d6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	695a      	ldr	r2, [r3, #20]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f022 0201 	bic.w	r2, r2, #1
 80017e6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2220      	movs	r2, #32
 80017ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80017f0:	bf00      	nop
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001808:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	2200      	movs	r2, #0
 800180e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2200      	movs	r2, #0
 8001814:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001816:	68f8      	ldr	r0, [r7, #12]
 8001818:	f7ff ff7e 	bl	8001718 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800181c:	bf00      	nop
 800181e:	3710      	adds	r7, #16
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001832:	b2db      	uxtb	r3, r3
 8001834:	2b21      	cmp	r3, #33	; 0x21
 8001836:	d144      	bne.n	80018c2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001840:	d11a      	bne.n	8001878 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a1b      	ldr	r3, [r3, #32]
 8001846:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	881b      	ldrh	r3, [r3, #0]
 800184c:	461a      	mov	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001856:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	691b      	ldr	r3, [r3, #16]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d105      	bne.n	800186c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6a1b      	ldr	r3, [r3, #32]
 8001864:	1c9a      	adds	r2, r3, #2
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	621a      	str	r2, [r3, #32]
 800186a:	e00e      	b.n	800188a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a1b      	ldr	r3, [r3, #32]
 8001870:	1c5a      	adds	r2, r3, #1
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	621a      	str	r2, [r3, #32]
 8001876:	e008      	b.n	800188a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a1b      	ldr	r3, [r3, #32]
 800187c:	1c59      	adds	r1, r3, #1
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	6211      	str	r1, [r2, #32]
 8001882:	781a      	ldrb	r2, [r3, #0]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800188e:	b29b      	uxth	r3, r3
 8001890:	3b01      	subs	r3, #1
 8001892:	b29b      	uxth	r3, r3
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	4619      	mov	r1, r3
 8001898:	84d1      	strh	r1, [r2, #38]	; 0x26
 800189a:	2b00      	cmp	r3, #0
 800189c:	d10f      	bne.n	80018be <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	68da      	ldr	r2, [r3, #12]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018ac:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	68da      	ldr	r2, [r3, #12]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018bc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80018be:	2300      	movs	r3, #0
 80018c0:	e000      	b.n	80018c4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80018c2:	2302      	movs	r3, #2
  }
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3714      	adds	r7, #20
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	68da      	ldr	r2, [r3, #12]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018e6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2220      	movs	r2, #32
 80018ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f7ff ff07 	bl	8001704 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80018f6:	2300      	movs	r3, #0
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3708      	adds	r7, #8
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}

08001900 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800190e:	b2db      	uxtb	r3, r3
 8001910:	2b22      	cmp	r3, #34	; 0x22
 8001912:	d171      	bne.n	80019f8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800191c:	d123      	bne.n	8001966 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001922:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	691b      	ldr	r3, [r3, #16]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d10e      	bne.n	800194a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	b29b      	uxth	r3, r3
 8001934:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001938:	b29a      	uxth	r2, r3
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001942:	1c9a      	adds	r2, r3, #2
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	629a      	str	r2, [r3, #40]	; 0x28
 8001948:	e029      	b.n	800199e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	b29b      	uxth	r3, r3
 8001952:	b2db      	uxtb	r3, r3
 8001954:	b29a      	uxth	r2, r3
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800195e:	1c5a      	adds	r2, r3, #1
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	629a      	str	r2, [r3, #40]	; 0x28
 8001964:	e01b      	b.n	800199e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	691b      	ldr	r3, [r3, #16]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d10a      	bne.n	8001984 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	6858      	ldr	r0, [r3, #4]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001978:	1c59      	adds	r1, r3, #1
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	6291      	str	r1, [r2, #40]	; 0x28
 800197e:	b2c2      	uxtb	r2, r0
 8001980:	701a      	strb	r2, [r3, #0]
 8001982:	e00c      	b.n	800199e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	b2da      	uxtb	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001990:	1c58      	adds	r0, r3, #1
 8001992:	6879      	ldr	r1, [r7, #4]
 8001994:	6288      	str	r0, [r1, #40]	; 0x28
 8001996:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800199a:	b2d2      	uxtb	r2, r2
 800199c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	3b01      	subs	r3, #1
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	4619      	mov	r1, r3
 80019ac:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d120      	bne.n	80019f4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	68da      	ldr	r2, [r3, #12]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f022 0220 	bic.w	r2, r2, #32
 80019c0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	68da      	ldr	r2, [r3, #12]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019d0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	695a      	ldr	r2, [r3, #20]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f022 0201 	bic.w	r2, r2, #1
 80019e0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2220      	movs	r2, #32
 80019e6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f004 fe04 	bl	80065f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80019f0:	2300      	movs	r3, #0
 80019f2:	e002      	b.n	80019fa <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80019f4:	2300      	movs	r3, #0
 80019f6:	e000      	b.n	80019fa <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80019f8:	2302      	movs	r3, #2
  }
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
	...

08001a04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a08:	b085      	sub	sp, #20
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	691b      	ldr	r3, [r3, #16]
 8001a14:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	68da      	ldr	r2, [r3, #12]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	430a      	orrs	r2, r1
 8001a22:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689a      	ldr	r2, [r3, #8]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	691b      	ldr	r3, [r3, #16]
 8001a2c:	431a      	orrs	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	695b      	ldr	r3, [r3, #20]
 8001a32:	431a      	orrs	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	69db      	ldr	r3, [r3, #28]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001a46:	f023 030c 	bic.w	r3, r3, #12
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	6812      	ldr	r2, [r2, #0]
 8001a4e:	68f9      	ldr	r1, [r7, #12]
 8001a50:	430b      	orrs	r3, r1
 8001a52:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	695b      	ldr	r3, [r3, #20]
 8001a5a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	699a      	ldr	r2, [r3, #24]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	430a      	orrs	r2, r1
 8001a68:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	69db      	ldr	r3, [r3, #28]
 8001a6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a72:	f040 818b 	bne.w	8001d8c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4ac1      	ldr	r2, [pc, #772]	; (8001d80 <UART_SetConfig+0x37c>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d005      	beq.n	8001a8c <UART_SetConfig+0x88>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4abf      	ldr	r2, [pc, #764]	; (8001d84 <UART_SetConfig+0x380>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	f040 80bd 	bne.w	8001c06 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001a8c:	f7ff f8ca 	bl	8000c24 <HAL_RCC_GetPCLK2Freq>
 8001a90:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	461d      	mov	r5, r3
 8001a96:	f04f 0600 	mov.w	r6, #0
 8001a9a:	46a8      	mov	r8, r5
 8001a9c:	46b1      	mov	r9, r6
 8001a9e:	eb18 0308 	adds.w	r3, r8, r8
 8001aa2:	eb49 0409 	adc.w	r4, r9, r9
 8001aa6:	4698      	mov	r8, r3
 8001aa8:	46a1      	mov	r9, r4
 8001aaa:	eb18 0805 	adds.w	r8, r8, r5
 8001aae:	eb49 0906 	adc.w	r9, r9, r6
 8001ab2:	f04f 0100 	mov.w	r1, #0
 8001ab6:	f04f 0200 	mov.w	r2, #0
 8001aba:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001abe:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001ac2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001ac6:	4688      	mov	r8, r1
 8001ac8:	4691      	mov	r9, r2
 8001aca:	eb18 0005 	adds.w	r0, r8, r5
 8001ace:	eb49 0106 	adc.w	r1, r9, r6
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	461d      	mov	r5, r3
 8001ad8:	f04f 0600 	mov.w	r6, #0
 8001adc:	196b      	adds	r3, r5, r5
 8001ade:	eb46 0406 	adc.w	r4, r6, r6
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	4623      	mov	r3, r4
 8001ae6:	f7fe fbfb 	bl	80002e0 <__aeabi_uldivmod>
 8001aea:	4603      	mov	r3, r0
 8001aec:	460c      	mov	r4, r1
 8001aee:	461a      	mov	r2, r3
 8001af0:	4ba5      	ldr	r3, [pc, #660]	; (8001d88 <UART_SetConfig+0x384>)
 8001af2:	fba3 2302 	umull	r2, r3, r3, r2
 8001af6:	095b      	lsrs	r3, r3, #5
 8001af8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	461d      	mov	r5, r3
 8001b00:	f04f 0600 	mov.w	r6, #0
 8001b04:	46a9      	mov	r9, r5
 8001b06:	46b2      	mov	sl, r6
 8001b08:	eb19 0309 	adds.w	r3, r9, r9
 8001b0c:	eb4a 040a 	adc.w	r4, sl, sl
 8001b10:	4699      	mov	r9, r3
 8001b12:	46a2      	mov	sl, r4
 8001b14:	eb19 0905 	adds.w	r9, r9, r5
 8001b18:	eb4a 0a06 	adc.w	sl, sl, r6
 8001b1c:	f04f 0100 	mov.w	r1, #0
 8001b20:	f04f 0200 	mov.w	r2, #0
 8001b24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001b28:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001b2c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001b30:	4689      	mov	r9, r1
 8001b32:	4692      	mov	sl, r2
 8001b34:	eb19 0005 	adds.w	r0, r9, r5
 8001b38:	eb4a 0106 	adc.w	r1, sl, r6
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	461d      	mov	r5, r3
 8001b42:	f04f 0600 	mov.w	r6, #0
 8001b46:	196b      	adds	r3, r5, r5
 8001b48:	eb46 0406 	adc.w	r4, r6, r6
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	4623      	mov	r3, r4
 8001b50:	f7fe fbc6 	bl	80002e0 <__aeabi_uldivmod>
 8001b54:	4603      	mov	r3, r0
 8001b56:	460c      	mov	r4, r1
 8001b58:	461a      	mov	r2, r3
 8001b5a:	4b8b      	ldr	r3, [pc, #556]	; (8001d88 <UART_SetConfig+0x384>)
 8001b5c:	fba3 1302 	umull	r1, r3, r3, r2
 8001b60:	095b      	lsrs	r3, r3, #5
 8001b62:	2164      	movs	r1, #100	; 0x64
 8001b64:	fb01 f303 	mul.w	r3, r1, r3
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	00db      	lsls	r3, r3, #3
 8001b6c:	3332      	adds	r3, #50	; 0x32
 8001b6e:	4a86      	ldr	r2, [pc, #536]	; (8001d88 <UART_SetConfig+0x384>)
 8001b70:	fba2 2303 	umull	r2, r3, r2, r3
 8001b74:	095b      	lsrs	r3, r3, #5
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001b7c:	4498      	add	r8, r3
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	461d      	mov	r5, r3
 8001b82:	f04f 0600 	mov.w	r6, #0
 8001b86:	46a9      	mov	r9, r5
 8001b88:	46b2      	mov	sl, r6
 8001b8a:	eb19 0309 	adds.w	r3, r9, r9
 8001b8e:	eb4a 040a 	adc.w	r4, sl, sl
 8001b92:	4699      	mov	r9, r3
 8001b94:	46a2      	mov	sl, r4
 8001b96:	eb19 0905 	adds.w	r9, r9, r5
 8001b9a:	eb4a 0a06 	adc.w	sl, sl, r6
 8001b9e:	f04f 0100 	mov.w	r1, #0
 8001ba2:	f04f 0200 	mov.w	r2, #0
 8001ba6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001baa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001bae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001bb2:	4689      	mov	r9, r1
 8001bb4:	4692      	mov	sl, r2
 8001bb6:	eb19 0005 	adds.w	r0, r9, r5
 8001bba:	eb4a 0106 	adc.w	r1, sl, r6
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	461d      	mov	r5, r3
 8001bc4:	f04f 0600 	mov.w	r6, #0
 8001bc8:	196b      	adds	r3, r5, r5
 8001bca:	eb46 0406 	adc.w	r4, r6, r6
 8001bce:	461a      	mov	r2, r3
 8001bd0:	4623      	mov	r3, r4
 8001bd2:	f7fe fb85 	bl	80002e0 <__aeabi_uldivmod>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	460c      	mov	r4, r1
 8001bda:	461a      	mov	r2, r3
 8001bdc:	4b6a      	ldr	r3, [pc, #424]	; (8001d88 <UART_SetConfig+0x384>)
 8001bde:	fba3 1302 	umull	r1, r3, r3, r2
 8001be2:	095b      	lsrs	r3, r3, #5
 8001be4:	2164      	movs	r1, #100	; 0x64
 8001be6:	fb01 f303 	mul.w	r3, r1, r3
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	00db      	lsls	r3, r3, #3
 8001bee:	3332      	adds	r3, #50	; 0x32
 8001bf0:	4a65      	ldr	r2, [pc, #404]	; (8001d88 <UART_SetConfig+0x384>)
 8001bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf6:	095b      	lsrs	r3, r3, #5
 8001bf8:	f003 0207 	and.w	r2, r3, #7
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4442      	add	r2, r8
 8001c02:	609a      	str	r2, [r3, #8]
 8001c04:	e26f      	b.n	80020e6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001c06:	f7fe fff9 	bl	8000bfc <HAL_RCC_GetPCLK1Freq>
 8001c0a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	461d      	mov	r5, r3
 8001c10:	f04f 0600 	mov.w	r6, #0
 8001c14:	46a8      	mov	r8, r5
 8001c16:	46b1      	mov	r9, r6
 8001c18:	eb18 0308 	adds.w	r3, r8, r8
 8001c1c:	eb49 0409 	adc.w	r4, r9, r9
 8001c20:	4698      	mov	r8, r3
 8001c22:	46a1      	mov	r9, r4
 8001c24:	eb18 0805 	adds.w	r8, r8, r5
 8001c28:	eb49 0906 	adc.w	r9, r9, r6
 8001c2c:	f04f 0100 	mov.w	r1, #0
 8001c30:	f04f 0200 	mov.w	r2, #0
 8001c34:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001c38:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001c3c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001c40:	4688      	mov	r8, r1
 8001c42:	4691      	mov	r9, r2
 8001c44:	eb18 0005 	adds.w	r0, r8, r5
 8001c48:	eb49 0106 	adc.w	r1, r9, r6
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	461d      	mov	r5, r3
 8001c52:	f04f 0600 	mov.w	r6, #0
 8001c56:	196b      	adds	r3, r5, r5
 8001c58:	eb46 0406 	adc.w	r4, r6, r6
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	4623      	mov	r3, r4
 8001c60:	f7fe fb3e 	bl	80002e0 <__aeabi_uldivmod>
 8001c64:	4603      	mov	r3, r0
 8001c66:	460c      	mov	r4, r1
 8001c68:	461a      	mov	r2, r3
 8001c6a:	4b47      	ldr	r3, [pc, #284]	; (8001d88 <UART_SetConfig+0x384>)
 8001c6c:	fba3 2302 	umull	r2, r3, r3, r2
 8001c70:	095b      	lsrs	r3, r3, #5
 8001c72:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	461d      	mov	r5, r3
 8001c7a:	f04f 0600 	mov.w	r6, #0
 8001c7e:	46a9      	mov	r9, r5
 8001c80:	46b2      	mov	sl, r6
 8001c82:	eb19 0309 	adds.w	r3, r9, r9
 8001c86:	eb4a 040a 	adc.w	r4, sl, sl
 8001c8a:	4699      	mov	r9, r3
 8001c8c:	46a2      	mov	sl, r4
 8001c8e:	eb19 0905 	adds.w	r9, r9, r5
 8001c92:	eb4a 0a06 	adc.w	sl, sl, r6
 8001c96:	f04f 0100 	mov.w	r1, #0
 8001c9a:	f04f 0200 	mov.w	r2, #0
 8001c9e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001ca2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001ca6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001caa:	4689      	mov	r9, r1
 8001cac:	4692      	mov	sl, r2
 8001cae:	eb19 0005 	adds.w	r0, r9, r5
 8001cb2:	eb4a 0106 	adc.w	r1, sl, r6
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	461d      	mov	r5, r3
 8001cbc:	f04f 0600 	mov.w	r6, #0
 8001cc0:	196b      	adds	r3, r5, r5
 8001cc2:	eb46 0406 	adc.w	r4, r6, r6
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	4623      	mov	r3, r4
 8001cca:	f7fe fb09 	bl	80002e0 <__aeabi_uldivmod>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	460c      	mov	r4, r1
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	4b2c      	ldr	r3, [pc, #176]	; (8001d88 <UART_SetConfig+0x384>)
 8001cd6:	fba3 1302 	umull	r1, r3, r3, r2
 8001cda:	095b      	lsrs	r3, r3, #5
 8001cdc:	2164      	movs	r1, #100	; 0x64
 8001cde:	fb01 f303 	mul.w	r3, r1, r3
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	00db      	lsls	r3, r3, #3
 8001ce6:	3332      	adds	r3, #50	; 0x32
 8001ce8:	4a27      	ldr	r2, [pc, #156]	; (8001d88 <UART_SetConfig+0x384>)
 8001cea:	fba2 2303 	umull	r2, r3, r2, r3
 8001cee:	095b      	lsrs	r3, r3, #5
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001cf6:	4498      	add	r8, r3
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	461d      	mov	r5, r3
 8001cfc:	f04f 0600 	mov.w	r6, #0
 8001d00:	46a9      	mov	r9, r5
 8001d02:	46b2      	mov	sl, r6
 8001d04:	eb19 0309 	adds.w	r3, r9, r9
 8001d08:	eb4a 040a 	adc.w	r4, sl, sl
 8001d0c:	4699      	mov	r9, r3
 8001d0e:	46a2      	mov	sl, r4
 8001d10:	eb19 0905 	adds.w	r9, r9, r5
 8001d14:	eb4a 0a06 	adc.w	sl, sl, r6
 8001d18:	f04f 0100 	mov.w	r1, #0
 8001d1c:	f04f 0200 	mov.w	r2, #0
 8001d20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001d24:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001d28:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001d2c:	4689      	mov	r9, r1
 8001d2e:	4692      	mov	sl, r2
 8001d30:	eb19 0005 	adds.w	r0, r9, r5
 8001d34:	eb4a 0106 	adc.w	r1, sl, r6
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	461d      	mov	r5, r3
 8001d3e:	f04f 0600 	mov.w	r6, #0
 8001d42:	196b      	adds	r3, r5, r5
 8001d44:	eb46 0406 	adc.w	r4, r6, r6
 8001d48:	461a      	mov	r2, r3
 8001d4a:	4623      	mov	r3, r4
 8001d4c:	f7fe fac8 	bl	80002e0 <__aeabi_uldivmod>
 8001d50:	4603      	mov	r3, r0
 8001d52:	460c      	mov	r4, r1
 8001d54:	461a      	mov	r2, r3
 8001d56:	4b0c      	ldr	r3, [pc, #48]	; (8001d88 <UART_SetConfig+0x384>)
 8001d58:	fba3 1302 	umull	r1, r3, r3, r2
 8001d5c:	095b      	lsrs	r3, r3, #5
 8001d5e:	2164      	movs	r1, #100	; 0x64
 8001d60:	fb01 f303 	mul.w	r3, r1, r3
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	3332      	adds	r3, #50	; 0x32
 8001d6a:	4a07      	ldr	r2, [pc, #28]	; (8001d88 <UART_SetConfig+0x384>)
 8001d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d70:	095b      	lsrs	r3, r3, #5
 8001d72:	f003 0207 	and.w	r2, r3, #7
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4442      	add	r2, r8
 8001d7c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8001d7e:	e1b2      	b.n	80020e6 <UART_SetConfig+0x6e2>
 8001d80:	40011000 	.word	0x40011000
 8001d84:	40011400 	.word	0x40011400
 8001d88:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4ad7      	ldr	r2, [pc, #860]	; (80020f0 <UART_SetConfig+0x6ec>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d005      	beq.n	8001da2 <UART_SetConfig+0x39e>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4ad6      	ldr	r2, [pc, #856]	; (80020f4 <UART_SetConfig+0x6f0>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	f040 80d1 	bne.w	8001f44 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001da2:	f7fe ff3f 	bl	8000c24 <HAL_RCC_GetPCLK2Freq>
 8001da6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	469a      	mov	sl, r3
 8001dac:	f04f 0b00 	mov.w	fp, #0
 8001db0:	46d0      	mov	r8, sl
 8001db2:	46d9      	mov	r9, fp
 8001db4:	eb18 0308 	adds.w	r3, r8, r8
 8001db8:	eb49 0409 	adc.w	r4, r9, r9
 8001dbc:	4698      	mov	r8, r3
 8001dbe:	46a1      	mov	r9, r4
 8001dc0:	eb18 080a 	adds.w	r8, r8, sl
 8001dc4:	eb49 090b 	adc.w	r9, r9, fp
 8001dc8:	f04f 0100 	mov.w	r1, #0
 8001dcc:	f04f 0200 	mov.w	r2, #0
 8001dd0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001dd4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001dd8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001ddc:	4688      	mov	r8, r1
 8001dde:	4691      	mov	r9, r2
 8001de0:	eb1a 0508 	adds.w	r5, sl, r8
 8001de4:	eb4b 0609 	adc.w	r6, fp, r9
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	4619      	mov	r1, r3
 8001dee:	f04f 0200 	mov.w	r2, #0
 8001df2:	f04f 0300 	mov.w	r3, #0
 8001df6:	f04f 0400 	mov.w	r4, #0
 8001dfa:	0094      	lsls	r4, r2, #2
 8001dfc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8001e00:	008b      	lsls	r3, r1, #2
 8001e02:	461a      	mov	r2, r3
 8001e04:	4623      	mov	r3, r4
 8001e06:	4628      	mov	r0, r5
 8001e08:	4631      	mov	r1, r6
 8001e0a:	f7fe fa69 	bl	80002e0 <__aeabi_uldivmod>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	460c      	mov	r4, r1
 8001e12:	461a      	mov	r2, r3
 8001e14:	4bb8      	ldr	r3, [pc, #736]	; (80020f8 <UART_SetConfig+0x6f4>)
 8001e16:	fba3 2302 	umull	r2, r3, r3, r2
 8001e1a:	095b      	lsrs	r3, r3, #5
 8001e1c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	469b      	mov	fp, r3
 8001e24:	f04f 0c00 	mov.w	ip, #0
 8001e28:	46d9      	mov	r9, fp
 8001e2a:	46e2      	mov	sl, ip
 8001e2c:	eb19 0309 	adds.w	r3, r9, r9
 8001e30:	eb4a 040a 	adc.w	r4, sl, sl
 8001e34:	4699      	mov	r9, r3
 8001e36:	46a2      	mov	sl, r4
 8001e38:	eb19 090b 	adds.w	r9, r9, fp
 8001e3c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8001e40:	f04f 0100 	mov.w	r1, #0
 8001e44:	f04f 0200 	mov.w	r2, #0
 8001e48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001e4c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001e50:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001e54:	4689      	mov	r9, r1
 8001e56:	4692      	mov	sl, r2
 8001e58:	eb1b 0509 	adds.w	r5, fp, r9
 8001e5c:	eb4c 060a 	adc.w	r6, ip, sl
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	4619      	mov	r1, r3
 8001e66:	f04f 0200 	mov.w	r2, #0
 8001e6a:	f04f 0300 	mov.w	r3, #0
 8001e6e:	f04f 0400 	mov.w	r4, #0
 8001e72:	0094      	lsls	r4, r2, #2
 8001e74:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8001e78:	008b      	lsls	r3, r1, #2
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	4623      	mov	r3, r4
 8001e7e:	4628      	mov	r0, r5
 8001e80:	4631      	mov	r1, r6
 8001e82:	f7fe fa2d 	bl	80002e0 <__aeabi_uldivmod>
 8001e86:	4603      	mov	r3, r0
 8001e88:	460c      	mov	r4, r1
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	4b9a      	ldr	r3, [pc, #616]	; (80020f8 <UART_SetConfig+0x6f4>)
 8001e8e:	fba3 1302 	umull	r1, r3, r3, r2
 8001e92:	095b      	lsrs	r3, r3, #5
 8001e94:	2164      	movs	r1, #100	; 0x64
 8001e96:	fb01 f303 	mul.w	r3, r1, r3
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	011b      	lsls	r3, r3, #4
 8001e9e:	3332      	adds	r3, #50	; 0x32
 8001ea0:	4a95      	ldr	r2, [pc, #596]	; (80020f8 <UART_SetConfig+0x6f4>)
 8001ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea6:	095b      	lsrs	r3, r3, #5
 8001ea8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001eac:	4498      	add	r8, r3
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	469b      	mov	fp, r3
 8001eb2:	f04f 0c00 	mov.w	ip, #0
 8001eb6:	46d9      	mov	r9, fp
 8001eb8:	46e2      	mov	sl, ip
 8001eba:	eb19 0309 	adds.w	r3, r9, r9
 8001ebe:	eb4a 040a 	adc.w	r4, sl, sl
 8001ec2:	4699      	mov	r9, r3
 8001ec4:	46a2      	mov	sl, r4
 8001ec6:	eb19 090b 	adds.w	r9, r9, fp
 8001eca:	eb4a 0a0c 	adc.w	sl, sl, ip
 8001ece:	f04f 0100 	mov.w	r1, #0
 8001ed2:	f04f 0200 	mov.w	r2, #0
 8001ed6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001eda:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001ede:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001ee2:	4689      	mov	r9, r1
 8001ee4:	4692      	mov	sl, r2
 8001ee6:	eb1b 0509 	adds.w	r5, fp, r9
 8001eea:	eb4c 060a 	adc.w	r6, ip, sl
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	f04f 0200 	mov.w	r2, #0
 8001ef8:	f04f 0300 	mov.w	r3, #0
 8001efc:	f04f 0400 	mov.w	r4, #0
 8001f00:	0094      	lsls	r4, r2, #2
 8001f02:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8001f06:	008b      	lsls	r3, r1, #2
 8001f08:	461a      	mov	r2, r3
 8001f0a:	4623      	mov	r3, r4
 8001f0c:	4628      	mov	r0, r5
 8001f0e:	4631      	mov	r1, r6
 8001f10:	f7fe f9e6 	bl	80002e0 <__aeabi_uldivmod>
 8001f14:	4603      	mov	r3, r0
 8001f16:	460c      	mov	r4, r1
 8001f18:	461a      	mov	r2, r3
 8001f1a:	4b77      	ldr	r3, [pc, #476]	; (80020f8 <UART_SetConfig+0x6f4>)
 8001f1c:	fba3 1302 	umull	r1, r3, r3, r2
 8001f20:	095b      	lsrs	r3, r3, #5
 8001f22:	2164      	movs	r1, #100	; 0x64
 8001f24:	fb01 f303 	mul.w	r3, r1, r3
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	011b      	lsls	r3, r3, #4
 8001f2c:	3332      	adds	r3, #50	; 0x32
 8001f2e:	4a72      	ldr	r2, [pc, #456]	; (80020f8 <UART_SetConfig+0x6f4>)
 8001f30:	fba2 2303 	umull	r2, r3, r2, r3
 8001f34:	095b      	lsrs	r3, r3, #5
 8001f36:	f003 020f 	and.w	r2, r3, #15
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4442      	add	r2, r8
 8001f40:	609a      	str	r2, [r3, #8]
 8001f42:	e0d0      	b.n	80020e6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8001f44:	f7fe fe5a 	bl	8000bfc <HAL_RCC_GetPCLK1Freq>
 8001f48:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	469a      	mov	sl, r3
 8001f4e:	f04f 0b00 	mov.w	fp, #0
 8001f52:	46d0      	mov	r8, sl
 8001f54:	46d9      	mov	r9, fp
 8001f56:	eb18 0308 	adds.w	r3, r8, r8
 8001f5a:	eb49 0409 	adc.w	r4, r9, r9
 8001f5e:	4698      	mov	r8, r3
 8001f60:	46a1      	mov	r9, r4
 8001f62:	eb18 080a 	adds.w	r8, r8, sl
 8001f66:	eb49 090b 	adc.w	r9, r9, fp
 8001f6a:	f04f 0100 	mov.w	r1, #0
 8001f6e:	f04f 0200 	mov.w	r2, #0
 8001f72:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001f76:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001f7a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001f7e:	4688      	mov	r8, r1
 8001f80:	4691      	mov	r9, r2
 8001f82:	eb1a 0508 	adds.w	r5, sl, r8
 8001f86:	eb4b 0609 	adc.w	r6, fp, r9
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	4619      	mov	r1, r3
 8001f90:	f04f 0200 	mov.w	r2, #0
 8001f94:	f04f 0300 	mov.w	r3, #0
 8001f98:	f04f 0400 	mov.w	r4, #0
 8001f9c:	0094      	lsls	r4, r2, #2
 8001f9e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8001fa2:	008b      	lsls	r3, r1, #2
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	4623      	mov	r3, r4
 8001fa8:	4628      	mov	r0, r5
 8001faa:	4631      	mov	r1, r6
 8001fac:	f7fe f998 	bl	80002e0 <__aeabi_uldivmod>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	460c      	mov	r4, r1
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	4b50      	ldr	r3, [pc, #320]	; (80020f8 <UART_SetConfig+0x6f4>)
 8001fb8:	fba3 2302 	umull	r2, r3, r3, r2
 8001fbc:	095b      	lsrs	r3, r3, #5
 8001fbe:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	469b      	mov	fp, r3
 8001fc6:	f04f 0c00 	mov.w	ip, #0
 8001fca:	46d9      	mov	r9, fp
 8001fcc:	46e2      	mov	sl, ip
 8001fce:	eb19 0309 	adds.w	r3, r9, r9
 8001fd2:	eb4a 040a 	adc.w	r4, sl, sl
 8001fd6:	4699      	mov	r9, r3
 8001fd8:	46a2      	mov	sl, r4
 8001fda:	eb19 090b 	adds.w	r9, r9, fp
 8001fde:	eb4a 0a0c 	adc.w	sl, sl, ip
 8001fe2:	f04f 0100 	mov.w	r1, #0
 8001fe6:	f04f 0200 	mov.w	r2, #0
 8001fea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001fee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001ff2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001ff6:	4689      	mov	r9, r1
 8001ff8:	4692      	mov	sl, r2
 8001ffa:	eb1b 0509 	adds.w	r5, fp, r9
 8001ffe:	eb4c 060a 	adc.w	r6, ip, sl
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	4619      	mov	r1, r3
 8002008:	f04f 0200 	mov.w	r2, #0
 800200c:	f04f 0300 	mov.w	r3, #0
 8002010:	f04f 0400 	mov.w	r4, #0
 8002014:	0094      	lsls	r4, r2, #2
 8002016:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800201a:	008b      	lsls	r3, r1, #2
 800201c:	461a      	mov	r2, r3
 800201e:	4623      	mov	r3, r4
 8002020:	4628      	mov	r0, r5
 8002022:	4631      	mov	r1, r6
 8002024:	f7fe f95c 	bl	80002e0 <__aeabi_uldivmod>
 8002028:	4603      	mov	r3, r0
 800202a:	460c      	mov	r4, r1
 800202c:	461a      	mov	r2, r3
 800202e:	4b32      	ldr	r3, [pc, #200]	; (80020f8 <UART_SetConfig+0x6f4>)
 8002030:	fba3 1302 	umull	r1, r3, r3, r2
 8002034:	095b      	lsrs	r3, r3, #5
 8002036:	2164      	movs	r1, #100	; 0x64
 8002038:	fb01 f303 	mul.w	r3, r1, r3
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	011b      	lsls	r3, r3, #4
 8002040:	3332      	adds	r3, #50	; 0x32
 8002042:	4a2d      	ldr	r2, [pc, #180]	; (80020f8 <UART_SetConfig+0x6f4>)
 8002044:	fba2 2303 	umull	r2, r3, r2, r3
 8002048:	095b      	lsrs	r3, r3, #5
 800204a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800204e:	4498      	add	r8, r3
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	469b      	mov	fp, r3
 8002054:	f04f 0c00 	mov.w	ip, #0
 8002058:	46d9      	mov	r9, fp
 800205a:	46e2      	mov	sl, ip
 800205c:	eb19 0309 	adds.w	r3, r9, r9
 8002060:	eb4a 040a 	adc.w	r4, sl, sl
 8002064:	4699      	mov	r9, r3
 8002066:	46a2      	mov	sl, r4
 8002068:	eb19 090b 	adds.w	r9, r9, fp
 800206c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002070:	f04f 0100 	mov.w	r1, #0
 8002074:	f04f 0200 	mov.w	r2, #0
 8002078:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800207c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002080:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002084:	4689      	mov	r9, r1
 8002086:	4692      	mov	sl, r2
 8002088:	eb1b 0509 	adds.w	r5, fp, r9
 800208c:	eb4c 060a 	adc.w	r6, ip, sl
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	4619      	mov	r1, r3
 8002096:	f04f 0200 	mov.w	r2, #0
 800209a:	f04f 0300 	mov.w	r3, #0
 800209e:	f04f 0400 	mov.w	r4, #0
 80020a2:	0094      	lsls	r4, r2, #2
 80020a4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80020a8:	008b      	lsls	r3, r1, #2
 80020aa:	461a      	mov	r2, r3
 80020ac:	4623      	mov	r3, r4
 80020ae:	4628      	mov	r0, r5
 80020b0:	4631      	mov	r1, r6
 80020b2:	f7fe f915 	bl	80002e0 <__aeabi_uldivmod>
 80020b6:	4603      	mov	r3, r0
 80020b8:	460c      	mov	r4, r1
 80020ba:	461a      	mov	r2, r3
 80020bc:	4b0e      	ldr	r3, [pc, #56]	; (80020f8 <UART_SetConfig+0x6f4>)
 80020be:	fba3 1302 	umull	r1, r3, r3, r2
 80020c2:	095b      	lsrs	r3, r3, #5
 80020c4:	2164      	movs	r1, #100	; 0x64
 80020c6:	fb01 f303 	mul.w	r3, r1, r3
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	011b      	lsls	r3, r3, #4
 80020ce:	3332      	adds	r3, #50	; 0x32
 80020d0:	4a09      	ldr	r2, [pc, #36]	; (80020f8 <UART_SetConfig+0x6f4>)
 80020d2:	fba2 2303 	umull	r2, r3, r2, r3
 80020d6:	095b      	lsrs	r3, r3, #5
 80020d8:	f003 020f 	and.w	r2, r3, #15
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4442      	add	r2, r8
 80020e2:	609a      	str	r2, [r3, #8]
}
 80020e4:	e7ff      	b.n	80020e6 <UART_SetConfig+0x6e2>
 80020e6:	bf00      	nop
 80020e8:	3714      	adds	r7, #20
 80020ea:	46bd      	mov	sp, r7
 80020ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020f0:	40011000 	.word	0x40011000
 80020f4:	40011400 	.word	0x40011400
 80020f8:	51eb851f 	.word	0x51eb851f

080020fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f103 0208 	add.w	r2, r3, #8
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002114:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f103 0208 	add.w	r2, r3, #8
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f103 0208 	add.w	r2, r3, #8
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800214a:	bf00      	nop
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr

08002156 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002156:	b480      	push	{r7}
 8002158:	b085      	sub	sp, #20
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
 800215e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	68fa      	ldr	r2, [r7, #12]
 800216a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	689a      	ldr	r2, [r3, #8]
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	683a      	ldr	r2, [r7, #0]
 800217a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	683a      	ldr	r2, [r7, #0]
 8002180:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	1c5a      	adds	r2, r3, #1
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	601a      	str	r2, [r3, #0]
}
 8002192:	bf00      	nop
 8002194:	3714      	adds	r7, #20
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr

0800219e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800219e:	b480      	push	{r7}
 80021a0:	b085      	sub	sp, #20
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
 80021a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021b4:	d103      	bne.n	80021be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	e00c      	b.n	80021d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	3308      	adds	r3, #8
 80021c2:	60fb      	str	r3, [r7, #12]
 80021c4:	e002      	b.n	80021cc <vListInsert+0x2e>
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	60fb      	str	r3, [r7, #12]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	68ba      	ldr	r2, [r7, #8]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d2f6      	bcs.n	80021c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	685a      	ldr	r2, [r3, #4]
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	683a      	ldr	r2, [r7, #0]
 80021e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	1c5a      	adds	r2, r3, #1
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	601a      	str	r2, [r3, #0]
}
 8002204:	bf00      	nop
 8002206:	3714      	adds	r7, #20
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	691b      	ldr	r3, [r3, #16]
 800221c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	6892      	ldr	r2, [r2, #8]
 8002226:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	6852      	ldr	r2, [r2, #4]
 8002230:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	429a      	cmp	r2, r3
 800223a:	d103      	bne.n	8002244 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	1e5a      	subs	r2, r3, #1
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
}
 8002258:	4618      	mov	r0, r3
 800225a:	3714      	adds	r7, #20
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d109      	bne.n	800228c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800227c:	f383 8811 	msr	BASEPRI, r3
 8002280:	f3bf 8f6f 	isb	sy
 8002284:	f3bf 8f4f 	dsb	sy
 8002288:	60bb      	str	r3, [r7, #8]
 800228a:	e7fe      	b.n	800228a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800228c:	f002 f986 	bl	800459c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002298:	68f9      	ldr	r1, [r7, #12]
 800229a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800229c:	fb01 f303 	mul.w	r3, r1, r3
 80022a0:	441a      	add	r2, r3
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2200      	movs	r2, #0
 80022aa:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022bc:	3b01      	subs	r3, #1
 80022be:	68f9      	ldr	r1, [r7, #12]
 80022c0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80022c2:	fb01 f303 	mul.w	r3, r1, r3
 80022c6:	441a      	add	r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	22ff      	movs	r2, #255	; 0xff
 80022d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	22ff      	movs	r2, #255	; 0xff
 80022d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d114      	bne.n	800230c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d01a      	beq.n	8002320 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	3310      	adds	r3, #16
 80022ee:	4618      	mov	r0, r3
 80022f0:	f001 fa42 	bl	8003778 <xTaskRemoveFromEventList>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d012      	beq.n	8002320 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80022fa:	4b0d      	ldr	r3, [pc, #52]	; (8002330 <xQueueGenericReset+0xcc>)
 80022fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002300:	601a      	str	r2, [r3, #0]
 8002302:	f3bf 8f4f 	dsb	sy
 8002306:	f3bf 8f6f 	isb	sy
 800230a:	e009      	b.n	8002320 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	3310      	adds	r3, #16
 8002310:	4618      	mov	r0, r3
 8002312:	f7ff fef3 	bl	80020fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	3324      	adds	r3, #36	; 0x24
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff feee 	bl	80020fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002320:	f002 f96a 	bl	80045f8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002324:	2301      	movs	r3, #1
}
 8002326:	4618      	mov	r0, r3
 8002328:	3710      	adds	r7, #16
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	e000ed04 	.word	0xe000ed04

08002334 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002334:	b580      	push	{r7, lr}
 8002336:	b08e      	sub	sp, #56	; 0x38
 8002338:	af02      	add	r7, sp, #8
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
 8002340:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d109      	bne.n	800235c <xQueueGenericCreateStatic+0x28>
 8002348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800234c:	f383 8811 	msr	BASEPRI, r3
 8002350:	f3bf 8f6f 	isb	sy
 8002354:	f3bf 8f4f 	dsb	sy
 8002358:	62bb      	str	r3, [r7, #40]	; 0x28
 800235a:	e7fe      	b.n	800235a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d109      	bne.n	8002376 <xQueueGenericCreateStatic+0x42>
 8002362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002366:	f383 8811 	msr	BASEPRI, r3
 800236a:	f3bf 8f6f 	isb	sy
 800236e:	f3bf 8f4f 	dsb	sy
 8002372:	627b      	str	r3, [r7, #36]	; 0x24
 8002374:	e7fe      	b.n	8002374 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d002      	beq.n	8002382 <xQueueGenericCreateStatic+0x4e>
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <xQueueGenericCreateStatic+0x52>
 8002382:	2301      	movs	r3, #1
 8002384:	e000      	b.n	8002388 <xQueueGenericCreateStatic+0x54>
 8002386:	2300      	movs	r3, #0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d109      	bne.n	80023a0 <xQueueGenericCreateStatic+0x6c>
 800238c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002390:	f383 8811 	msr	BASEPRI, r3
 8002394:	f3bf 8f6f 	isb	sy
 8002398:	f3bf 8f4f 	dsb	sy
 800239c:	623b      	str	r3, [r7, #32]
 800239e:	e7fe      	b.n	800239e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d102      	bne.n	80023ac <xQueueGenericCreateStatic+0x78>
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d101      	bne.n	80023b0 <xQueueGenericCreateStatic+0x7c>
 80023ac:	2301      	movs	r3, #1
 80023ae:	e000      	b.n	80023b2 <xQueueGenericCreateStatic+0x7e>
 80023b0:	2300      	movs	r3, #0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d109      	bne.n	80023ca <xQueueGenericCreateStatic+0x96>
 80023b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ba:	f383 8811 	msr	BASEPRI, r3
 80023be:	f3bf 8f6f 	isb	sy
 80023c2:	f3bf 8f4f 	dsb	sy
 80023c6:	61fb      	str	r3, [r7, #28]
 80023c8:	e7fe      	b.n	80023c8 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80023ca:	2348      	movs	r3, #72	; 0x48
 80023cc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	2b48      	cmp	r3, #72	; 0x48
 80023d2:	d009      	beq.n	80023e8 <xQueueGenericCreateStatic+0xb4>
 80023d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023d8:	f383 8811 	msr	BASEPRI, r3
 80023dc:	f3bf 8f6f 	isb	sy
 80023e0:	f3bf 8f4f 	dsb	sy
 80023e4:	61bb      	str	r3, [r7, #24]
 80023e6:	e7fe      	b.n	80023e6 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80023e8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80023ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d00d      	beq.n	8002410 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80023f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80023fc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002402:	9300      	str	r3, [sp, #0]
 8002404:	4613      	mov	r3, r2
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	68b9      	ldr	r1, [r7, #8]
 800240a:	68f8      	ldr	r0, [r7, #12]
 800240c:	f000 f805 	bl	800241a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002412:	4618      	mov	r0, r3
 8002414:	3730      	adds	r7, #48	; 0x30
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b084      	sub	sp, #16
 800241e:	af00      	add	r7, sp, #0
 8002420:	60f8      	str	r0, [r7, #12]
 8002422:	60b9      	str	r1, [r7, #8]
 8002424:	607a      	str	r2, [r7, #4]
 8002426:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d103      	bne.n	8002436 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	e002      	b.n	800243c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	68ba      	ldr	r2, [r7, #8]
 8002446:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002448:	2101      	movs	r1, #1
 800244a:	69b8      	ldr	r0, [r7, #24]
 800244c:	f7ff ff0a 	bl	8002264 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002450:	bf00      	nop
 8002452:	3710      	adds	r7, #16
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b08e      	sub	sp, #56	; 0x38
 800245c:	af00      	add	r7, sp, #0
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	607a      	str	r2, [r7, #4]
 8002464:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002466:	2300      	movs	r3, #0
 8002468:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800246e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002470:	2b00      	cmp	r3, #0
 8002472:	d109      	bne.n	8002488 <xQueueGenericSend+0x30>
 8002474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002478:	f383 8811 	msr	BASEPRI, r3
 800247c:	f3bf 8f6f 	isb	sy
 8002480:	f3bf 8f4f 	dsb	sy
 8002484:	62bb      	str	r3, [r7, #40]	; 0x28
 8002486:	e7fe      	b.n	8002486 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d103      	bne.n	8002496 <xQueueGenericSend+0x3e>
 800248e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <xQueueGenericSend+0x42>
 8002496:	2301      	movs	r3, #1
 8002498:	e000      	b.n	800249c <xQueueGenericSend+0x44>
 800249a:	2300      	movs	r3, #0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d109      	bne.n	80024b4 <xQueueGenericSend+0x5c>
 80024a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024a4:	f383 8811 	msr	BASEPRI, r3
 80024a8:	f3bf 8f6f 	isb	sy
 80024ac:	f3bf 8f4f 	dsb	sy
 80024b0:	627b      	str	r3, [r7, #36]	; 0x24
 80024b2:	e7fe      	b.n	80024b2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d103      	bne.n	80024c2 <xQueueGenericSend+0x6a>
 80024ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d101      	bne.n	80024c6 <xQueueGenericSend+0x6e>
 80024c2:	2301      	movs	r3, #1
 80024c4:	e000      	b.n	80024c8 <xQueueGenericSend+0x70>
 80024c6:	2300      	movs	r3, #0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d109      	bne.n	80024e0 <xQueueGenericSend+0x88>
 80024cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024d0:	f383 8811 	msr	BASEPRI, r3
 80024d4:	f3bf 8f6f 	isb	sy
 80024d8:	f3bf 8f4f 	dsb	sy
 80024dc:	623b      	str	r3, [r7, #32]
 80024de:	e7fe      	b.n	80024de <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80024e0:	f001 fb00 	bl	8003ae4 <xTaskGetSchedulerState>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d102      	bne.n	80024f0 <xQueueGenericSend+0x98>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d101      	bne.n	80024f4 <xQueueGenericSend+0x9c>
 80024f0:	2301      	movs	r3, #1
 80024f2:	e000      	b.n	80024f6 <xQueueGenericSend+0x9e>
 80024f4:	2300      	movs	r3, #0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d109      	bne.n	800250e <xQueueGenericSend+0xb6>
 80024fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024fe:	f383 8811 	msr	BASEPRI, r3
 8002502:	f3bf 8f6f 	isb	sy
 8002506:	f3bf 8f4f 	dsb	sy
 800250a:	61fb      	str	r3, [r7, #28]
 800250c:	e7fe      	b.n	800250c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800250e:	f002 f845 	bl	800459c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002514:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800251a:	429a      	cmp	r2, r3
 800251c:	d302      	bcc.n	8002524 <xQueueGenericSend+0xcc>
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	2b02      	cmp	r3, #2
 8002522:	d129      	bne.n	8002578 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002524:	683a      	ldr	r2, [r7, #0]
 8002526:	68b9      	ldr	r1, [r7, #8]
 8002528:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800252a:	f000 f9ff 	bl	800292c <prvCopyDataToQueue>
 800252e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002534:	2b00      	cmp	r3, #0
 8002536:	d010      	beq.n	800255a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800253a:	3324      	adds	r3, #36	; 0x24
 800253c:	4618      	mov	r0, r3
 800253e:	f001 f91b 	bl	8003778 <xTaskRemoveFromEventList>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d013      	beq.n	8002570 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002548:	4b3f      	ldr	r3, [pc, #252]	; (8002648 <xQueueGenericSend+0x1f0>)
 800254a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800254e:	601a      	str	r2, [r3, #0]
 8002550:	f3bf 8f4f 	dsb	sy
 8002554:	f3bf 8f6f 	isb	sy
 8002558:	e00a      	b.n	8002570 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800255a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800255c:	2b00      	cmp	r3, #0
 800255e:	d007      	beq.n	8002570 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002560:	4b39      	ldr	r3, [pc, #228]	; (8002648 <xQueueGenericSend+0x1f0>)
 8002562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	f3bf 8f4f 	dsb	sy
 800256c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002570:	f002 f842 	bl	80045f8 <vPortExitCritical>
				return pdPASS;
 8002574:	2301      	movs	r3, #1
 8002576:	e063      	b.n	8002640 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d103      	bne.n	8002586 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800257e:	f002 f83b 	bl	80045f8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002582:	2300      	movs	r3, #0
 8002584:	e05c      	b.n	8002640 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002588:	2b00      	cmp	r3, #0
 800258a:	d106      	bne.n	800259a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800258c:	f107 0314 	add.w	r3, r7, #20
 8002590:	4618      	mov	r0, r3
 8002592:	f001 f953 	bl	800383c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002596:	2301      	movs	r3, #1
 8002598:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800259a:	f002 f82d 	bl	80045f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800259e:	f000 fed1 	bl	8003344 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80025a2:	f001 fffb 	bl	800459c <vPortEnterCritical>
 80025a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80025ac:	b25b      	sxtb	r3, r3
 80025ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025b2:	d103      	bne.n	80025bc <xQueueGenericSend+0x164>
 80025b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b6:	2200      	movs	r2, #0
 80025b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80025c2:	b25b      	sxtb	r3, r3
 80025c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025c8:	d103      	bne.n	80025d2 <xQueueGenericSend+0x17a>
 80025ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80025d2:	f002 f811 	bl	80045f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80025d6:	1d3a      	adds	r2, r7, #4
 80025d8:	f107 0314 	add.w	r3, r7, #20
 80025dc:	4611      	mov	r1, r2
 80025de:	4618      	mov	r0, r3
 80025e0:	f001 f942 	bl	8003868 <xTaskCheckForTimeOut>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d124      	bne.n	8002634 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80025ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025ec:	f000 fa96 	bl	8002b1c <prvIsQueueFull>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d018      	beq.n	8002628 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80025f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f8:	3310      	adds	r3, #16
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	4611      	mov	r1, r2
 80025fe:	4618      	mov	r0, r3
 8002600:	f001 f86c 	bl	80036dc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002604:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002606:	f000 fa21 	bl	8002a4c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800260a:	f000 fea9 	bl	8003360 <xTaskResumeAll>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	f47f af7c 	bne.w	800250e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8002616:	4b0c      	ldr	r3, [pc, #48]	; (8002648 <xQueueGenericSend+0x1f0>)
 8002618:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800261c:	601a      	str	r2, [r3, #0]
 800261e:	f3bf 8f4f 	dsb	sy
 8002622:	f3bf 8f6f 	isb	sy
 8002626:	e772      	b.n	800250e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002628:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800262a:	f000 fa0f 	bl	8002a4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800262e:	f000 fe97 	bl	8003360 <xTaskResumeAll>
 8002632:	e76c      	b.n	800250e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002634:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002636:	f000 fa09 	bl	8002a4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800263a:	f000 fe91 	bl	8003360 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800263e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002640:	4618      	mov	r0, r3
 8002642:	3738      	adds	r7, #56	; 0x38
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	e000ed04 	.word	0xe000ed04

0800264c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b08e      	sub	sp, #56	; 0x38
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	607a      	str	r2, [r7, #4]
 8002658:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800265e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002660:	2b00      	cmp	r3, #0
 8002662:	d109      	bne.n	8002678 <xQueueGenericSendFromISR+0x2c>
 8002664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002668:	f383 8811 	msr	BASEPRI, r3
 800266c:	f3bf 8f6f 	isb	sy
 8002670:	f3bf 8f4f 	dsb	sy
 8002674:	627b      	str	r3, [r7, #36]	; 0x24
 8002676:	e7fe      	b.n	8002676 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d103      	bne.n	8002686 <xQueueGenericSendFromISR+0x3a>
 800267e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	2b00      	cmp	r3, #0
 8002684:	d101      	bne.n	800268a <xQueueGenericSendFromISR+0x3e>
 8002686:	2301      	movs	r3, #1
 8002688:	e000      	b.n	800268c <xQueueGenericSendFromISR+0x40>
 800268a:	2300      	movs	r3, #0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d109      	bne.n	80026a4 <xQueueGenericSendFromISR+0x58>
 8002690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002694:	f383 8811 	msr	BASEPRI, r3
 8002698:	f3bf 8f6f 	isb	sy
 800269c:	f3bf 8f4f 	dsb	sy
 80026a0:	623b      	str	r3, [r7, #32]
 80026a2:	e7fe      	b.n	80026a2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d103      	bne.n	80026b2 <xQueueGenericSendFromISR+0x66>
 80026aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d101      	bne.n	80026b6 <xQueueGenericSendFromISR+0x6a>
 80026b2:	2301      	movs	r3, #1
 80026b4:	e000      	b.n	80026b8 <xQueueGenericSendFromISR+0x6c>
 80026b6:	2300      	movs	r3, #0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d109      	bne.n	80026d0 <xQueueGenericSendFromISR+0x84>
 80026bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c0:	f383 8811 	msr	BASEPRI, r3
 80026c4:	f3bf 8f6f 	isb	sy
 80026c8:	f3bf 8f4f 	dsb	sy
 80026cc:	61fb      	str	r3, [r7, #28]
 80026ce:	e7fe      	b.n	80026ce <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80026d0:	f002 f840 	bl	8004754 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80026d4:	f3ef 8211 	mrs	r2, BASEPRI
 80026d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026dc:	f383 8811 	msr	BASEPRI, r3
 80026e0:	f3bf 8f6f 	isb	sy
 80026e4:	f3bf 8f4f 	dsb	sy
 80026e8:	61ba      	str	r2, [r7, #24]
 80026ea:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80026ec:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80026ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80026f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d302      	bcc.n	8002702 <xQueueGenericSendFromISR+0xb6>
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d12c      	bne.n	800275c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002704:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002708:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800270c:	683a      	ldr	r2, [r7, #0]
 800270e:	68b9      	ldr	r1, [r7, #8]
 8002710:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002712:	f000 f90b 	bl	800292c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002716:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800271a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800271e:	d112      	bne.n	8002746 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002724:	2b00      	cmp	r3, #0
 8002726:	d016      	beq.n	8002756 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800272a:	3324      	adds	r3, #36	; 0x24
 800272c:	4618      	mov	r0, r3
 800272e:	f001 f823 	bl	8003778 <xTaskRemoveFromEventList>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d00e      	beq.n	8002756 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00b      	beq.n	8002756 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2201      	movs	r2, #1
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	e007      	b.n	8002756 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002746:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800274a:	3301      	adds	r3, #1
 800274c:	b2db      	uxtb	r3, r3
 800274e:	b25a      	sxtb	r2, r3
 8002750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002752:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002756:	2301      	movs	r3, #1
 8002758:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800275a:	e001      	b.n	8002760 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800275c:	2300      	movs	r3, #0
 800275e:	637b      	str	r3, [r7, #52]	; 0x34
 8002760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002762:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800276a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800276c:	4618      	mov	r0, r3
 800276e:	3738      	adds	r7, #56	; 0x38
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b08c      	sub	sp, #48	; 0x30
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002780:	2300      	movs	r3, #0
 8002782:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800278a:	2b00      	cmp	r3, #0
 800278c:	d109      	bne.n	80027a2 <xQueueReceive+0x2e>
	__asm volatile
 800278e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002792:	f383 8811 	msr	BASEPRI, r3
 8002796:	f3bf 8f6f 	isb	sy
 800279a:	f3bf 8f4f 	dsb	sy
 800279e:	623b      	str	r3, [r7, #32]
 80027a0:	e7fe      	b.n	80027a0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d103      	bne.n	80027b0 <xQueueReceive+0x3c>
 80027a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d101      	bne.n	80027b4 <xQueueReceive+0x40>
 80027b0:	2301      	movs	r3, #1
 80027b2:	e000      	b.n	80027b6 <xQueueReceive+0x42>
 80027b4:	2300      	movs	r3, #0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d109      	bne.n	80027ce <xQueueReceive+0x5a>
 80027ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027be:	f383 8811 	msr	BASEPRI, r3
 80027c2:	f3bf 8f6f 	isb	sy
 80027c6:	f3bf 8f4f 	dsb	sy
 80027ca:	61fb      	str	r3, [r7, #28]
 80027cc:	e7fe      	b.n	80027cc <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80027ce:	f001 f989 	bl	8003ae4 <xTaskGetSchedulerState>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d102      	bne.n	80027de <xQueueReceive+0x6a>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <xQueueReceive+0x6e>
 80027de:	2301      	movs	r3, #1
 80027e0:	e000      	b.n	80027e4 <xQueueReceive+0x70>
 80027e2:	2300      	movs	r3, #0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d109      	bne.n	80027fc <xQueueReceive+0x88>
 80027e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ec:	f383 8811 	msr	BASEPRI, r3
 80027f0:	f3bf 8f6f 	isb	sy
 80027f4:	f3bf 8f4f 	dsb	sy
 80027f8:	61bb      	str	r3, [r7, #24]
 80027fa:	e7fe      	b.n	80027fa <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80027fc:	f001 fece 	bl	800459c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002804:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002808:	2b00      	cmp	r3, #0
 800280a:	d01f      	beq.n	800284c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800280c:	68b9      	ldr	r1, [r7, #8]
 800280e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002810:	f000 f8f6 	bl	8002a00 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002816:	1e5a      	subs	r2, r3, #1
 8002818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800281a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800281c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800281e:	691b      	ldr	r3, [r3, #16]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d00f      	beq.n	8002844 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002826:	3310      	adds	r3, #16
 8002828:	4618      	mov	r0, r3
 800282a:	f000 ffa5 	bl	8003778 <xTaskRemoveFromEventList>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d007      	beq.n	8002844 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002834:	4b3c      	ldr	r3, [pc, #240]	; (8002928 <xQueueReceive+0x1b4>)
 8002836:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800283a:	601a      	str	r2, [r3, #0]
 800283c:	f3bf 8f4f 	dsb	sy
 8002840:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002844:	f001 fed8 	bl	80045f8 <vPortExitCritical>
				return pdPASS;
 8002848:	2301      	movs	r3, #1
 800284a:	e069      	b.n	8002920 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d103      	bne.n	800285a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002852:	f001 fed1 	bl	80045f8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002856:	2300      	movs	r3, #0
 8002858:	e062      	b.n	8002920 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800285a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800285c:	2b00      	cmp	r3, #0
 800285e:	d106      	bne.n	800286e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002860:	f107 0310 	add.w	r3, r7, #16
 8002864:	4618      	mov	r0, r3
 8002866:	f000 ffe9 	bl	800383c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800286a:	2301      	movs	r3, #1
 800286c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800286e:	f001 fec3 	bl	80045f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002872:	f000 fd67 	bl	8003344 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002876:	f001 fe91 	bl	800459c <vPortEnterCritical>
 800287a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800287c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002880:	b25b      	sxtb	r3, r3
 8002882:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002886:	d103      	bne.n	8002890 <xQueueReceive+0x11c>
 8002888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800288a:	2200      	movs	r2, #0
 800288c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002892:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002896:	b25b      	sxtb	r3, r3
 8002898:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800289c:	d103      	bne.n	80028a6 <xQueueReceive+0x132>
 800289e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028a6:	f001 fea7 	bl	80045f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80028aa:	1d3a      	adds	r2, r7, #4
 80028ac:	f107 0310 	add.w	r3, r7, #16
 80028b0:	4611      	mov	r1, r2
 80028b2:	4618      	mov	r0, r3
 80028b4:	f000 ffd8 	bl	8003868 <xTaskCheckForTimeOut>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d123      	bne.n	8002906 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80028be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028c0:	f000 f916 	bl	8002af0 <prvIsQueueEmpty>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d017      	beq.n	80028fa <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80028ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028cc:	3324      	adds	r3, #36	; 0x24
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	4611      	mov	r1, r2
 80028d2:	4618      	mov	r0, r3
 80028d4:	f000 ff02 	bl	80036dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80028d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028da:	f000 f8b7 	bl	8002a4c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80028de:	f000 fd3f 	bl	8003360 <xTaskResumeAll>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d189      	bne.n	80027fc <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80028e8:	4b0f      	ldr	r3, [pc, #60]	; (8002928 <xQueueReceive+0x1b4>)
 80028ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028ee:	601a      	str	r2, [r3, #0]
 80028f0:	f3bf 8f4f 	dsb	sy
 80028f4:	f3bf 8f6f 	isb	sy
 80028f8:	e780      	b.n	80027fc <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80028fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028fc:	f000 f8a6 	bl	8002a4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002900:	f000 fd2e 	bl	8003360 <xTaskResumeAll>
 8002904:	e77a      	b.n	80027fc <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002906:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002908:	f000 f8a0 	bl	8002a4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800290c:	f000 fd28 	bl	8003360 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002910:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002912:	f000 f8ed 	bl	8002af0 <prvIsQueueEmpty>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	f43f af6f 	beq.w	80027fc <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800291e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002920:	4618      	mov	r0, r3
 8002922:	3730      	adds	r7, #48	; 0x30
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	e000ed04 	.word	0xe000ed04

0800292c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002938:	2300      	movs	r3, #0
 800293a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002940:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002946:	2b00      	cmp	r3, #0
 8002948:	d10d      	bne.n	8002966 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d14d      	bne.n	80029ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	4618      	mov	r0, r3
 8002958:	f001 f8e2 	bl	8003b20 <xTaskPriorityDisinherit>
 800295c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2200      	movs	r2, #0
 8002962:	609a      	str	r2, [r3, #8]
 8002964:	e043      	b.n	80029ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d119      	bne.n	80029a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6858      	ldr	r0, [r3, #4]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002974:	461a      	mov	r2, r3
 8002976:	68b9      	ldr	r1, [r7, #8]
 8002978:	f004 f952 	bl	8006c20 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	685a      	ldr	r2, [r3, #4]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002984:	441a      	add	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	685a      	ldr	r2, [r3, #4]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	429a      	cmp	r2, r3
 8002994:	d32b      	bcc.n	80029ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	605a      	str	r2, [r3, #4]
 800299e:	e026      	b.n	80029ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	68d8      	ldr	r0, [r3, #12]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a8:	461a      	mov	r2, r3
 80029aa:	68b9      	ldr	r1, [r7, #8]
 80029ac:	f004 f938 	bl	8006c20 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	68da      	ldr	r2, [r3, #12]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b8:	425b      	negs	r3, r3
 80029ba:	441a      	add	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	68da      	ldr	r2, [r3, #12]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d207      	bcs.n	80029dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	689a      	ldr	r2, [r3, #8]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d4:	425b      	negs	r3, r3
 80029d6:	441a      	add	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d105      	bne.n	80029ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d002      	beq.n	80029ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	3b01      	subs	r3, #1
 80029ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	1c5a      	adds	r2, r3, #1
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80029f6:	697b      	ldr	r3, [r7, #20]
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3718      	adds	r7, #24
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d018      	beq.n	8002a44 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	68da      	ldr	r2, [r3, #12]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	441a      	add	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	68da      	ldr	r2, [r3, #12]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d303      	bcc.n	8002a34 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	68d9      	ldr	r1, [r3, #12]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	6838      	ldr	r0, [r7, #0]
 8002a40:	f004 f8ee 	bl	8006c20 <memcpy>
	}
}
 8002a44:	bf00      	nop
 8002a46:	3708      	adds	r7, #8
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002a54:	f001 fda2 	bl	800459c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a5e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a60:	e011      	b.n	8002a86 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d012      	beq.n	8002a90 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	3324      	adds	r3, #36	; 0x24
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f000 fe82 	bl	8003778 <xTaskRemoveFromEventList>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002a7a:	f000 ff55 	bl	8003928 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002a7e:	7bfb      	ldrb	r3, [r7, #15]
 8002a80:	3b01      	subs	r3, #1
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	dce9      	bgt.n	8002a62 <prvUnlockQueue+0x16>
 8002a8e:	e000      	b.n	8002a92 <prvUnlockQueue+0x46>
					break;
 8002a90:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	22ff      	movs	r2, #255	; 0xff
 8002a96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002a9a:	f001 fdad 	bl	80045f8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002a9e:	f001 fd7d 	bl	800459c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002aa8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002aaa:	e011      	b.n	8002ad0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d012      	beq.n	8002ada <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	3310      	adds	r3, #16
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f000 fe5d 	bl	8003778 <xTaskRemoveFromEventList>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002ac4:	f000 ff30 	bl	8003928 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002ac8:	7bbb      	ldrb	r3, [r7, #14]
 8002aca:	3b01      	subs	r3, #1
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ad0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	dce9      	bgt.n	8002aac <prvUnlockQueue+0x60>
 8002ad8:	e000      	b.n	8002adc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002ada:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	22ff      	movs	r2, #255	; 0xff
 8002ae0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002ae4:	f001 fd88 	bl	80045f8 <vPortExitCritical>
}
 8002ae8:	bf00      	nop
 8002aea:	3710      	adds	r7, #16
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002af8:	f001 fd50 	bl	800459c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d102      	bne.n	8002b0a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002b04:	2301      	movs	r3, #1
 8002b06:	60fb      	str	r3, [r7, #12]
 8002b08:	e001      	b.n	8002b0e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002b0e:	f001 fd73 	bl	80045f8 <vPortExitCritical>

	return xReturn;
 8002b12:	68fb      	ldr	r3, [r7, #12]
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3710      	adds	r7, #16
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002b24:	f001 fd3a 	bl	800459c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d102      	bne.n	8002b3a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002b34:	2301      	movs	r3, #1
 8002b36:	60fb      	str	r3, [r7, #12]
 8002b38:	e001      	b.n	8002b3e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002b3e:	f001 fd5b 	bl	80045f8 <vPortExitCritical>

	return xReturn;
 8002b42:	68fb      	ldr	r3, [r7, #12]
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3710      	adds	r7, #16
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b56:	2300      	movs	r3, #0
 8002b58:	60fb      	str	r3, [r7, #12]
 8002b5a:	e014      	b.n	8002b86 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002b5c:	4a0e      	ldr	r2, [pc, #56]	; (8002b98 <vQueueAddToRegistry+0x4c>)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d10b      	bne.n	8002b80 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002b68:	490b      	ldr	r1, [pc, #44]	; (8002b98 <vQueueAddToRegistry+0x4c>)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	683a      	ldr	r2, [r7, #0]
 8002b6e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002b72:	4a09      	ldr	r2, [pc, #36]	; (8002b98 <vQueueAddToRegistry+0x4c>)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	4413      	add	r3, r2
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002b7e:	e005      	b.n	8002b8c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	3301      	adds	r3, #1
 8002b84:	60fb      	str	r3, [r7, #12]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2b07      	cmp	r3, #7
 8002b8a:	d9e7      	bls.n	8002b5c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002b8c:	bf00      	nop
 8002b8e:	3714      	adds	r7, #20
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr
 8002b98:	200046f8 	.word	0x200046f8

08002b9c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002bac:	f001 fcf6 	bl	800459c <vPortEnterCritical>
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002bb6:	b25b      	sxtb	r3, r3
 8002bb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bbc:	d103      	bne.n	8002bc6 <vQueueWaitForMessageRestricted+0x2a>
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bcc:	b25b      	sxtb	r3, r3
 8002bce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bd2:	d103      	bne.n	8002bdc <vQueueWaitForMessageRestricted+0x40>
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002bdc:	f001 fd0c 	bl	80045f8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d106      	bne.n	8002bf6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	3324      	adds	r3, #36	; 0x24
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	68b9      	ldr	r1, [r7, #8]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f000 fd97 	bl	8003724 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002bf6:	6978      	ldr	r0, [r7, #20]
 8002bf8:	f7ff ff28 	bl	8002a4c <prvUnlockQueue>
	}
 8002bfc:	bf00      	nop
 8002bfe:	3718      	adds	r7, #24
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b08e      	sub	sp, #56	; 0x38
 8002c08:	af04      	add	r7, sp, #16
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]
 8002c10:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d109      	bne.n	8002c2c <xTaskCreateStatic+0x28>
 8002c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c1c:	f383 8811 	msr	BASEPRI, r3
 8002c20:	f3bf 8f6f 	isb	sy
 8002c24:	f3bf 8f4f 	dsb	sy
 8002c28:	623b      	str	r3, [r7, #32]
 8002c2a:	e7fe      	b.n	8002c2a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8002c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d109      	bne.n	8002c46 <xTaskCreateStatic+0x42>
 8002c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c36:	f383 8811 	msr	BASEPRI, r3
 8002c3a:	f3bf 8f6f 	isb	sy
 8002c3e:	f3bf 8f4f 	dsb	sy
 8002c42:	61fb      	str	r3, [r7, #28]
 8002c44:	e7fe      	b.n	8002c44 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002c46:	2354      	movs	r3, #84	; 0x54
 8002c48:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	2b54      	cmp	r3, #84	; 0x54
 8002c4e:	d009      	beq.n	8002c64 <xTaskCreateStatic+0x60>
 8002c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c54:	f383 8811 	msr	BASEPRI, r3
 8002c58:	f3bf 8f6f 	isb	sy
 8002c5c:	f3bf 8f4f 	dsb	sy
 8002c60:	61bb      	str	r3, [r7, #24]
 8002c62:	e7fe      	b.n	8002c62 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002c64:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d01e      	beq.n	8002caa <xTaskCreateStatic+0xa6>
 8002c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d01b      	beq.n	8002caa <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c74:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c7a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7e:	2202      	movs	r2, #2
 8002c80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002c84:	2300      	movs	r3, #0
 8002c86:	9303      	str	r3, [sp, #12]
 8002c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8a:	9302      	str	r3, [sp, #8]
 8002c8c:	f107 0314 	add.w	r3, r7, #20
 8002c90:	9301      	str	r3, [sp, #4]
 8002c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c94:	9300      	str	r3, [sp, #0]
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	68b9      	ldr	r1, [r7, #8]
 8002c9c:	68f8      	ldr	r0, [r7, #12]
 8002c9e:	f000 f850 	bl	8002d42 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002ca2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ca4:	f000 f8d4 	bl	8002e50 <prvAddNewTaskToReadyList>
 8002ca8:	e001      	b.n	8002cae <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8002caa:	2300      	movs	r3, #0
 8002cac:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002cae:	697b      	ldr	r3, [r7, #20]
	}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3728      	adds	r7, #40	; 0x28
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b08c      	sub	sp, #48	; 0x30
 8002cbc:	af04      	add	r7, sp, #16
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	603b      	str	r3, [r7, #0]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002cc8:	88fb      	ldrh	r3, [r7, #6]
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f001 fd7f 	bl	80047d0 <pvPortMalloc>
 8002cd2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00e      	beq.n	8002cf8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002cda:	2054      	movs	r0, #84	; 0x54
 8002cdc:	f001 fd78 	bl	80047d0 <pvPortMalloc>
 8002ce0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d003      	beq.n	8002cf0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	631a      	str	r2, [r3, #48]	; 0x30
 8002cee:	e005      	b.n	8002cfc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002cf0:	6978      	ldr	r0, [r7, #20]
 8002cf2:	f001 fe2f 	bl	8004954 <vPortFree>
 8002cf6:	e001      	b.n	8002cfc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d017      	beq.n	8002d32 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002d0a:	88fa      	ldrh	r2, [r7, #6]
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	9303      	str	r3, [sp, #12]
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	9302      	str	r3, [sp, #8]
 8002d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d16:	9301      	str	r3, [sp, #4]
 8002d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d1a:	9300      	str	r3, [sp, #0]
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	68b9      	ldr	r1, [r7, #8]
 8002d20:	68f8      	ldr	r0, [r7, #12]
 8002d22:	f000 f80e 	bl	8002d42 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002d26:	69f8      	ldr	r0, [r7, #28]
 8002d28:	f000 f892 	bl	8002e50 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	61bb      	str	r3, [r7, #24]
 8002d30:	e002      	b.n	8002d38 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002d32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d36:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002d38:	69bb      	ldr	r3, [r7, #24]
	}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3720      	adds	r7, #32
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b088      	sub	sp, #32
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	60f8      	str	r0, [r7, #12]
 8002d4a:	60b9      	str	r1, [r7, #8]
 8002d4c:	607a      	str	r2, [r7, #4]
 8002d4e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	4413      	add	r3, r2
 8002d60:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	f023 0307 	bic.w	r3, r3, #7
 8002d68:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	f003 0307 	and.w	r3, r3, #7
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d009      	beq.n	8002d88 <prvInitialiseNewTask+0x46>
 8002d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d78:	f383 8811 	msr	BASEPRI, r3
 8002d7c:	f3bf 8f6f 	isb	sy
 8002d80:	f3bf 8f4f 	dsb	sy
 8002d84:	617b      	str	r3, [r7, #20]
 8002d86:	e7fe      	b.n	8002d86 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d01f      	beq.n	8002dce <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d8e:	2300      	movs	r3, #0
 8002d90:	61fb      	str	r3, [r7, #28]
 8002d92:	e012      	b.n	8002dba <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002d94:	68ba      	ldr	r2, [r7, #8]
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	4413      	add	r3, r2
 8002d9a:	7819      	ldrb	r1, [r3, #0]
 8002d9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	4413      	add	r3, r2
 8002da2:	3334      	adds	r3, #52	; 0x34
 8002da4:	460a      	mov	r2, r1
 8002da6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002da8:	68ba      	ldr	r2, [r7, #8]
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	4413      	add	r3, r2
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d006      	beq.n	8002dc2 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	3301      	adds	r3, #1
 8002db8:	61fb      	str	r3, [r7, #28]
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	2b0f      	cmp	r3, #15
 8002dbe:	d9e9      	bls.n	8002d94 <prvInitialiseNewTask+0x52>
 8002dc0:	e000      	b.n	8002dc4 <prvInitialiseNewTask+0x82>
			{
				break;
 8002dc2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002dcc:	e003      	b.n	8002dd6 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd8:	2b06      	cmp	r3, #6
 8002dda:	d901      	bls.n	8002de0 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002ddc:	2306      	movs	r3, #6
 8002dde:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002de4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002dea:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dee:	2200      	movs	r2, #0
 8002df0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df4:	3304      	adds	r3, #4
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7ff f9a0 	bl	800213c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfe:	3318      	adds	r3, #24
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7ff f99b 	bl	800213c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e0a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e0e:	f1c3 0207 	rsb	r2, r3, #7
 8002e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e14:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e1a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e1e:	2200      	movs	r2, #0
 8002e20:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002e2a:	683a      	ldr	r2, [r7, #0]
 8002e2c:	68f9      	ldr	r1, [r7, #12]
 8002e2e:	69b8      	ldr	r0, [r7, #24]
 8002e30:	f001 fa8e 	bl	8004350 <pxPortInitialiseStack>
 8002e34:	4602      	mov	r2, r0
 8002e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e38:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d002      	beq.n	8002e46 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002e46:	bf00      	nop
 8002e48:	3720      	adds	r7, #32
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
	...

08002e50 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002e58:	f001 fba0 	bl	800459c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002e5c:	4b2a      	ldr	r3, [pc, #168]	; (8002f08 <prvAddNewTaskToReadyList+0xb8>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	3301      	adds	r3, #1
 8002e62:	4a29      	ldr	r2, [pc, #164]	; (8002f08 <prvAddNewTaskToReadyList+0xb8>)
 8002e64:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002e66:	4b29      	ldr	r3, [pc, #164]	; (8002f0c <prvAddNewTaskToReadyList+0xbc>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d109      	bne.n	8002e82 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002e6e:	4a27      	ldr	r2, [pc, #156]	; (8002f0c <prvAddNewTaskToReadyList+0xbc>)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002e74:	4b24      	ldr	r3, [pc, #144]	; (8002f08 <prvAddNewTaskToReadyList+0xb8>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d110      	bne.n	8002e9e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002e7c:	f000 fd78 	bl	8003970 <prvInitialiseTaskLists>
 8002e80:	e00d      	b.n	8002e9e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002e82:	4b23      	ldr	r3, [pc, #140]	; (8002f10 <prvAddNewTaskToReadyList+0xc0>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d109      	bne.n	8002e9e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002e8a:	4b20      	ldr	r3, [pc, #128]	; (8002f0c <prvAddNewTaskToReadyList+0xbc>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d802      	bhi.n	8002e9e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002e98:	4a1c      	ldr	r2, [pc, #112]	; (8002f0c <prvAddNewTaskToReadyList+0xbc>)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002e9e:	4b1d      	ldr	r3, [pc, #116]	; (8002f14 <prvAddNewTaskToReadyList+0xc4>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	4a1b      	ldr	r2, [pc, #108]	; (8002f14 <prvAddNewTaskToReadyList+0xc4>)
 8002ea6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eac:	2201      	movs	r2, #1
 8002eae:	409a      	lsls	r2, r3
 8002eb0:	4b19      	ldr	r3, [pc, #100]	; (8002f18 <prvAddNewTaskToReadyList+0xc8>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	4a18      	ldr	r2, [pc, #96]	; (8002f18 <prvAddNewTaskToReadyList+0xc8>)
 8002eb8:	6013      	str	r3, [r2, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	4413      	add	r3, r2
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	4a15      	ldr	r2, [pc, #84]	; (8002f1c <prvAddNewTaskToReadyList+0xcc>)
 8002ec8:	441a      	add	r2, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	3304      	adds	r3, #4
 8002ece:	4619      	mov	r1, r3
 8002ed0:	4610      	mov	r0, r2
 8002ed2:	f7ff f940 	bl	8002156 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002ed6:	f001 fb8f 	bl	80045f8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002eda:	4b0d      	ldr	r3, [pc, #52]	; (8002f10 <prvAddNewTaskToReadyList+0xc0>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00e      	beq.n	8002f00 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002ee2:	4b0a      	ldr	r3, [pc, #40]	; (8002f0c <prvAddNewTaskToReadyList+0xbc>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d207      	bcs.n	8002f00 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002ef0:	4b0b      	ldr	r3, [pc, #44]	; (8002f20 <prvAddNewTaskToReadyList+0xd0>)
 8002ef2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	f3bf 8f4f 	dsb	sy
 8002efc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002f00:	bf00      	nop
 8002f02:	3708      	adds	r7, #8
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	200002f4 	.word	0x200002f4
 8002f0c:	200001f4 	.word	0x200001f4
 8002f10:	20000300 	.word	0x20000300
 8002f14:	20000310 	.word	0x20000310
 8002f18:	200002fc 	.word	0x200002fc
 8002f1c:	200001f8 	.word	0x200001f8
 8002f20:	e000ed04 	.word	0xe000ed04

08002f24 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/
	struct Command_Info info;
#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b08a      	sub	sp, #40	; 0x28
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d109      	bne.n	8002f4c <vTaskDelayUntil+0x28>
 8002f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f3c:	f383 8811 	msr	BASEPRI, r3
 8002f40:	f3bf 8f6f 	isb	sy
 8002f44:	f3bf 8f4f 	dsb	sy
 8002f48:	617b      	str	r3, [r7, #20]
 8002f4a:	e7fe      	b.n	8002f4a <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d109      	bne.n	8002f66 <vTaskDelayUntil+0x42>
 8002f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f56:	f383 8811 	msr	BASEPRI, r3
 8002f5a:	f3bf 8f6f 	isb	sy
 8002f5e:	f3bf 8f4f 	dsb	sy
 8002f62:	613b      	str	r3, [r7, #16]
 8002f64:	e7fe      	b.n	8002f64 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 8002f66:	4b29      	ldr	r3, [pc, #164]	; (800300c <vTaskDelayUntil+0xe8>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d009      	beq.n	8002f82 <vTaskDelayUntil+0x5e>
 8002f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f72:	f383 8811 	msr	BASEPRI, r3
 8002f76:	f3bf 8f6f 	isb	sy
 8002f7a:	f3bf 8f4f 	dsb	sy
 8002f7e:	60fb      	str	r3, [r7, #12]
 8002f80:	e7fe      	b.n	8002f80 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 8002f82:	f000 f9df 	bl	8003344 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8002f86:	4b22      	ldr	r3, [pc, #136]	; (8003010 <vTaskDelayUntil+0xec>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	4413      	add	r3, r2
 8002f94:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	6a3a      	ldr	r2, [r7, #32]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d20b      	bcs.n	8002fb8 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	69fa      	ldr	r2, [r7, #28]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d211      	bcs.n	8002fce <vTaskDelayUntil+0xaa>
 8002faa:	69fa      	ldr	r2, [r7, #28]
 8002fac:	6a3b      	ldr	r3, [r7, #32]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d90d      	bls.n	8002fce <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	627b      	str	r3, [r7, #36]	; 0x24
 8002fb6:	e00a      	b.n	8002fce <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	69fa      	ldr	r2, [r7, #28]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d303      	bcc.n	8002fca <vTaskDelayUntil+0xa6>
 8002fc2:	69fa      	ldr	r2, [r7, #28]
 8002fc4:	6a3b      	ldr	r3, [r7, #32]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d901      	bls.n	8002fce <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	69fa      	ldr	r2, [r7, #28]
 8002fd2:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8002fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d006      	beq.n	8002fe8 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8002fda:	69fa      	ldr	r2, [r7, #28]
 8002fdc:	6a3b      	ldr	r3, [r7, #32]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	2100      	movs	r1, #0
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f000 fe20 	bl	8003c28 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8002fe8:	f000 f9ba 	bl	8003360 <xTaskResumeAll>
 8002fec:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d107      	bne.n	8003004 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 8002ff4:	4b07      	ldr	r3, [pc, #28]	; (8003014 <vTaskDelayUntil+0xf0>)
 8002ff6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ffa:	601a      	str	r2, [r3, #0]
 8002ffc:	f3bf 8f4f 	dsb	sy
 8003000:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003004:	bf00      	nop
 8003006:	3728      	adds	r7, #40	; 0x28
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	2000031c 	.word	0x2000031c
 8003010:	200002f8 	.word	0x200002f8
 8003014:	e000ed04 	.word	0xe000ed04

08003018 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8003020:	f001 fabc 	bl	800459c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d102      	bne.n	8003030 <vTaskSuspend+0x18>
 800302a:	4b3c      	ldr	r3, [pc, #240]	; (800311c <vTaskSuspend+0x104>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	e000      	b.n	8003032 <vTaskSuspend+0x1a>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	3304      	adds	r3, #4
 8003038:	4618      	mov	r0, r3
 800303a:	f7ff f8e9 	bl	8002210 <uxListRemove>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d115      	bne.n	8003070 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003048:	4935      	ldr	r1, [pc, #212]	; (8003120 <vTaskSuspend+0x108>)
 800304a:	4613      	mov	r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	4413      	add	r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	440b      	add	r3, r1
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d10a      	bne.n	8003070 <vTaskSuspend+0x58>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800305e:	2201      	movs	r2, #1
 8003060:	fa02 f303 	lsl.w	r3, r2, r3
 8003064:	43da      	mvns	r2, r3
 8003066:	4b2f      	ldr	r3, [pc, #188]	; (8003124 <vTaskSuspend+0x10c>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4013      	ands	r3, r2
 800306c:	4a2d      	ldr	r2, [pc, #180]	; (8003124 <vTaskSuspend+0x10c>)
 800306e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003074:	2b00      	cmp	r3, #0
 8003076:	d004      	beq.n	8003082 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	3318      	adds	r3, #24
 800307c:	4618      	mov	r0, r3
 800307e:	f7ff f8c7 	bl	8002210 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	3304      	adds	r3, #4
 8003086:	4619      	mov	r1, r3
 8003088:	4827      	ldr	r0, [pc, #156]	; (8003128 <vTaskSuspend+0x110>)
 800308a:	f7ff f864 	bl	8002156 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b01      	cmp	r3, #1
 8003098:	d103      	bne.n	80030a2 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80030a2:	f001 faa9 	bl	80045f8 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80030a6:	4b21      	ldr	r3, [pc, #132]	; (800312c <vTaskSuspend+0x114>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d005      	beq.n	80030ba <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80030ae:	f001 fa75 	bl	800459c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80030b2:	f000 fcf7 	bl	8003aa4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80030b6:	f001 fa9f 	bl	80045f8 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80030ba:	4b18      	ldr	r3, [pc, #96]	; (800311c <vTaskSuspend+0x104>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d126      	bne.n	8003112 <vTaskSuspend+0xfa>
		{
			if( xSchedulerRunning != pdFALSE )
 80030c4:	4b19      	ldr	r3, [pc, #100]	; (800312c <vTaskSuspend+0x114>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d016      	beq.n	80030fa <vTaskSuspend+0xe2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80030cc:	4b18      	ldr	r3, [pc, #96]	; (8003130 <vTaskSuspend+0x118>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d009      	beq.n	80030e8 <vTaskSuspend+0xd0>
 80030d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030d8:	f383 8811 	msr	BASEPRI, r3
 80030dc:	f3bf 8f6f 	isb	sy
 80030e0:	f3bf 8f4f 	dsb	sy
 80030e4:	60bb      	str	r3, [r7, #8]
 80030e6:	e7fe      	b.n	80030e6 <vTaskSuspend+0xce>
				portYIELD_WITHIN_API();
 80030e8:	4b12      	ldr	r3, [pc, #72]	; (8003134 <vTaskSuspend+0x11c>)
 80030ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030ee:	601a      	str	r2, [r3, #0]
 80030f0:	f3bf 8f4f 	dsb	sy
 80030f4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80030f8:	e00b      	b.n	8003112 <vTaskSuspend+0xfa>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80030fa:	4b0b      	ldr	r3, [pc, #44]	; (8003128 <vTaskSuspend+0x110>)
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	4b0e      	ldr	r3, [pc, #56]	; (8003138 <vTaskSuspend+0x120>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	429a      	cmp	r2, r3
 8003104:	d103      	bne.n	800310e <vTaskSuspend+0xf6>
					pxCurrentTCB = NULL;
 8003106:	4b05      	ldr	r3, [pc, #20]	; (800311c <vTaskSuspend+0x104>)
 8003108:	2200      	movs	r2, #0
 800310a:	601a      	str	r2, [r3, #0]
	}
 800310c:	e001      	b.n	8003112 <vTaskSuspend+0xfa>
					vTaskSwitchContext();
 800310e:	f000 fa8b 	bl	8003628 <vTaskSwitchContext>
	}
 8003112:	bf00      	nop
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	200001f4 	.word	0x200001f4
 8003120:	200001f8 	.word	0x200001f8
 8003124:	200002fc 	.word	0x200002fc
 8003128:	200002e0 	.word	0x200002e0
 800312c:	20000300 	.word	0x20000300
 8003130:	2000031c 	.word	0x2000031c
 8003134:	e000ed04 	.word	0xe000ed04
 8003138:	200002f4 	.word	0x200002f4

0800313c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800313c:	b480      	push	{r7}
 800313e:	b087      	sub	sp, #28
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8003144:	2300      	movs	r3, #0
 8003146:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d109      	bne.n	8003166 <prvTaskIsTaskSuspended+0x2a>
 8003152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003156:	f383 8811 	msr	BASEPRI, r3
 800315a:	f3bf 8f6f 	isb	sy
 800315e:	f3bf 8f4f 	dsb	sy
 8003162:	60fb      	str	r3, [r7, #12]
 8003164:	e7fe      	b.n	8003164 <prvTaskIsTaskSuspended+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	4a0a      	ldr	r2, [pc, #40]	; (8003194 <prvTaskIsTaskSuspended+0x58>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d10a      	bne.n	8003186 <prvTaskIsTaskSuspended+0x4a>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003174:	4a08      	ldr	r2, [pc, #32]	; (8003198 <prvTaskIsTaskSuspended+0x5c>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d005      	beq.n	8003186 <prvTaskIsTaskSuspended+0x4a>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800317e:	2b00      	cmp	r3, #0
 8003180:	d101      	bne.n	8003186 <prvTaskIsTaskSuspended+0x4a>
				{
					xReturn = pdTRUE;
 8003182:	2301      	movs	r3, #1
 8003184:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003186:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8003188:	4618      	mov	r0, r3
 800318a:	371c      	adds	r7, #28
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr
 8003194:	200002e0 	.word	0x200002e0
 8003198:	200002b4 	.word	0x200002b4

0800319c <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 800319c:	b580      	push	{r7, lr}
 800319e:	b08a      	sub	sp, #40	; 0x28
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 80031a4:	2300      	movs	r3, #0
 80031a6:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d109      	bne.n	80031c6 <xTaskResumeFromISR+0x2a>
 80031b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b6:	f383 8811 	msr	BASEPRI, r3
 80031ba:	f3bf 8f6f 	isb	sy
 80031be:	f3bf 8f4f 	dsb	sy
 80031c2:	61bb      	str	r3, [r7, #24]
 80031c4:	e7fe      	b.n	80031c4 <xTaskResumeFromISR+0x28>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80031c6:	f001 fac5 	bl	8004754 <vPortValidateInterruptPriority>
	__asm volatile
 80031ca:	f3ef 8211 	mrs	r2, BASEPRI
 80031ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d2:	f383 8811 	msr	BASEPRI, r3
 80031d6:	f3bf 8f6f 	isb	sy
 80031da:	f3bf 8f4f 	dsb	sy
 80031de:	617a      	str	r2, [r7, #20]
 80031e0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80031e2:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80031e4:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80031e6:	6a38      	ldr	r0, [r7, #32]
 80031e8:	f7ff ffa8 	bl	800313c <prvTaskIsTaskSuspended>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d02f      	beq.n	8003252 <xTaskResumeFromISR+0xb6>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031f2:	4b1d      	ldr	r3, [pc, #116]	; (8003268 <xTaskResumeFromISR+0xcc>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d125      	bne.n	8003246 <xTaskResumeFromISR+0xaa>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80031fa:	6a3b      	ldr	r3, [r7, #32]
 80031fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031fe:	4b1b      	ldr	r3, [pc, #108]	; (800326c <xTaskResumeFromISR+0xd0>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003204:	429a      	cmp	r2, r3
 8003206:	d301      	bcc.n	800320c <xTaskResumeFromISR+0x70>
					{
						xYieldRequired = pdTRUE;
 8003208:	2301      	movs	r3, #1
 800320a:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800320c:	6a3b      	ldr	r3, [r7, #32]
 800320e:	3304      	adds	r3, #4
 8003210:	4618      	mov	r0, r3
 8003212:	f7fe fffd 	bl	8002210 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003216:	6a3b      	ldr	r3, [r7, #32]
 8003218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321a:	2201      	movs	r2, #1
 800321c:	409a      	lsls	r2, r3
 800321e:	4b14      	ldr	r3, [pc, #80]	; (8003270 <xTaskResumeFromISR+0xd4>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4313      	orrs	r3, r2
 8003224:	4a12      	ldr	r2, [pc, #72]	; (8003270 <xTaskResumeFromISR+0xd4>)
 8003226:	6013      	str	r3, [r2, #0]
 8003228:	6a3b      	ldr	r3, [r7, #32]
 800322a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800322c:	4613      	mov	r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	4413      	add	r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	4a0f      	ldr	r2, [pc, #60]	; (8003274 <xTaskResumeFromISR+0xd8>)
 8003236:	441a      	add	r2, r3
 8003238:	6a3b      	ldr	r3, [r7, #32]
 800323a:	3304      	adds	r3, #4
 800323c:	4619      	mov	r1, r3
 800323e:	4610      	mov	r0, r2
 8003240:	f7fe ff89 	bl	8002156 <vListInsertEnd>
 8003244:	e005      	b.n	8003252 <xTaskResumeFromISR+0xb6>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8003246:	6a3b      	ldr	r3, [r7, #32]
 8003248:	3318      	adds	r3, #24
 800324a:	4619      	mov	r1, r3
 800324c:	480a      	ldr	r0, [pc, #40]	; (8003278 <xTaskResumeFromISR+0xdc>)
 800324e:	f7fe ff82 	bl	8002156 <vListInsertEnd>
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f383 8811 	msr	BASEPRI, r3
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 800325c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800325e:	4618      	mov	r0, r3
 8003260:	3728      	adds	r7, #40	; 0x28
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	2000031c 	.word	0x2000031c
 800326c:	200001f4 	.word	0x200001f4
 8003270:	200002fc 	.word	0x200002fc
 8003274:	200001f8 	.word	0x200001f8
 8003278:	200002b4 	.word	0x200002b4

0800327c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b08a      	sub	sp, #40	; 0x28
 8003280:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003282:	2300      	movs	r3, #0
 8003284:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003286:	2300      	movs	r3, #0
 8003288:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800328a:	463a      	mov	r2, r7
 800328c:	1d39      	adds	r1, r7, #4
 800328e:	f107 0308 	add.w	r3, r7, #8
 8003292:	4618      	mov	r0, r3
 8003294:	f001 fc72 	bl	8004b7c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003298:	6839      	ldr	r1, [r7, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	68ba      	ldr	r2, [r7, #8]
 800329e:	9202      	str	r2, [sp, #8]
 80032a0:	9301      	str	r3, [sp, #4]
 80032a2:	2300      	movs	r3, #0
 80032a4:	9300      	str	r3, [sp, #0]
 80032a6:	2300      	movs	r3, #0
 80032a8:	460a      	mov	r2, r1
 80032aa:	4920      	ldr	r1, [pc, #128]	; (800332c <vTaskStartScheduler+0xb0>)
 80032ac:	4820      	ldr	r0, [pc, #128]	; (8003330 <vTaskStartScheduler+0xb4>)
 80032ae:	f7ff fca9 	bl	8002c04 <xTaskCreateStatic>
 80032b2:	4602      	mov	r2, r0
 80032b4:	4b1f      	ldr	r3, [pc, #124]	; (8003334 <vTaskStartScheduler+0xb8>)
 80032b6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80032b8:	4b1e      	ldr	r3, [pc, #120]	; (8003334 <vTaskStartScheduler+0xb8>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d002      	beq.n	80032c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80032c0:	2301      	movs	r3, #1
 80032c2:	617b      	str	r3, [r7, #20]
 80032c4:	e001      	b.n	80032ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80032c6:	2300      	movs	r3, #0
 80032c8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d102      	bne.n	80032d6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80032d0:	f000 fd10 	bl	8003cf4 <xTimerCreateTimerTask>
 80032d4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d115      	bne.n	8003308 <vTaskStartScheduler+0x8c>
	__asm volatile
 80032dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032e0:	f383 8811 	msr	BASEPRI, r3
 80032e4:	f3bf 8f6f 	isb	sy
 80032e8:	f3bf 8f4f 	dsb	sy
 80032ec:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80032ee:	4b12      	ldr	r3, [pc, #72]	; (8003338 <vTaskStartScheduler+0xbc>)
 80032f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032f4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80032f6:	4b11      	ldr	r3, [pc, #68]	; (800333c <vTaskStartScheduler+0xc0>)
 80032f8:	2201      	movs	r2, #1
 80032fa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80032fc:	4b10      	ldr	r3, [pc, #64]	; (8003340 <vTaskStartScheduler+0xc4>)
 80032fe:	2200      	movs	r2, #0
 8003300:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003302:	f001 f8ad 	bl	8004460 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003306:	e00d      	b.n	8003324 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800330e:	d109      	bne.n	8003324 <vTaskStartScheduler+0xa8>
 8003310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003314:	f383 8811 	msr	BASEPRI, r3
 8003318:	f3bf 8f6f 	isb	sy
 800331c:	f3bf 8f4f 	dsb	sy
 8003320:	60fb      	str	r3, [r7, #12]
 8003322:	e7fe      	b.n	8003322 <vTaskStartScheduler+0xa6>
}
 8003324:	bf00      	nop
 8003326:	3718      	adds	r7, #24
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	08007ee8 	.word	0x08007ee8
 8003330:	08003941 	.word	0x08003941
 8003334:	20000318 	.word	0x20000318
 8003338:	20000314 	.word	0x20000314
 800333c:	20000300 	.word	0x20000300
 8003340:	200002f8 	.word	0x200002f8

08003344 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003344:	b480      	push	{r7}
 8003346:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003348:	4b04      	ldr	r3, [pc, #16]	; (800335c <vTaskSuspendAll+0x18>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	3301      	adds	r3, #1
 800334e:	4a03      	ldr	r2, [pc, #12]	; (800335c <vTaskSuspendAll+0x18>)
 8003350:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003352:	bf00      	nop
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr
 800335c:	2000031c 	.word	0x2000031c

08003360 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003366:	2300      	movs	r3, #0
 8003368:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800336a:	2300      	movs	r3, #0
 800336c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800336e:	4b41      	ldr	r3, [pc, #260]	; (8003474 <xTaskResumeAll+0x114>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d109      	bne.n	800338a <xTaskResumeAll+0x2a>
 8003376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800337a:	f383 8811 	msr	BASEPRI, r3
 800337e:	f3bf 8f6f 	isb	sy
 8003382:	f3bf 8f4f 	dsb	sy
 8003386:	603b      	str	r3, [r7, #0]
 8003388:	e7fe      	b.n	8003388 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800338a:	f001 f907 	bl	800459c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800338e:	4b39      	ldr	r3, [pc, #228]	; (8003474 <xTaskResumeAll+0x114>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	3b01      	subs	r3, #1
 8003394:	4a37      	ldr	r2, [pc, #220]	; (8003474 <xTaskResumeAll+0x114>)
 8003396:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003398:	4b36      	ldr	r3, [pc, #216]	; (8003474 <xTaskResumeAll+0x114>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d161      	bne.n	8003464 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80033a0:	4b35      	ldr	r3, [pc, #212]	; (8003478 <xTaskResumeAll+0x118>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d05d      	beq.n	8003464 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80033a8:	e02e      	b.n	8003408 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033aa:	4b34      	ldr	r3, [pc, #208]	; (800347c <xTaskResumeAll+0x11c>)
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	3318      	adds	r3, #24
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7fe ff2a 	bl	8002210 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	3304      	adds	r3, #4
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7fe ff25 	bl	8002210 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ca:	2201      	movs	r2, #1
 80033cc:	409a      	lsls	r2, r3
 80033ce:	4b2c      	ldr	r3, [pc, #176]	; (8003480 <xTaskResumeAll+0x120>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	4a2a      	ldr	r2, [pc, #168]	; (8003480 <xTaskResumeAll+0x120>)
 80033d6:	6013      	str	r3, [r2, #0]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033dc:	4613      	mov	r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	4413      	add	r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	4a27      	ldr	r2, [pc, #156]	; (8003484 <xTaskResumeAll+0x124>)
 80033e6:	441a      	add	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	3304      	adds	r3, #4
 80033ec:	4619      	mov	r1, r3
 80033ee:	4610      	mov	r0, r2
 80033f0:	f7fe feb1 	bl	8002156 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033f8:	4b23      	ldr	r3, [pc, #140]	; (8003488 <xTaskResumeAll+0x128>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fe:	429a      	cmp	r2, r3
 8003400:	d302      	bcc.n	8003408 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8003402:	4b22      	ldr	r3, [pc, #136]	; (800348c <xTaskResumeAll+0x12c>)
 8003404:	2201      	movs	r2, #1
 8003406:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003408:	4b1c      	ldr	r3, [pc, #112]	; (800347c <xTaskResumeAll+0x11c>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d1cc      	bne.n	80033aa <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d001      	beq.n	800341a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003416:	f000 fb45 	bl	8003aa4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800341a:	4b1d      	ldr	r3, [pc, #116]	; (8003490 <xTaskResumeAll+0x130>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d010      	beq.n	8003448 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003426:	f000 f847 	bl	80034b8 <xTaskIncrementTick>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d002      	beq.n	8003436 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8003430:	4b16      	ldr	r3, [pc, #88]	; (800348c <xTaskResumeAll+0x12c>)
 8003432:	2201      	movs	r2, #1
 8003434:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	3b01      	subs	r3, #1
 800343a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1f1      	bne.n	8003426 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8003442:	4b13      	ldr	r3, [pc, #76]	; (8003490 <xTaskResumeAll+0x130>)
 8003444:	2200      	movs	r2, #0
 8003446:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003448:	4b10      	ldr	r3, [pc, #64]	; (800348c <xTaskResumeAll+0x12c>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d009      	beq.n	8003464 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003450:	2301      	movs	r3, #1
 8003452:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003454:	4b0f      	ldr	r3, [pc, #60]	; (8003494 <xTaskResumeAll+0x134>)
 8003456:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800345a:	601a      	str	r2, [r3, #0]
 800345c:	f3bf 8f4f 	dsb	sy
 8003460:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003464:	f001 f8c8 	bl	80045f8 <vPortExitCritical>

	return xAlreadyYielded;
 8003468:	68bb      	ldr	r3, [r7, #8]
}
 800346a:	4618      	mov	r0, r3
 800346c:	3710      	adds	r7, #16
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	2000031c 	.word	0x2000031c
 8003478:	200002f4 	.word	0x200002f4
 800347c:	200002b4 	.word	0x200002b4
 8003480:	200002fc 	.word	0x200002fc
 8003484:	200001f8 	.word	0x200001f8
 8003488:	200001f4 	.word	0x200001f4
 800348c:	20000308 	.word	0x20000308
 8003490:	20000304 	.word	0x20000304
 8003494:	e000ed04 	.word	0xe000ed04

08003498 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800349e:	4b05      	ldr	r3, [pc, #20]	; (80034b4 <xTaskGetTickCount+0x1c>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80034a4:	687b      	ldr	r3, [r7, #4]
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	370c      	adds	r7, #12
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	200002f8 	.word	0x200002f8

080034b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b086      	sub	sp, #24
 80034bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80034be:	2300      	movs	r3, #0
 80034c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034c2:	4b4e      	ldr	r3, [pc, #312]	; (80035fc <xTaskIncrementTick+0x144>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	f040 8087 	bne.w	80035da <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80034cc:	4b4c      	ldr	r3, [pc, #304]	; (8003600 <xTaskIncrementTick+0x148>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	3301      	adds	r3, #1
 80034d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80034d4:	4a4a      	ldr	r2, [pc, #296]	; (8003600 <xTaskIncrementTick+0x148>)
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d11f      	bne.n	8003520 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80034e0:	4b48      	ldr	r3, [pc, #288]	; (8003604 <xTaskIncrementTick+0x14c>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d009      	beq.n	80034fe <xTaskIncrementTick+0x46>
 80034ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ee:	f383 8811 	msr	BASEPRI, r3
 80034f2:	f3bf 8f6f 	isb	sy
 80034f6:	f3bf 8f4f 	dsb	sy
 80034fa:	603b      	str	r3, [r7, #0]
 80034fc:	e7fe      	b.n	80034fc <xTaskIncrementTick+0x44>
 80034fe:	4b41      	ldr	r3, [pc, #260]	; (8003604 <xTaskIncrementTick+0x14c>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	60fb      	str	r3, [r7, #12]
 8003504:	4b40      	ldr	r3, [pc, #256]	; (8003608 <xTaskIncrementTick+0x150>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a3e      	ldr	r2, [pc, #248]	; (8003604 <xTaskIncrementTick+0x14c>)
 800350a:	6013      	str	r3, [r2, #0]
 800350c:	4a3e      	ldr	r2, [pc, #248]	; (8003608 <xTaskIncrementTick+0x150>)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6013      	str	r3, [r2, #0]
 8003512:	4b3e      	ldr	r3, [pc, #248]	; (800360c <xTaskIncrementTick+0x154>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	3301      	adds	r3, #1
 8003518:	4a3c      	ldr	r2, [pc, #240]	; (800360c <xTaskIncrementTick+0x154>)
 800351a:	6013      	str	r3, [r2, #0]
 800351c:	f000 fac2 	bl	8003aa4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003520:	4b3b      	ldr	r3, [pc, #236]	; (8003610 <xTaskIncrementTick+0x158>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	693a      	ldr	r2, [r7, #16]
 8003526:	429a      	cmp	r2, r3
 8003528:	d348      	bcc.n	80035bc <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800352a:	4b36      	ldr	r3, [pc, #216]	; (8003604 <xTaskIncrementTick+0x14c>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d104      	bne.n	800353e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003534:	4b36      	ldr	r3, [pc, #216]	; (8003610 <xTaskIncrementTick+0x158>)
 8003536:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800353a:	601a      	str	r2, [r3, #0]
					break;
 800353c:	e03e      	b.n	80035bc <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800353e:	4b31      	ldr	r3, [pc, #196]	; (8003604 <xTaskIncrementTick+0x14c>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	429a      	cmp	r2, r3
 8003554:	d203      	bcs.n	800355e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003556:	4a2e      	ldr	r2, [pc, #184]	; (8003610 <xTaskIncrementTick+0x158>)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800355c:	e02e      	b.n	80035bc <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	3304      	adds	r3, #4
 8003562:	4618      	mov	r0, r3
 8003564:	f7fe fe54 	bl	8002210 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356c:	2b00      	cmp	r3, #0
 800356e:	d004      	beq.n	800357a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	3318      	adds	r3, #24
 8003574:	4618      	mov	r0, r3
 8003576:	f7fe fe4b 	bl	8002210 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357e:	2201      	movs	r2, #1
 8003580:	409a      	lsls	r2, r3
 8003582:	4b24      	ldr	r3, [pc, #144]	; (8003614 <xTaskIncrementTick+0x15c>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4313      	orrs	r3, r2
 8003588:	4a22      	ldr	r2, [pc, #136]	; (8003614 <xTaskIncrementTick+0x15c>)
 800358a:	6013      	str	r3, [r2, #0]
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003590:	4613      	mov	r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	4413      	add	r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	4a1f      	ldr	r2, [pc, #124]	; (8003618 <xTaskIncrementTick+0x160>)
 800359a:	441a      	add	r2, r3
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	3304      	adds	r3, #4
 80035a0:	4619      	mov	r1, r3
 80035a2:	4610      	mov	r0, r2
 80035a4:	f7fe fdd7 	bl	8002156 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035ac:	4b1b      	ldr	r3, [pc, #108]	; (800361c <xTaskIncrementTick+0x164>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d3b9      	bcc.n	800352a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80035b6:	2301      	movs	r3, #1
 80035b8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80035ba:	e7b6      	b.n	800352a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80035bc:	4b17      	ldr	r3, [pc, #92]	; (800361c <xTaskIncrementTick+0x164>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035c2:	4915      	ldr	r1, [pc, #84]	; (8003618 <xTaskIncrementTick+0x160>)
 80035c4:	4613      	mov	r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	4413      	add	r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	440b      	add	r3, r1
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d907      	bls.n	80035e4 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80035d4:	2301      	movs	r3, #1
 80035d6:	617b      	str	r3, [r7, #20]
 80035d8:	e004      	b.n	80035e4 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80035da:	4b11      	ldr	r3, [pc, #68]	; (8003620 <xTaskIncrementTick+0x168>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	3301      	adds	r3, #1
 80035e0:	4a0f      	ldr	r2, [pc, #60]	; (8003620 <xTaskIncrementTick+0x168>)
 80035e2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80035e4:	4b0f      	ldr	r3, [pc, #60]	; (8003624 <xTaskIncrementTick+0x16c>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d001      	beq.n	80035f0 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 80035ec:	2301      	movs	r3, #1
 80035ee:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80035f0:	697b      	ldr	r3, [r7, #20]
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3718      	adds	r7, #24
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	2000031c 	.word	0x2000031c
 8003600:	200002f8 	.word	0x200002f8
 8003604:	200002ac 	.word	0x200002ac
 8003608:	200002b0 	.word	0x200002b0
 800360c:	2000030c 	.word	0x2000030c
 8003610:	20000314 	.word	0x20000314
 8003614:	200002fc 	.word	0x200002fc
 8003618:	200001f8 	.word	0x200001f8
 800361c:	200001f4 	.word	0x200001f4
 8003620:	20000304 	.word	0x20000304
 8003624:	20000308 	.word	0x20000308

08003628 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003628:	b480      	push	{r7}
 800362a:	b087      	sub	sp, #28
 800362c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800362e:	4b26      	ldr	r3, [pc, #152]	; (80036c8 <vTaskSwitchContext+0xa0>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d003      	beq.n	800363e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003636:	4b25      	ldr	r3, [pc, #148]	; (80036cc <vTaskSwitchContext+0xa4>)
 8003638:	2201      	movs	r2, #1
 800363a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800363c:	e03e      	b.n	80036bc <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800363e:	4b23      	ldr	r3, [pc, #140]	; (80036cc <vTaskSwitchContext+0xa4>)
 8003640:	2200      	movs	r2, #0
 8003642:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003644:	4b22      	ldr	r3, [pc, #136]	; (80036d0 <vTaskSwitchContext+0xa8>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	fab3 f383 	clz	r3, r3
 8003650:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003652:	7afb      	ldrb	r3, [r7, #11]
 8003654:	f1c3 031f 	rsb	r3, r3, #31
 8003658:	617b      	str	r3, [r7, #20]
 800365a:	491e      	ldr	r1, [pc, #120]	; (80036d4 <vTaskSwitchContext+0xac>)
 800365c:	697a      	ldr	r2, [r7, #20]
 800365e:	4613      	mov	r3, r2
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	4413      	add	r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	440b      	add	r3, r1
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d109      	bne.n	8003682 <vTaskSwitchContext+0x5a>
	__asm volatile
 800366e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003672:	f383 8811 	msr	BASEPRI, r3
 8003676:	f3bf 8f6f 	isb	sy
 800367a:	f3bf 8f4f 	dsb	sy
 800367e:	607b      	str	r3, [r7, #4]
 8003680:	e7fe      	b.n	8003680 <vTaskSwitchContext+0x58>
 8003682:	697a      	ldr	r2, [r7, #20]
 8003684:	4613      	mov	r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	4413      	add	r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	4a11      	ldr	r2, [pc, #68]	; (80036d4 <vTaskSwitchContext+0xac>)
 800368e:	4413      	add	r3, r2
 8003690:	613b      	str	r3, [r7, #16]
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	685a      	ldr	r2, [r3, #4]
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	605a      	str	r2, [r3, #4]
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	685a      	ldr	r2, [r3, #4]
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	3308      	adds	r3, #8
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d104      	bne.n	80036b2 <vTaskSwitchContext+0x8a>
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	685a      	ldr	r2, [r3, #4]
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	605a      	str	r2, [r3, #4]
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	4a07      	ldr	r2, [pc, #28]	; (80036d8 <vTaskSwitchContext+0xb0>)
 80036ba:	6013      	str	r3, [r2, #0]
}
 80036bc:	bf00      	nop
 80036be:	371c      	adds	r7, #28
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr
 80036c8:	2000031c 	.word	0x2000031c
 80036cc:	20000308 	.word	0x20000308
 80036d0:	200002fc 	.word	0x200002fc
 80036d4:	200001f8 	.word	0x200001f8
 80036d8:	200001f4 	.word	0x200001f4

080036dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d109      	bne.n	8003700 <vTaskPlaceOnEventList+0x24>
 80036ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f0:	f383 8811 	msr	BASEPRI, r3
 80036f4:	f3bf 8f6f 	isb	sy
 80036f8:	f3bf 8f4f 	dsb	sy
 80036fc:	60fb      	str	r3, [r7, #12]
 80036fe:	e7fe      	b.n	80036fe <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003700:	4b07      	ldr	r3, [pc, #28]	; (8003720 <vTaskPlaceOnEventList+0x44>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	3318      	adds	r3, #24
 8003706:	4619      	mov	r1, r3
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f7fe fd48 	bl	800219e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800370e:	2101      	movs	r1, #1
 8003710:	6838      	ldr	r0, [r7, #0]
 8003712:	f000 fa89 	bl	8003c28 <prvAddCurrentTaskToDelayedList>
}
 8003716:	bf00      	nop
 8003718:	3710      	adds	r7, #16
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	200001f4 	.word	0x200001f4

08003724 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003724:	b580      	push	{r7, lr}
 8003726:	b086      	sub	sp, #24
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d109      	bne.n	800374a <vTaskPlaceOnEventListRestricted+0x26>
 8003736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800373a:	f383 8811 	msr	BASEPRI, r3
 800373e:	f3bf 8f6f 	isb	sy
 8003742:	f3bf 8f4f 	dsb	sy
 8003746:	617b      	str	r3, [r7, #20]
 8003748:	e7fe      	b.n	8003748 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800374a:	4b0a      	ldr	r3, [pc, #40]	; (8003774 <vTaskPlaceOnEventListRestricted+0x50>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	3318      	adds	r3, #24
 8003750:	4619      	mov	r1, r3
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f7fe fcff 	bl	8002156 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d002      	beq.n	8003764 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800375e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003762:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003764:	6879      	ldr	r1, [r7, #4]
 8003766:	68b8      	ldr	r0, [r7, #8]
 8003768:	f000 fa5e 	bl	8003c28 <prvAddCurrentTaskToDelayedList>
	}
 800376c:	bf00      	nop
 800376e:	3718      	adds	r7, #24
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	200001f4 	.word	0x200001f4

08003778 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b086      	sub	sp, #24
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d109      	bne.n	80037a2 <xTaskRemoveFromEventList+0x2a>
 800378e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003792:	f383 8811 	msr	BASEPRI, r3
 8003796:	f3bf 8f6f 	isb	sy
 800379a:	f3bf 8f4f 	dsb	sy
 800379e:	60fb      	str	r3, [r7, #12]
 80037a0:	e7fe      	b.n	80037a0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	3318      	adds	r3, #24
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7fe fd32 	bl	8002210 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037ac:	4b1d      	ldr	r3, [pc, #116]	; (8003824 <xTaskRemoveFromEventList+0xac>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d11c      	bne.n	80037ee <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	3304      	adds	r3, #4
 80037b8:	4618      	mov	r0, r3
 80037ba:	f7fe fd29 	bl	8002210 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c2:	2201      	movs	r2, #1
 80037c4:	409a      	lsls	r2, r3
 80037c6:	4b18      	ldr	r3, [pc, #96]	; (8003828 <xTaskRemoveFromEventList+0xb0>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	4a16      	ldr	r2, [pc, #88]	; (8003828 <xTaskRemoveFromEventList+0xb0>)
 80037ce:	6013      	str	r3, [r2, #0]
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037d4:	4613      	mov	r3, r2
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	4413      	add	r3, r2
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	4a13      	ldr	r2, [pc, #76]	; (800382c <xTaskRemoveFromEventList+0xb4>)
 80037de:	441a      	add	r2, r3
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	3304      	adds	r3, #4
 80037e4:	4619      	mov	r1, r3
 80037e6:	4610      	mov	r0, r2
 80037e8:	f7fe fcb5 	bl	8002156 <vListInsertEnd>
 80037ec:	e005      	b.n	80037fa <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	3318      	adds	r3, #24
 80037f2:	4619      	mov	r1, r3
 80037f4:	480e      	ldr	r0, [pc, #56]	; (8003830 <xTaskRemoveFromEventList+0xb8>)
 80037f6:	f7fe fcae 	bl	8002156 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037fe:	4b0d      	ldr	r3, [pc, #52]	; (8003834 <xTaskRemoveFromEventList+0xbc>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003804:	429a      	cmp	r2, r3
 8003806:	d905      	bls.n	8003814 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003808:	2301      	movs	r3, #1
 800380a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800380c:	4b0a      	ldr	r3, [pc, #40]	; (8003838 <xTaskRemoveFromEventList+0xc0>)
 800380e:	2201      	movs	r2, #1
 8003810:	601a      	str	r2, [r3, #0]
 8003812:	e001      	b.n	8003818 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8003814:	2300      	movs	r3, #0
 8003816:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003818:	697b      	ldr	r3, [r7, #20]
}
 800381a:	4618      	mov	r0, r3
 800381c:	3718      	adds	r7, #24
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	2000031c 	.word	0x2000031c
 8003828:	200002fc 	.word	0x200002fc
 800382c:	200001f8 	.word	0x200001f8
 8003830:	200002b4 	.word	0x200002b4
 8003834:	200001f4 	.word	0x200001f4
 8003838:	20000308 	.word	0x20000308

0800383c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003844:	4b06      	ldr	r3, [pc, #24]	; (8003860 <vTaskInternalSetTimeOutState+0x24>)
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800384c:	4b05      	ldr	r3, [pc, #20]	; (8003864 <vTaskInternalSetTimeOutState+0x28>)
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	605a      	str	r2, [r3, #4]
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr
 8003860:	2000030c 	.word	0x2000030c
 8003864:	200002f8 	.word	0x200002f8

08003868 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b088      	sub	sp, #32
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d109      	bne.n	800388c <xTaskCheckForTimeOut+0x24>
 8003878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800387c:	f383 8811 	msr	BASEPRI, r3
 8003880:	f3bf 8f6f 	isb	sy
 8003884:	f3bf 8f4f 	dsb	sy
 8003888:	613b      	str	r3, [r7, #16]
 800388a:	e7fe      	b.n	800388a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d109      	bne.n	80038a6 <xTaskCheckForTimeOut+0x3e>
 8003892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003896:	f383 8811 	msr	BASEPRI, r3
 800389a:	f3bf 8f6f 	isb	sy
 800389e:	f3bf 8f4f 	dsb	sy
 80038a2:	60fb      	str	r3, [r7, #12]
 80038a4:	e7fe      	b.n	80038a4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80038a6:	f000 fe79 	bl	800459c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80038aa:	4b1d      	ldr	r3, [pc, #116]	; (8003920 <xTaskCheckForTimeOut+0xb8>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038c2:	d102      	bne.n	80038ca <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80038c4:	2300      	movs	r3, #0
 80038c6:	61fb      	str	r3, [r7, #28]
 80038c8:	e023      	b.n	8003912 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	4b15      	ldr	r3, [pc, #84]	; (8003924 <xTaskCheckForTimeOut+0xbc>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d007      	beq.n	80038e6 <xTaskCheckForTimeOut+0x7e>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	69ba      	ldr	r2, [r7, #24]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d302      	bcc.n	80038e6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80038e0:	2301      	movs	r3, #1
 80038e2:	61fb      	str	r3, [r7, #28]
 80038e4:	e015      	b.n	8003912 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	697a      	ldr	r2, [r7, #20]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d20b      	bcs.n	8003908 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	1ad2      	subs	r2, r2, r3
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f7ff ff9d 	bl	800383c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003902:	2300      	movs	r3, #0
 8003904:	61fb      	str	r3, [r7, #28]
 8003906:	e004      	b.n	8003912 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	2200      	movs	r2, #0
 800390c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800390e:	2301      	movs	r3, #1
 8003910:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003912:	f000 fe71 	bl	80045f8 <vPortExitCritical>

	return xReturn;
 8003916:	69fb      	ldr	r3, [r7, #28]
}
 8003918:	4618      	mov	r0, r3
 800391a:	3720      	adds	r7, #32
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}
 8003920:	200002f8 	.word	0x200002f8
 8003924:	2000030c 	.word	0x2000030c

08003928 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800392c:	4b03      	ldr	r3, [pc, #12]	; (800393c <vTaskMissedYield+0x14>)
 800392e:	2201      	movs	r2, #1
 8003930:	601a      	str	r2, [r3, #0]
}
 8003932:	bf00      	nop
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr
 800393c:	20000308 	.word	0x20000308

08003940 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003948:	f000 f852 	bl	80039f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800394c:	4b06      	ldr	r3, [pc, #24]	; (8003968 <prvIdleTask+0x28>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2b01      	cmp	r3, #1
 8003952:	d9f9      	bls.n	8003948 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003954:	4b05      	ldr	r3, [pc, #20]	; (800396c <prvIdleTask+0x2c>)
 8003956:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800395a:	601a      	str	r2, [r3, #0]
 800395c:	f3bf 8f4f 	dsb	sy
 8003960:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003964:	e7f0      	b.n	8003948 <prvIdleTask+0x8>
 8003966:	bf00      	nop
 8003968:	200001f8 	.word	0x200001f8
 800396c:	e000ed04 	.word	0xe000ed04

08003970 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003976:	2300      	movs	r3, #0
 8003978:	607b      	str	r3, [r7, #4]
 800397a:	e00c      	b.n	8003996 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	4613      	mov	r3, r2
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	4413      	add	r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	4a12      	ldr	r2, [pc, #72]	; (80039d0 <prvInitialiseTaskLists+0x60>)
 8003988:	4413      	add	r3, r2
 800398a:	4618      	mov	r0, r3
 800398c:	f7fe fbb6 	bl	80020fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	3301      	adds	r3, #1
 8003994:	607b      	str	r3, [r7, #4]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2b06      	cmp	r3, #6
 800399a:	d9ef      	bls.n	800397c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800399c:	480d      	ldr	r0, [pc, #52]	; (80039d4 <prvInitialiseTaskLists+0x64>)
 800399e:	f7fe fbad 	bl	80020fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80039a2:	480d      	ldr	r0, [pc, #52]	; (80039d8 <prvInitialiseTaskLists+0x68>)
 80039a4:	f7fe fbaa 	bl	80020fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80039a8:	480c      	ldr	r0, [pc, #48]	; (80039dc <prvInitialiseTaskLists+0x6c>)
 80039aa:	f7fe fba7 	bl	80020fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80039ae:	480c      	ldr	r0, [pc, #48]	; (80039e0 <prvInitialiseTaskLists+0x70>)
 80039b0:	f7fe fba4 	bl	80020fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80039b4:	480b      	ldr	r0, [pc, #44]	; (80039e4 <prvInitialiseTaskLists+0x74>)
 80039b6:	f7fe fba1 	bl	80020fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80039ba:	4b0b      	ldr	r3, [pc, #44]	; (80039e8 <prvInitialiseTaskLists+0x78>)
 80039bc:	4a05      	ldr	r2, [pc, #20]	; (80039d4 <prvInitialiseTaskLists+0x64>)
 80039be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80039c0:	4b0a      	ldr	r3, [pc, #40]	; (80039ec <prvInitialiseTaskLists+0x7c>)
 80039c2:	4a05      	ldr	r2, [pc, #20]	; (80039d8 <prvInitialiseTaskLists+0x68>)
 80039c4:	601a      	str	r2, [r3, #0]
}
 80039c6:	bf00      	nop
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	200001f8 	.word	0x200001f8
 80039d4:	20000284 	.word	0x20000284
 80039d8:	20000298 	.word	0x20000298
 80039dc:	200002b4 	.word	0x200002b4
 80039e0:	200002c8 	.word	0x200002c8
 80039e4:	200002e0 	.word	0x200002e0
 80039e8:	200002ac 	.word	0x200002ac
 80039ec:	200002b0 	.word	0x200002b0

080039f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80039f6:	e019      	b.n	8003a2c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80039f8:	f000 fdd0 	bl	800459c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039fc:	4b0f      	ldr	r3, [pc, #60]	; (8003a3c <prvCheckTasksWaitingTermination+0x4c>)
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	3304      	adds	r3, #4
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7fe fc01 	bl	8002210 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003a0e:	4b0c      	ldr	r3, [pc, #48]	; (8003a40 <prvCheckTasksWaitingTermination+0x50>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	3b01      	subs	r3, #1
 8003a14:	4a0a      	ldr	r2, [pc, #40]	; (8003a40 <prvCheckTasksWaitingTermination+0x50>)
 8003a16:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003a18:	4b0a      	ldr	r3, [pc, #40]	; (8003a44 <prvCheckTasksWaitingTermination+0x54>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	3b01      	subs	r3, #1
 8003a1e:	4a09      	ldr	r2, [pc, #36]	; (8003a44 <prvCheckTasksWaitingTermination+0x54>)
 8003a20:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003a22:	f000 fde9 	bl	80045f8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 f80e 	bl	8003a48 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a2c:	4b05      	ldr	r3, [pc, #20]	; (8003a44 <prvCheckTasksWaitingTermination+0x54>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d1e1      	bne.n	80039f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003a34:	bf00      	nop
 8003a36:	3708      	adds	r7, #8
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	200002c8 	.word	0x200002c8
 8003a40:	200002f4 	.word	0x200002f4
 8003a44:	200002dc 	.word	0x200002dc

08003a48 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d108      	bne.n	8003a6c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f000 ff78 	bl	8004954 <vPortFree>
				vPortFree( pxTCB );
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f000 ff75 	bl	8004954 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003a6a:	e017      	b.n	8003a9c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d103      	bne.n	8003a7e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 ff6c 	bl	8004954 <vPortFree>
	}
 8003a7c:	e00e      	b.n	8003a9c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d009      	beq.n	8003a9c <prvDeleteTCB+0x54>
 8003a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a8c:	f383 8811 	msr	BASEPRI, r3
 8003a90:	f3bf 8f6f 	isb	sy
 8003a94:	f3bf 8f4f 	dsb	sy
 8003a98:	60fb      	str	r3, [r7, #12]
 8003a9a:	e7fe      	b.n	8003a9a <prvDeleteTCB+0x52>
	}
 8003a9c:	bf00      	nop
 8003a9e:	3710      	adds	r7, #16
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003aaa:	4b0c      	ldr	r3, [pc, #48]	; (8003adc <prvResetNextTaskUnblockTime+0x38>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d104      	bne.n	8003abe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003ab4:	4b0a      	ldr	r3, [pc, #40]	; (8003ae0 <prvResetNextTaskUnblockTime+0x3c>)
 8003ab6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003aba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003abc:	e008      	b.n	8003ad0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003abe:	4b07      	ldr	r3, [pc, #28]	; (8003adc <prvResetNextTaskUnblockTime+0x38>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	4a04      	ldr	r2, [pc, #16]	; (8003ae0 <prvResetNextTaskUnblockTime+0x3c>)
 8003ace:	6013      	str	r3, [r2, #0]
}
 8003ad0:	bf00      	nop
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr
 8003adc:	200002ac 	.word	0x200002ac
 8003ae0:	20000314 	.word	0x20000314

08003ae4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003aea:	4b0b      	ldr	r3, [pc, #44]	; (8003b18 <xTaskGetSchedulerState+0x34>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d102      	bne.n	8003af8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003af2:	2301      	movs	r3, #1
 8003af4:	607b      	str	r3, [r7, #4]
 8003af6:	e008      	b.n	8003b0a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003af8:	4b08      	ldr	r3, [pc, #32]	; (8003b1c <xTaskGetSchedulerState+0x38>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d102      	bne.n	8003b06 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003b00:	2302      	movs	r3, #2
 8003b02:	607b      	str	r3, [r7, #4]
 8003b04:	e001      	b.n	8003b0a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003b06:	2300      	movs	r3, #0
 8003b08:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003b0a:	687b      	ldr	r3, [r7, #4]
	}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr
 8003b18:	20000300 	.word	0x20000300
 8003b1c:	2000031c 	.word	0x2000031c

08003b20 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b086      	sub	sp, #24
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d06c      	beq.n	8003c10 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003b36:	4b39      	ldr	r3, [pc, #228]	; (8003c1c <xTaskPriorityDisinherit+0xfc>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	693a      	ldr	r2, [r7, #16]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d009      	beq.n	8003b54 <xTaskPriorityDisinherit+0x34>
 8003b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b44:	f383 8811 	msr	BASEPRI, r3
 8003b48:	f3bf 8f6f 	isb	sy
 8003b4c:	f3bf 8f4f 	dsb	sy
 8003b50:	60fb      	str	r3, [r7, #12]
 8003b52:	e7fe      	b.n	8003b52 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d109      	bne.n	8003b70 <xTaskPriorityDisinherit+0x50>
 8003b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b60:	f383 8811 	msr	BASEPRI, r3
 8003b64:	f3bf 8f6f 	isb	sy
 8003b68:	f3bf 8f4f 	dsb	sy
 8003b6c:	60bb      	str	r3, [r7, #8]
 8003b6e:	e7fe      	b.n	8003b6e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b74:	1e5a      	subs	r2, r3, #1
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d044      	beq.n	8003c10 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d140      	bne.n	8003c10 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	3304      	adds	r3, #4
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7fe fb3c 	bl	8002210 <uxListRemove>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d115      	bne.n	8003bca <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ba2:	491f      	ldr	r1, [pc, #124]	; (8003c20 <xTaskPriorityDisinherit+0x100>)
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	4413      	add	r3, r2
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	440b      	add	r3, r1
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d10a      	bne.n	8003bca <xTaskPriorityDisinherit+0xaa>
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb8:	2201      	movs	r2, #1
 8003bba:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbe:	43da      	mvns	r2, r3
 8003bc0:	4b18      	ldr	r3, [pc, #96]	; (8003c24 <xTaskPriorityDisinherit+0x104>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	4a17      	ldr	r2, [pc, #92]	; (8003c24 <xTaskPriorityDisinherit+0x104>)
 8003bc8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd6:	f1c3 0207 	rsb	r2, r3, #7
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be2:	2201      	movs	r2, #1
 8003be4:	409a      	lsls	r2, r3
 8003be6:	4b0f      	ldr	r3, [pc, #60]	; (8003c24 <xTaskPriorityDisinherit+0x104>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	4a0d      	ldr	r2, [pc, #52]	; (8003c24 <xTaskPriorityDisinherit+0x104>)
 8003bee:	6013      	str	r3, [r2, #0]
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	4413      	add	r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	4a08      	ldr	r2, [pc, #32]	; (8003c20 <xTaskPriorityDisinherit+0x100>)
 8003bfe:	441a      	add	r2, r3
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	3304      	adds	r3, #4
 8003c04:	4619      	mov	r1, r3
 8003c06:	4610      	mov	r0, r2
 8003c08:	f7fe faa5 	bl	8002156 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003c10:	697b      	ldr	r3, [r7, #20]
	}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3718      	adds	r7, #24
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	200001f4 	.word	0x200001f4
 8003c20:	200001f8 	.word	0x200001f8
 8003c24:	200002fc 	.word	0x200002fc

08003c28 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003c32:	4b29      	ldr	r3, [pc, #164]	; (8003cd8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c38:	4b28      	ldr	r3, [pc, #160]	; (8003cdc <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	3304      	adds	r3, #4
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7fe fae6 	bl	8002210 <uxListRemove>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d10b      	bne.n	8003c62 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003c4a:	4b24      	ldr	r3, [pc, #144]	; (8003cdc <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c50:	2201      	movs	r2, #1
 8003c52:	fa02 f303 	lsl.w	r3, r2, r3
 8003c56:	43da      	mvns	r2, r3
 8003c58:	4b21      	ldr	r3, [pc, #132]	; (8003ce0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	4a20      	ldr	r2, [pc, #128]	; (8003ce0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003c60:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c68:	d10a      	bne.n	8003c80 <prvAddCurrentTaskToDelayedList+0x58>
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d007      	beq.n	8003c80 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c70:	4b1a      	ldr	r3, [pc, #104]	; (8003cdc <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	3304      	adds	r3, #4
 8003c76:	4619      	mov	r1, r3
 8003c78:	481a      	ldr	r0, [pc, #104]	; (8003ce4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003c7a:	f7fe fa6c 	bl	8002156 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003c7e:	e026      	b.n	8003cce <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003c80:	68fa      	ldr	r2, [r7, #12]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4413      	add	r3, r2
 8003c86:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003c88:	4b14      	ldr	r3, [pc, #80]	; (8003cdc <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68ba      	ldr	r2, [r7, #8]
 8003c8e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003c90:	68ba      	ldr	r2, [r7, #8]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d209      	bcs.n	8003cac <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c98:	4b13      	ldr	r3, [pc, #76]	; (8003ce8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	4b0f      	ldr	r3, [pc, #60]	; (8003cdc <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	3304      	adds	r3, #4
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	4610      	mov	r0, r2
 8003ca6:	f7fe fa7a 	bl	800219e <vListInsert>
}
 8003caa:	e010      	b.n	8003cce <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003cac:	4b0f      	ldr	r3, [pc, #60]	; (8003cec <prvAddCurrentTaskToDelayedList+0xc4>)
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	4b0a      	ldr	r3, [pc, #40]	; (8003cdc <prvAddCurrentTaskToDelayedList+0xb4>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	3304      	adds	r3, #4
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	4610      	mov	r0, r2
 8003cba:	f7fe fa70 	bl	800219e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003cbe:	4b0c      	ldr	r3, [pc, #48]	; (8003cf0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68ba      	ldr	r2, [r7, #8]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d202      	bcs.n	8003cce <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003cc8:	4a09      	ldr	r2, [pc, #36]	; (8003cf0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	6013      	str	r3, [r2, #0]
}
 8003cce:	bf00      	nop
 8003cd0:	3710      	adds	r7, #16
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	200002f8 	.word	0x200002f8
 8003cdc:	200001f4 	.word	0x200001f4
 8003ce0:	200002fc 	.word	0x200002fc
 8003ce4:	200002e0 	.word	0x200002e0
 8003ce8:	200002b0 	.word	0x200002b0
 8003cec:	200002ac 	.word	0x200002ac
 8003cf0:	20000314 	.word	0x20000314

08003cf4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b08a      	sub	sp, #40	; 0x28
 8003cf8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003cfe:	f000 fae7 	bl	80042d0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003d02:	4b1c      	ldr	r3, [pc, #112]	; (8003d74 <xTimerCreateTimerTask+0x80>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d021      	beq.n	8003d4e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003d12:	1d3a      	adds	r2, r7, #4
 8003d14:	f107 0108 	add.w	r1, r7, #8
 8003d18:	f107 030c 	add.w	r3, r7, #12
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f000 ff47 	bl	8004bb0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003d22:	6879      	ldr	r1, [r7, #4]
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	9202      	str	r2, [sp, #8]
 8003d2a:	9301      	str	r3, [sp, #4]
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	9300      	str	r3, [sp, #0]
 8003d30:	2300      	movs	r3, #0
 8003d32:	460a      	mov	r2, r1
 8003d34:	4910      	ldr	r1, [pc, #64]	; (8003d78 <xTimerCreateTimerTask+0x84>)
 8003d36:	4811      	ldr	r0, [pc, #68]	; (8003d7c <xTimerCreateTimerTask+0x88>)
 8003d38:	f7fe ff64 	bl	8002c04 <xTaskCreateStatic>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	4b10      	ldr	r3, [pc, #64]	; (8003d80 <xTimerCreateTimerTask+0x8c>)
 8003d40:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003d42:	4b0f      	ldr	r3, [pc, #60]	; (8003d80 <xTimerCreateTimerTask+0x8c>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d001      	beq.n	8003d4e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d109      	bne.n	8003d68 <xTimerCreateTimerTask+0x74>
 8003d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d58:	f383 8811 	msr	BASEPRI, r3
 8003d5c:	f3bf 8f6f 	isb	sy
 8003d60:	f3bf 8f4f 	dsb	sy
 8003d64:	613b      	str	r3, [r7, #16]
 8003d66:	e7fe      	b.n	8003d66 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8003d68:	697b      	ldr	r3, [r7, #20]
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3718      	adds	r7, #24
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	20000350 	.word	0x20000350
 8003d78:	08007ef0 	.word	0x08007ef0
 8003d7c:	08003eb5 	.word	0x08003eb5
 8003d80:	20000354 	.word	0x20000354

08003d84 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b08a      	sub	sp, #40	; 0x28
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	607a      	str	r2, [r7, #4]
 8003d90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003d92:	2300      	movs	r3, #0
 8003d94:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d109      	bne.n	8003db0 <xTimerGenericCommand+0x2c>
 8003d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da0:	f383 8811 	msr	BASEPRI, r3
 8003da4:	f3bf 8f6f 	isb	sy
 8003da8:	f3bf 8f4f 	dsb	sy
 8003dac:	623b      	str	r3, [r7, #32]
 8003dae:	e7fe      	b.n	8003dae <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003db0:	4b19      	ldr	r3, [pc, #100]	; (8003e18 <xTimerGenericCommand+0x94>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d02a      	beq.n	8003e0e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	2b05      	cmp	r3, #5
 8003dc8:	dc18      	bgt.n	8003dfc <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003dca:	f7ff fe8b 	bl	8003ae4 <xTaskGetSchedulerState>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d109      	bne.n	8003de8 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003dd4:	4b10      	ldr	r3, [pc, #64]	; (8003e18 <xTimerGenericCommand+0x94>)
 8003dd6:	6818      	ldr	r0, [r3, #0]
 8003dd8:	f107 0114 	add.w	r1, r7, #20
 8003ddc:	2300      	movs	r3, #0
 8003dde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003de0:	f7fe fb3a 	bl	8002458 <xQueueGenericSend>
 8003de4:	6278      	str	r0, [r7, #36]	; 0x24
 8003de6:	e012      	b.n	8003e0e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003de8:	4b0b      	ldr	r3, [pc, #44]	; (8003e18 <xTimerGenericCommand+0x94>)
 8003dea:	6818      	ldr	r0, [r3, #0]
 8003dec:	f107 0114 	add.w	r1, r7, #20
 8003df0:	2300      	movs	r3, #0
 8003df2:	2200      	movs	r2, #0
 8003df4:	f7fe fb30 	bl	8002458 <xQueueGenericSend>
 8003df8:	6278      	str	r0, [r7, #36]	; 0x24
 8003dfa:	e008      	b.n	8003e0e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003dfc:	4b06      	ldr	r3, [pc, #24]	; (8003e18 <xTimerGenericCommand+0x94>)
 8003dfe:	6818      	ldr	r0, [r3, #0]
 8003e00:	f107 0114 	add.w	r1, r7, #20
 8003e04:	2300      	movs	r3, #0
 8003e06:	683a      	ldr	r2, [r7, #0]
 8003e08:	f7fe fc20 	bl	800264c <xQueueGenericSendFromISR>
 8003e0c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3728      	adds	r7, #40	; 0x28
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	20000350 	.word	0x20000350

08003e1c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b088      	sub	sp, #32
 8003e20:	af02      	add	r7, sp, #8
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e26:	4b22      	ldr	r3, [pc, #136]	; (8003eb0 <prvProcessExpiredTimer+0x94>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	3304      	adds	r3, #4
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7fe f9eb 	bl	8002210 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003e40:	f003 0304 	and.w	r3, r3, #4
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d021      	beq.n	8003e8c <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	699a      	ldr	r2, [r3, #24]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	18d1      	adds	r1, r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	683a      	ldr	r2, [r7, #0]
 8003e54:	6978      	ldr	r0, [r7, #20]
 8003e56:	f000 f8d1 	bl	8003ffc <prvInsertTimerInActiveList>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d01e      	beq.n	8003e9e <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003e60:	2300      	movs	r3, #0
 8003e62:	9300      	str	r3, [sp, #0]
 8003e64:	2300      	movs	r3, #0
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	2100      	movs	r1, #0
 8003e6a:	6978      	ldr	r0, [r7, #20]
 8003e6c:	f7ff ff8a 	bl	8003d84 <xTimerGenericCommand>
 8003e70:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d112      	bne.n	8003e9e <prvProcessExpiredTimer+0x82>
 8003e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e7c:	f383 8811 	msr	BASEPRI, r3
 8003e80:	f3bf 8f6f 	isb	sy
 8003e84:	f3bf 8f4f 	dsb	sy
 8003e88:	60fb      	str	r3, [r7, #12]
 8003e8a:	e7fe      	b.n	8003e8a <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003e92:	f023 0301 	bic.w	r3, r3, #1
 8003e96:	b2da      	uxtb	r2, r3
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	6a1b      	ldr	r3, [r3, #32]
 8003ea2:	6978      	ldr	r0, [r7, #20]
 8003ea4:	4798      	blx	r3
}
 8003ea6:	bf00      	nop
 8003ea8:	3718      	adds	r7, #24
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	20000348 	.word	0x20000348

08003eb4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003ebc:	f107 0308 	add.w	r3, r7, #8
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f000 f857 	bl	8003f74 <prvGetNextExpireTime>
 8003ec6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	4619      	mov	r1, r3
 8003ecc:	68f8      	ldr	r0, [r7, #12]
 8003ece:	f000 f803 	bl	8003ed8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003ed2:	f000 f8d5 	bl	8004080 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003ed6:	e7f1      	b.n	8003ebc <prvTimerTask+0x8>

08003ed8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003ee2:	f7ff fa2f 	bl	8003344 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003ee6:	f107 0308 	add.w	r3, r7, #8
 8003eea:	4618      	mov	r0, r3
 8003eec:	f000 f866 	bl	8003fbc <prvSampleTimeNow>
 8003ef0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d130      	bne.n	8003f5a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d10a      	bne.n	8003f14 <prvProcessTimerOrBlockTask+0x3c>
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d806      	bhi.n	8003f14 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003f06:	f7ff fa2b 	bl	8003360 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003f0a:	68f9      	ldr	r1, [r7, #12]
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f7ff ff85 	bl	8003e1c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003f12:	e024      	b.n	8003f5e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d008      	beq.n	8003f2c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003f1a:	4b13      	ldr	r3, [pc, #76]	; (8003f68 <prvProcessTimerOrBlockTask+0x90>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d101      	bne.n	8003f28 <prvProcessTimerOrBlockTask+0x50>
 8003f24:	2301      	movs	r3, #1
 8003f26:	e000      	b.n	8003f2a <prvProcessTimerOrBlockTask+0x52>
 8003f28:	2300      	movs	r3, #0
 8003f2a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003f2c:	4b0f      	ldr	r3, [pc, #60]	; (8003f6c <prvProcessTimerOrBlockTask+0x94>)
 8003f2e:	6818      	ldr	r0, [r3, #0]
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	683a      	ldr	r2, [r7, #0]
 8003f38:	4619      	mov	r1, r3
 8003f3a:	f7fe fe2f 	bl	8002b9c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003f3e:	f7ff fa0f 	bl	8003360 <xTaskResumeAll>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d10a      	bne.n	8003f5e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003f48:	4b09      	ldr	r3, [pc, #36]	; (8003f70 <prvProcessTimerOrBlockTask+0x98>)
 8003f4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f4e:	601a      	str	r2, [r3, #0]
 8003f50:	f3bf 8f4f 	dsb	sy
 8003f54:	f3bf 8f6f 	isb	sy
}
 8003f58:	e001      	b.n	8003f5e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003f5a:	f7ff fa01 	bl	8003360 <xTaskResumeAll>
}
 8003f5e:	bf00      	nop
 8003f60:	3710      	adds	r7, #16
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	2000034c 	.word	0x2000034c
 8003f6c:	20000350 	.word	0x20000350
 8003f70:	e000ed04 	.word	0xe000ed04

08003f74 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003f74:	b480      	push	{r7}
 8003f76:	b085      	sub	sp, #20
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003f7c:	4b0e      	ldr	r3, [pc, #56]	; (8003fb8 <prvGetNextExpireTime+0x44>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d101      	bne.n	8003f8a <prvGetNextExpireTime+0x16>
 8003f86:	2201      	movs	r2, #1
 8003f88:	e000      	b.n	8003f8c <prvGetNextExpireTime+0x18>
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d105      	bne.n	8003fa4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f98:	4b07      	ldr	r3, [pc, #28]	; (8003fb8 <prvGetNextExpireTime+0x44>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	60fb      	str	r3, [r7, #12]
 8003fa2:	e001      	b.n	8003fa8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3714      	adds	r7, #20
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	20000348 	.word	0x20000348

08003fbc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003fc4:	f7ff fa68 	bl	8003498 <xTaskGetTickCount>
 8003fc8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003fca:	4b0b      	ldr	r3, [pc, #44]	; (8003ff8 <prvSampleTimeNow+0x3c>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d205      	bcs.n	8003fe0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003fd4:	f000 f918 	bl	8004208 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	601a      	str	r2, [r3, #0]
 8003fde:	e002      	b.n	8003fe6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003fe6:	4a04      	ldr	r2, [pc, #16]	; (8003ff8 <prvSampleTimeNow+0x3c>)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003fec:	68fb      	ldr	r3, [r7, #12]
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3710      	adds	r7, #16
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	20000358 	.word	0x20000358

08003ffc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b086      	sub	sp, #24
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	607a      	str	r2, [r7, #4]
 8004008:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800400a:	2300      	movs	r3, #0
 800400c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	68ba      	ldr	r2, [r7, #8]
 8004012:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	68fa      	ldr	r2, [r7, #12]
 8004018:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800401a:	68ba      	ldr	r2, [r7, #8]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	429a      	cmp	r2, r3
 8004020:	d812      	bhi.n	8004048 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	1ad2      	subs	r2, r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	699b      	ldr	r3, [r3, #24]
 800402c:	429a      	cmp	r2, r3
 800402e:	d302      	bcc.n	8004036 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004030:	2301      	movs	r3, #1
 8004032:	617b      	str	r3, [r7, #20]
 8004034:	e01b      	b.n	800406e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004036:	4b10      	ldr	r3, [pc, #64]	; (8004078 <prvInsertTimerInActiveList+0x7c>)
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	3304      	adds	r3, #4
 800403e:	4619      	mov	r1, r3
 8004040:	4610      	mov	r0, r2
 8004042:	f7fe f8ac 	bl	800219e <vListInsert>
 8004046:	e012      	b.n	800406e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	429a      	cmp	r2, r3
 800404e:	d206      	bcs.n	800405e <prvInsertTimerInActiveList+0x62>
 8004050:	68ba      	ldr	r2, [r7, #8]
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	429a      	cmp	r2, r3
 8004056:	d302      	bcc.n	800405e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004058:	2301      	movs	r3, #1
 800405a:	617b      	str	r3, [r7, #20]
 800405c:	e007      	b.n	800406e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800405e:	4b07      	ldr	r3, [pc, #28]	; (800407c <prvInsertTimerInActiveList+0x80>)
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	3304      	adds	r3, #4
 8004066:	4619      	mov	r1, r3
 8004068:	4610      	mov	r0, r2
 800406a:	f7fe f898 	bl	800219e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800406e:	697b      	ldr	r3, [r7, #20]
}
 8004070:	4618      	mov	r0, r3
 8004072:	3718      	adds	r7, #24
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	2000034c 	.word	0x2000034c
 800407c:	20000348 	.word	0x20000348

08004080 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b08c      	sub	sp, #48	; 0x30
 8004084:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004086:	e0ac      	b.n	80041e2 <prvProcessReceivedCommands+0x162>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	2b00      	cmp	r3, #0
 800408c:	f2c0 80a8 	blt.w	80041e0 <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004096:	695b      	ldr	r3, [r3, #20]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d004      	beq.n	80040a6 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800409c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409e:	3304      	adds	r3, #4
 80040a0:	4618      	mov	r0, r3
 80040a2:	f7fe f8b5 	bl	8002210 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80040a6:	1d3b      	adds	r3, r7, #4
 80040a8:	4618      	mov	r0, r3
 80040aa:	f7ff ff87 	bl	8003fbc <prvSampleTimeNow>
 80040ae:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	2b09      	cmp	r3, #9
 80040b4:	f200 8095 	bhi.w	80041e2 <prvProcessReceivedCommands+0x162>
 80040b8:	a201      	add	r2, pc, #4	; (adr r2, 80040c0 <prvProcessReceivedCommands+0x40>)
 80040ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040be:	bf00      	nop
 80040c0:	080040e9 	.word	0x080040e9
 80040c4:	080040e9 	.word	0x080040e9
 80040c8:	080040e9 	.word	0x080040e9
 80040cc:	0800415b 	.word	0x0800415b
 80040d0:	0800416f 	.word	0x0800416f
 80040d4:	080041b7 	.word	0x080041b7
 80040d8:	080040e9 	.word	0x080040e9
 80040dc:	080040e9 	.word	0x080040e9
 80040e0:	0800415b 	.word	0x0800415b
 80040e4:	0800416f 	.word	0x0800416f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80040e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80040ee:	f043 0301 	orr.w	r3, r3, #1
 80040f2:	b2da      	uxtb	r2, r3
 80040f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fe:	699b      	ldr	r3, [r3, #24]
 8004100:	18d1      	adds	r1, r2, r3
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6a3a      	ldr	r2, [r7, #32]
 8004106:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004108:	f7ff ff78 	bl	8003ffc <prvInsertTimerInActiveList>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d067      	beq.n	80041e2 <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004114:	6a1b      	ldr	r3, [r3, #32]
 8004116:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004118:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800411a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004120:	f003 0304 	and.w	r3, r3, #4
 8004124:	2b00      	cmp	r3, #0
 8004126:	d05c      	beq.n	80041e2 <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	441a      	add	r2, r3
 8004130:	2300      	movs	r3, #0
 8004132:	9300      	str	r3, [sp, #0]
 8004134:	2300      	movs	r3, #0
 8004136:	2100      	movs	r1, #0
 8004138:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800413a:	f7ff fe23 	bl	8003d84 <xTimerGenericCommand>
 800413e:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d14d      	bne.n	80041e2 <prvProcessReceivedCommands+0x162>
 8004146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800414a:	f383 8811 	msr	BASEPRI, r3
 800414e:	f3bf 8f6f 	isb	sy
 8004152:	f3bf 8f4f 	dsb	sy
 8004156:	61bb      	str	r3, [r7, #24]
 8004158:	e7fe      	b.n	8004158 <prvProcessReceivedCommands+0xd8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800415a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004160:	f023 0301 	bic.w	r3, r3, #1
 8004164:	b2da      	uxtb	r2, r3
 8004166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004168:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800416c:	e039      	b.n	80041e2 <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800416e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004170:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004174:	f043 0301 	orr.w	r3, r3, #1
 8004178:	b2da      	uxtb	r2, r3
 800417a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004184:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d109      	bne.n	80041a2 <prvProcessReceivedCommands+0x122>
 800418e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004192:	f383 8811 	msr	BASEPRI, r3
 8004196:	f3bf 8f6f 	isb	sy
 800419a:	f3bf 8f4f 	dsb	sy
 800419e:	617b      	str	r3, [r7, #20]
 80041a0:	e7fe      	b.n	80041a0 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80041a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a4:	699a      	ldr	r2, [r3, #24]
 80041a6:	6a3b      	ldr	r3, [r7, #32]
 80041a8:	18d1      	adds	r1, r2, r3
 80041aa:	6a3b      	ldr	r3, [r7, #32]
 80041ac:	6a3a      	ldr	r2, [r7, #32]
 80041ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80041b0:	f7ff ff24 	bl	8003ffc <prvInsertTimerInActiveList>
					break;
 80041b4:	e015      	b.n	80041e2 <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80041b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80041bc:	f003 0302 	and.w	r3, r3, #2
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d103      	bne.n	80041cc <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 80041c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80041c6:	f000 fbc5 	bl	8004954 <vPortFree>
 80041ca:	e00a      	b.n	80041e2 <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80041cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80041d2:	f023 0301 	bic.w	r3, r3, #1
 80041d6:	b2da      	uxtb	r2, r3
 80041d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80041de:	e000      	b.n	80041e2 <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80041e0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80041e2:	4b08      	ldr	r3, [pc, #32]	; (8004204 <prvProcessReceivedCommands+0x184>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f107 0108 	add.w	r1, r7, #8
 80041ea:	2200      	movs	r2, #0
 80041ec:	4618      	mov	r0, r3
 80041ee:	f7fe fac1 	bl	8002774 <xQueueReceive>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f47f af47 	bne.w	8004088 <prvProcessReceivedCommands+0x8>
	}
}
 80041fa:	bf00      	nop
 80041fc:	3728      	adds	r7, #40	; 0x28
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	20000350 	.word	0x20000350

08004208 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b088      	sub	sp, #32
 800420c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800420e:	e047      	b.n	80042a0 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004210:	4b2d      	ldr	r3, [pc, #180]	; (80042c8 <prvSwitchTimerLists+0xc0>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800421a:	4b2b      	ldr	r3, [pc, #172]	; (80042c8 <prvSwitchTimerLists+0xc0>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	3304      	adds	r3, #4
 8004228:	4618      	mov	r0, r3
 800422a:	f7fd fff1 	bl	8002210 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	68f8      	ldr	r0, [r7, #12]
 8004234:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800423c:	f003 0304 	and.w	r3, r3, #4
 8004240:	2b00      	cmp	r3, #0
 8004242:	d02d      	beq.n	80042a0 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	699b      	ldr	r3, [r3, #24]
 8004248:	693a      	ldr	r2, [r7, #16]
 800424a:	4413      	add	r3, r2
 800424c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800424e:	68ba      	ldr	r2, [r7, #8]
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	429a      	cmp	r2, r3
 8004254:	d90e      	bls.n	8004274 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	68ba      	ldr	r2, [r7, #8]
 800425a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004262:	4b19      	ldr	r3, [pc, #100]	; (80042c8 <prvSwitchTimerLists+0xc0>)
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	3304      	adds	r3, #4
 800426a:	4619      	mov	r1, r3
 800426c:	4610      	mov	r0, r2
 800426e:	f7fd ff96 	bl	800219e <vListInsert>
 8004272:	e015      	b.n	80042a0 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004274:	2300      	movs	r3, #0
 8004276:	9300      	str	r3, [sp, #0]
 8004278:	2300      	movs	r3, #0
 800427a:	693a      	ldr	r2, [r7, #16]
 800427c:	2100      	movs	r1, #0
 800427e:	68f8      	ldr	r0, [r7, #12]
 8004280:	f7ff fd80 	bl	8003d84 <xTimerGenericCommand>
 8004284:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d109      	bne.n	80042a0 <prvSwitchTimerLists+0x98>
 800428c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004290:	f383 8811 	msr	BASEPRI, r3
 8004294:	f3bf 8f6f 	isb	sy
 8004298:	f3bf 8f4f 	dsb	sy
 800429c:	603b      	str	r3, [r7, #0]
 800429e:	e7fe      	b.n	800429e <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80042a0:	4b09      	ldr	r3, [pc, #36]	; (80042c8 <prvSwitchTimerLists+0xc0>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d1b2      	bne.n	8004210 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80042aa:	4b07      	ldr	r3, [pc, #28]	; (80042c8 <prvSwitchTimerLists+0xc0>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80042b0:	4b06      	ldr	r3, [pc, #24]	; (80042cc <prvSwitchTimerLists+0xc4>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a04      	ldr	r2, [pc, #16]	; (80042c8 <prvSwitchTimerLists+0xc0>)
 80042b6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80042b8:	4a04      	ldr	r2, [pc, #16]	; (80042cc <prvSwitchTimerLists+0xc4>)
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	6013      	str	r3, [r2, #0]
}
 80042be:	bf00      	nop
 80042c0:	3718      	adds	r7, #24
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	20000348 	.word	0x20000348
 80042cc:	2000034c 	.word	0x2000034c

080042d0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80042d6:	f000 f961 	bl	800459c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80042da:	4b15      	ldr	r3, [pc, #84]	; (8004330 <prvCheckForValidListAndQueue+0x60>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d120      	bne.n	8004324 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80042e2:	4814      	ldr	r0, [pc, #80]	; (8004334 <prvCheckForValidListAndQueue+0x64>)
 80042e4:	f7fd ff0a 	bl	80020fc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80042e8:	4813      	ldr	r0, [pc, #76]	; (8004338 <prvCheckForValidListAndQueue+0x68>)
 80042ea:	f7fd ff07 	bl	80020fc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80042ee:	4b13      	ldr	r3, [pc, #76]	; (800433c <prvCheckForValidListAndQueue+0x6c>)
 80042f0:	4a10      	ldr	r2, [pc, #64]	; (8004334 <prvCheckForValidListAndQueue+0x64>)
 80042f2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80042f4:	4b12      	ldr	r3, [pc, #72]	; (8004340 <prvCheckForValidListAndQueue+0x70>)
 80042f6:	4a10      	ldr	r2, [pc, #64]	; (8004338 <prvCheckForValidListAndQueue+0x68>)
 80042f8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80042fa:	2300      	movs	r3, #0
 80042fc:	9300      	str	r3, [sp, #0]
 80042fe:	4b11      	ldr	r3, [pc, #68]	; (8004344 <prvCheckForValidListAndQueue+0x74>)
 8004300:	4a11      	ldr	r2, [pc, #68]	; (8004348 <prvCheckForValidListAndQueue+0x78>)
 8004302:	210c      	movs	r1, #12
 8004304:	200a      	movs	r0, #10
 8004306:	f7fe f815 	bl	8002334 <xQueueGenericCreateStatic>
 800430a:	4602      	mov	r2, r0
 800430c:	4b08      	ldr	r3, [pc, #32]	; (8004330 <prvCheckForValidListAndQueue+0x60>)
 800430e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004310:	4b07      	ldr	r3, [pc, #28]	; (8004330 <prvCheckForValidListAndQueue+0x60>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d005      	beq.n	8004324 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004318:	4b05      	ldr	r3, [pc, #20]	; (8004330 <prvCheckForValidListAndQueue+0x60>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	490b      	ldr	r1, [pc, #44]	; (800434c <prvCheckForValidListAndQueue+0x7c>)
 800431e:	4618      	mov	r0, r3
 8004320:	f7fe fc14 	bl	8002b4c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004324:	f000 f968 	bl	80045f8 <vPortExitCritical>
}
 8004328:	bf00      	nop
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	20000350 	.word	0x20000350
 8004334:	20000320 	.word	0x20000320
 8004338:	20000334 	.word	0x20000334
 800433c:	20000348 	.word	0x20000348
 8004340:	2000034c 	.word	0x2000034c
 8004344:	200003d4 	.word	0x200003d4
 8004348:	2000035c 	.word	0x2000035c
 800434c:	08007ef8 	.word	0x08007ef8

08004350 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004350:	b480      	push	{r7}
 8004352:	b085      	sub	sp, #20
 8004354:	af00      	add	r7, sp, #0
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	3b04      	subs	r3, #4
 8004360:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004368:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	3b04      	subs	r3, #4
 800436e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	f023 0201 	bic.w	r2, r3, #1
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	3b04      	subs	r3, #4
 800437e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004380:	4a0c      	ldr	r2, [pc, #48]	; (80043b4 <pxPortInitialiseStack+0x64>)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	3b14      	subs	r3, #20
 800438a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	3b04      	subs	r3, #4
 8004396:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f06f 0202 	mvn.w	r2, #2
 800439e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	3b20      	subs	r3, #32
 80043a4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80043a6:	68fb      	ldr	r3, [r7, #12]
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3714      	adds	r7, #20
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr
 80043b4:	080043b9 	.word	0x080043b9

080043b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80043b8:	b480      	push	{r7}
 80043ba:	b085      	sub	sp, #20
 80043bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80043be:	2300      	movs	r3, #0
 80043c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80043c2:	4b11      	ldr	r3, [pc, #68]	; (8004408 <prvTaskExitError+0x50>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043ca:	d009      	beq.n	80043e0 <prvTaskExitError+0x28>
 80043cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d0:	f383 8811 	msr	BASEPRI, r3
 80043d4:	f3bf 8f6f 	isb	sy
 80043d8:	f3bf 8f4f 	dsb	sy
 80043dc:	60fb      	str	r3, [r7, #12]
 80043de:	e7fe      	b.n	80043de <prvTaskExitError+0x26>
 80043e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e4:	f383 8811 	msr	BASEPRI, r3
 80043e8:	f3bf 8f6f 	isb	sy
 80043ec:	f3bf 8f4f 	dsb	sy
 80043f0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80043f2:	bf00      	nop
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d0fc      	beq.n	80043f4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80043fa:	bf00      	nop
 80043fc:	3714      	adds	r7, #20
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	20000000 	.word	0x20000000
 800440c:	00000000 	.word	0x00000000

08004410 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004410:	4b07      	ldr	r3, [pc, #28]	; (8004430 <pxCurrentTCBConst2>)
 8004412:	6819      	ldr	r1, [r3, #0]
 8004414:	6808      	ldr	r0, [r1, #0]
 8004416:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800441a:	f380 8809 	msr	PSP, r0
 800441e:	f3bf 8f6f 	isb	sy
 8004422:	f04f 0000 	mov.w	r0, #0
 8004426:	f380 8811 	msr	BASEPRI, r0
 800442a:	4770      	bx	lr
 800442c:	f3af 8000 	nop.w

08004430 <pxCurrentTCBConst2>:
 8004430:	200001f4 	.word	0x200001f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004434:	bf00      	nop
 8004436:	bf00      	nop

08004438 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004438:	4808      	ldr	r0, [pc, #32]	; (800445c <prvPortStartFirstTask+0x24>)
 800443a:	6800      	ldr	r0, [r0, #0]
 800443c:	6800      	ldr	r0, [r0, #0]
 800443e:	f380 8808 	msr	MSP, r0
 8004442:	f04f 0000 	mov.w	r0, #0
 8004446:	f380 8814 	msr	CONTROL, r0
 800444a:	b662      	cpsie	i
 800444c:	b661      	cpsie	f
 800444e:	f3bf 8f4f 	dsb	sy
 8004452:	f3bf 8f6f 	isb	sy
 8004456:	df00      	svc	0
 8004458:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800445a:	bf00      	nop
 800445c:	e000ed08 	.word	0xe000ed08

08004460 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b086      	sub	sp, #24
 8004464:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004466:	4b44      	ldr	r3, [pc, #272]	; (8004578 <xPortStartScheduler+0x118>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a44      	ldr	r2, [pc, #272]	; (800457c <xPortStartScheduler+0x11c>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d109      	bne.n	8004484 <xPortStartScheduler+0x24>
 8004470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004474:	f383 8811 	msr	BASEPRI, r3
 8004478:	f3bf 8f6f 	isb	sy
 800447c:	f3bf 8f4f 	dsb	sy
 8004480:	613b      	str	r3, [r7, #16]
 8004482:	e7fe      	b.n	8004482 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004484:	4b3c      	ldr	r3, [pc, #240]	; (8004578 <xPortStartScheduler+0x118>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a3d      	ldr	r2, [pc, #244]	; (8004580 <xPortStartScheduler+0x120>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d109      	bne.n	80044a2 <xPortStartScheduler+0x42>
 800448e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004492:	f383 8811 	msr	BASEPRI, r3
 8004496:	f3bf 8f6f 	isb	sy
 800449a:	f3bf 8f4f 	dsb	sy
 800449e:	60fb      	str	r3, [r7, #12]
 80044a0:	e7fe      	b.n	80044a0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80044a2:	4b38      	ldr	r3, [pc, #224]	; (8004584 <xPortStartScheduler+0x124>)
 80044a4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	22ff      	movs	r2, #255	; 0xff
 80044b2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80044bc:	78fb      	ldrb	r3, [r7, #3]
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80044c4:	b2da      	uxtb	r2, r3
 80044c6:	4b30      	ldr	r3, [pc, #192]	; (8004588 <xPortStartScheduler+0x128>)
 80044c8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80044ca:	4b30      	ldr	r3, [pc, #192]	; (800458c <xPortStartScheduler+0x12c>)
 80044cc:	2207      	movs	r2, #7
 80044ce:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80044d0:	e009      	b.n	80044e6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80044d2:	4b2e      	ldr	r3, [pc, #184]	; (800458c <xPortStartScheduler+0x12c>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	3b01      	subs	r3, #1
 80044d8:	4a2c      	ldr	r2, [pc, #176]	; (800458c <xPortStartScheduler+0x12c>)
 80044da:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80044dc:	78fb      	ldrb	r3, [r7, #3]
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	005b      	lsls	r3, r3, #1
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80044e6:	78fb      	ldrb	r3, [r7, #3]
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ee:	2b80      	cmp	r3, #128	; 0x80
 80044f0:	d0ef      	beq.n	80044d2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80044f2:	4b26      	ldr	r3, [pc, #152]	; (800458c <xPortStartScheduler+0x12c>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f1c3 0307 	rsb	r3, r3, #7
 80044fa:	2b04      	cmp	r3, #4
 80044fc:	d009      	beq.n	8004512 <xPortStartScheduler+0xb2>
 80044fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004502:	f383 8811 	msr	BASEPRI, r3
 8004506:	f3bf 8f6f 	isb	sy
 800450a:	f3bf 8f4f 	dsb	sy
 800450e:	60bb      	str	r3, [r7, #8]
 8004510:	e7fe      	b.n	8004510 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004512:	4b1e      	ldr	r3, [pc, #120]	; (800458c <xPortStartScheduler+0x12c>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	021b      	lsls	r3, r3, #8
 8004518:	4a1c      	ldr	r2, [pc, #112]	; (800458c <xPortStartScheduler+0x12c>)
 800451a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800451c:	4b1b      	ldr	r3, [pc, #108]	; (800458c <xPortStartScheduler+0x12c>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004524:	4a19      	ldr	r2, [pc, #100]	; (800458c <xPortStartScheduler+0x12c>)
 8004526:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	b2da      	uxtb	r2, r3
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004530:	4b17      	ldr	r3, [pc, #92]	; (8004590 <xPortStartScheduler+0x130>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a16      	ldr	r2, [pc, #88]	; (8004590 <xPortStartScheduler+0x130>)
 8004536:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800453a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800453c:	4b14      	ldr	r3, [pc, #80]	; (8004590 <xPortStartScheduler+0x130>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a13      	ldr	r2, [pc, #76]	; (8004590 <xPortStartScheduler+0x130>)
 8004542:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004546:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004548:	f000 f8d6 	bl	80046f8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800454c:	4b11      	ldr	r3, [pc, #68]	; (8004594 <xPortStartScheduler+0x134>)
 800454e:	2200      	movs	r2, #0
 8004550:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004552:	f000 f8f5 	bl	8004740 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004556:	4b10      	ldr	r3, [pc, #64]	; (8004598 <xPortStartScheduler+0x138>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a0f      	ldr	r2, [pc, #60]	; (8004598 <xPortStartScheduler+0x138>)
 800455c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004560:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004562:	f7ff ff69 	bl	8004438 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004566:	f7ff f85f 	bl	8003628 <vTaskSwitchContext>
	prvTaskExitError();
 800456a:	f7ff ff25 	bl	80043b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800456e:	2300      	movs	r3, #0
}
 8004570:	4618      	mov	r0, r3
 8004572:	3718      	adds	r7, #24
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	e000ed00 	.word	0xe000ed00
 800457c:	410fc271 	.word	0x410fc271
 8004580:	410fc270 	.word	0x410fc270
 8004584:	e000e400 	.word	0xe000e400
 8004588:	2000041c 	.word	0x2000041c
 800458c:	20000420 	.word	0x20000420
 8004590:	e000ed20 	.word	0xe000ed20
 8004594:	20000000 	.word	0x20000000
 8004598:	e000ef34 	.word	0xe000ef34

0800459c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a6:	f383 8811 	msr	BASEPRI, r3
 80045aa:	f3bf 8f6f 	isb	sy
 80045ae:	f3bf 8f4f 	dsb	sy
 80045b2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80045b4:	4b0e      	ldr	r3, [pc, #56]	; (80045f0 <vPortEnterCritical+0x54>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	3301      	adds	r3, #1
 80045ba:	4a0d      	ldr	r2, [pc, #52]	; (80045f0 <vPortEnterCritical+0x54>)
 80045bc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80045be:	4b0c      	ldr	r3, [pc, #48]	; (80045f0 <vPortEnterCritical+0x54>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d10e      	bne.n	80045e4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80045c6:	4b0b      	ldr	r3, [pc, #44]	; (80045f4 <vPortEnterCritical+0x58>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d009      	beq.n	80045e4 <vPortEnterCritical+0x48>
 80045d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d4:	f383 8811 	msr	BASEPRI, r3
 80045d8:	f3bf 8f6f 	isb	sy
 80045dc:	f3bf 8f4f 	dsb	sy
 80045e0:	603b      	str	r3, [r7, #0]
 80045e2:	e7fe      	b.n	80045e2 <vPortEnterCritical+0x46>
	}
}
 80045e4:	bf00      	nop
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr
 80045f0:	20000000 	.word	0x20000000
 80045f4:	e000ed04 	.word	0xe000ed04

080045f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80045fe:	4b11      	ldr	r3, [pc, #68]	; (8004644 <vPortExitCritical+0x4c>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d109      	bne.n	800461a <vPortExitCritical+0x22>
 8004606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460a:	f383 8811 	msr	BASEPRI, r3
 800460e:	f3bf 8f6f 	isb	sy
 8004612:	f3bf 8f4f 	dsb	sy
 8004616:	607b      	str	r3, [r7, #4]
 8004618:	e7fe      	b.n	8004618 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800461a:	4b0a      	ldr	r3, [pc, #40]	; (8004644 <vPortExitCritical+0x4c>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	3b01      	subs	r3, #1
 8004620:	4a08      	ldr	r2, [pc, #32]	; (8004644 <vPortExitCritical+0x4c>)
 8004622:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004624:	4b07      	ldr	r3, [pc, #28]	; (8004644 <vPortExitCritical+0x4c>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d104      	bne.n	8004636 <vPortExitCritical+0x3e>
 800462c:	2300      	movs	r3, #0
 800462e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004636:	bf00      	nop
 8004638:	370c      	adds	r7, #12
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	20000000 	.word	0x20000000
	...

08004650 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004650:	f3ef 8009 	mrs	r0, PSP
 8004654:	f3bf 8f6f 	isb	sy
 8004658:	4b15      	ldr	r3, [pc, #84]	; (80046b0 <pxCurrentTCBConst>)
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	f01e 0f10 	tst.w	lr, #16
 8004660:	bf08      	it	eq
 8004662:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004666:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800466a:	6010      	str	r0, [r2, #0]
 800466c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004670:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004674:	f380 8811 	msr	BASEPRI, r0
 8004678:	f3bf 8f4f 	dsb	sy
 800467c:	f3bf 8f6f 	isb	sy
 8004680:	f7fe ffd2 	bl	8003628 <vTaskSwitchContext>
 8004684:	f04f 0000 	mov.w	r0, #0
 8004688:	f380 8811 	msr	BASEPRI, r0
 800468c:	bc09      	pop	{r0, r3}
 800468e:	6819      	ldr	r1, [r3, #0]
 8004690:	6808      	ldr	r0, [r1, #0]
 8004692:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004696:	f01e 0f10 	tst.w	lr, #16
 800469a:	bf08      	it	eq
 800469c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80046a0:	f380 8809 	msr	PSP, r0
 80046a4:	f3bf 8f6f 	isb	sy
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	f3af 8000 	nop.w

080046b0 <pxCurrentTCBConst>:
 80046b0:	200001f4 	.word	0x200001f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80046b4:	bf00      	nop
 80046b6:	bf00      	nop

080046b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
	__asm volatile
 80046be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c2:	f383 8811 	msr	BASEPRI, r3
 80046c6:	f3bf 8f6f 	isb	sy
 80046ca:	f3bf 8f4f 	dsb	sy
 80046ce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80046d0:	f7fe fef2 	bl	80034b8 <xTaskIncrementTick>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d003      	beq.n	80046e2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80046da:	4b06      	ldr	r3, [pc, #24]	; (80046f4 <SysTick_Handler+0x3c>)
 80046dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046e0:	601a      	str	r2, [r3, #0]
 80046e2:	2300      	movs	r3, #0
 80046e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80046ec:	bf00      	nop
 80046ee:	3708      	adds	r7, #8
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	e000ed04 	.word	0xe000ed04

080046f8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80046f8:	b480      	push	{r7}
 80046fa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80046fc:	4b0b      	ldr	r3, [pc, #44]	; (800472c <vPortSetupTimerInterrupt+0x34>)
 80046fe:	2200      	movs	r2, #0
 8004700:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004702:	4b0b      	ldr	r3, [pc, #44]	; (8004730 <vPortSetupTimerInterrupt+0x38>)
 8004704:	2200      	movs	r2, #0
 8004706:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004708:	4b0a      	ldr	r3, [pc, #40]	; (8004734 <vPortSetupTimerInterrupt+0x3c>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a0a      	ldr	r2, [pc, #40]	; (8004738 <vPortSetupTimerInterrupt+0x40>)
 800470e:	fba2 2303 	umull	r2, r3, r2, r3
 8004712:	099b      	lsrs	r3, r3, #6
 8004714:	4a09      	ldr	r2, [pc, #36]	; (800473c <vPortSetupTimerInterrupt+0x44>)
 8004716:	3b01      	subs	r3, #1
 8004718:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800471a:	4b04      	ldr	r3, [pc, #16]	; (800472c <vPortSetupTimerInterrupt+0x34>)
 800471c:	2207      	movs	r2, #7
 800471e:	601a      	str	r2, [r3, #0]
}
 8004720:	bf00      	nop
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	e000e010 	.word	0xe000e010
 8004730:	e000e018 	.word	0xe000e018
 8004734:	20000004 	.word	0x20000004
 8004738:	10624dd3 	.word	0x10624dd3
 800473c:	e000e014 	.word	0xe000e014

08004740 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004740:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004750 <vPortEnableVFP+0x10>
 8004744:	6801      	ldr	r1, [r0, #0]
 8004746:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800474a:	6001      	str	r1, [r0, #0]
 800474c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800474e:	bf00      	nop
 8004750:	e000ed88 	.word	0xe000ed88

08004754 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004754:	b480      	push	{r7}
 8004756:	b085      	sub	sp, #20
 8004758:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800475a:	f3ef 8305 	mrs	r3, IPSR
 800475e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2b0f      	cmp	r3, #15
 8004764:	d913      	bls.n	800478e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004766:	4a16      	ldr	r2, [pc, #88]	; (80047c0 <vPortValidateInterruptPriority+0x6c>)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	4413      	add	r3, r2
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004770:	4b14      	ldr	r3, [pc, #80]	; (80047c4 <vPortValidateInterruptPriority+0x70>)
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	7afa      	ldrb	r2, [r7, #11]
 8004776:	429a      	cmp	r2, r3
 8004778:	d209      	bcs.n	800478e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800477a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800477e:	f383 8811 	msr	BASEPRI, r3
 8004782:	f3bf 8f6f 	isb	sy
 8004786:	f3bf 8f4f 	dsb	sy
 800478a:	607b      	str	r3, [r7, #4]
 800478c:	e7fe      	b.n	800478c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800478e:	4b0e      	ldr	r3, [pc, #56]	; (80047c8 <vPortValidateInterruptPriority+0x74>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004796:	4b0d      	ldr	r3, [pc, #52]	; (80047cc <vPortValidateInterruptPriority+0x78>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	429a      	cmp	r2, r3
 800479c:	d909      	bls.n	80047b2 <vPortValidateInterruptPriority+0x5e>
 800479e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a2:	f383 8811 	msr	BASEPRI, r3
 80047a6:	f3bf 8f6f 	isb	sy
 80047aa:	f3bf 8f4f 	dsb	sy
 80047ae:	603b      	str	r3, [r7, #0]
 80047b0:	e7fe      	b.n	80047b0 <vPortValidateInterruptPriority+0x5c>
	}
 80047b2:	bf00      	nop
 80047b4:	3714      	adds	r7, #20
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	e000e3f0 	.word	0xe000e3f0
 80047c4:	2000041c 	.word	0x2000041c
 80047c8:	e000ed0c 	.word	0xe000ed0c
 80047cc:	20000420 	.word	0x20000420

080047d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b08a      	sub	sp, #40	; 0x28
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80047d8:	2300      	movs	r3, #0
 80047da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80047dc:	f7fe fdb2 	bl	8003344 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80047e0:	4b57      	ldr	r3, [pc, #348]	; (8004940 <pvPortMalloc+0x170>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d101      	bne.n	80047ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80047e8:	f000 f90c 	bl	8004a04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80047ec:	4b55      	ldr	r3, [pc, #340]	; (8004944 <pvPortMalloc+0x174>)
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4013      	ands	r3, r2
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	f040 808c 	bne.w	8004912 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d01c      	beq.n	800483a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004800:	2208      	movs	r2, #8
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4413      	add	r3, r2
 8004806:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f003 0307 	and.w	r3, r3, #7
 800480e:	2b00      	cmp	r3, #0
 8004810:	d013      	beq.n	800483a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f023 0307 	bic.w	r3, r3, #7
 8004818:	3308      	adds	r3, #8
 800481a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f003 0307 	and.w	r3, r3, #7
 8004822:	2b00      	cmp	r3, #0
 8004824:	d009      	beq.n	800483a <pvPortMalloc+0x6a>
 8004826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800482a:	f383 8811 	msr	BASEPRI, r3
 800482e:	f3bf 8f6f 	isb	sy
 8004832:	f3bf 8f4f 	dsb	sy
 8004836:	617b      	str	r3, [r7, #20]
 8004838:	e7fe      	b.n	8004838 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d068      	beq.n	8004912 <pvPortMalloc+0x142>
 8004840:	4b41      	ldr	r3, [pc, #260]	; (8004948 <pvPortMalloc+0x178>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	429a      	cmp	r2, r3
 8004848:	d863      	bhi.n	8004912 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800484a:	4b40      	ldr	r3, [pc, #256]	; (800494c <pvPortMalloc+0x17c>)
 800484c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800484e:	4b3f      	ldr	r3, [pc, #252]	; (800494c <pvPortMalloc+0x17c>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004854:	e004      	b.n	8004860 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8004856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004858:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800485a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	429a      	cmp	r2, r3
 8004868:	d903      	bls.n	8004872 <pvPortMalloc+0xa2>
 800486a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d1f1      	bne.n	8004856 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004872:	4b33      	ldr	r3, [pc, #204]	; (8004940 <pvPortMalloc+0x170>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004878:	429a      	cmp	r2, r3
 800487a:	d04a      	beq.n	8004912 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800487c:	6a3b      	ldr	r3, [r7, #32]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2208      	movs	r2, #8
 8004882:	4413      	add	r3, r2
 8004884:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	6a3b      	ldr	r3, [r7, #32]
 800488c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800488e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004890:	685a      	ldr	r2, [r3, #4]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	1ad2      	subs	r2, r2, r3
 8004896:	2308      	movs	r3, #8
 8004898:	005b      	lsls	r3, r3, #1
 800489a:	429a      	cmp	r2, r3
 800489c:	d91e      	bls.n	80048dc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800489e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4413      	add	r3, r2
 80048a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	f003 0307 	and.w	r3, r3, #7
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d009      	beq.n	80048c4 <pvPortMalloc+0xf4>
 80048b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b4:	f383 8811 	msr	BASEPRI, r3
 80048b8:	f3bf 8f6f 	isb	sy
 80048bc:	f3bf 8f4f 	dsb	sy
 80048c0:	613b      	str	r3, [r7, #16]
 80048c2:	e7fe      	b.n	80048c2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80048c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c6:	685a      	ldr	r2, [r3, #4]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	1ad2      	subs	r2, r2, r3
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80048d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80048d6:	69b8      	ldr	r0, [r7, #24]
 80048d8:	f000 f8f6 	bl	8004ac8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80048dc:	4b1a      	ldr	r3, [pc, #104]	; (8004948 <pvPortMalloc+0x178>)
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	4a18      	ldr	r2, [pc, #96]	; (8004948 <pvPortMalloc+0x178>)
 80048e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80048ea:	4b17      	ldr	r3, [pc, #92]	; (8004948 <pvPortMalloc+0x178>)
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	4b18      	ldr	r3, [pc, #96]	; (8004950 <pvPortMalloc+0x180>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d203      	bcs.n	80048fe <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80048f6:	4b14      	ldr	r3, [pc, #80]	; (8004948 <pvPortMalloc+0x178>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a15      	ldr	r2, [pc, #84]	; (8004950 <pvPortMalloc+0x180>)
 80048fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80048fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004900:	685a      	ldr	r2, [r3, #4]
 8004902:	4b10      	ldr	r3, [pc, #64]	; (8004944 <pvPortMalloc+0x174>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	431a      	orrs	r2, r3
 8004908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800490c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490e:	2200      	movs	r2, #0
 8004910:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004912:	f7fe fd25 	bl	8003360 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	f003 0307 	and.w	r3, r3, #7
 800491c:	2b00      	cmp	r3, #0
 800491e:	d009      	beq.n	8004934 <pvPortMalloc+0x164>
 8004920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004924:	f383 8811 	msr	BASEPRI, r3
 8004928:	f3bf 8f6f 	isb	sy
 800492c:	f3bf 8f4f 	dsb	sy
 8004930:	60fb      	str	r3, [r7, #12]
 8004932:	e7fe      	b.n	8004932 <pvPortMalloc+0x162>
	return pvReturn;
 8004934:	69fb      	ldr	r3, [r7, #28]
}
 8004936:	4618      	mov	r0, r3
 8004938:	3728      	adds	r7, #40	; 0x28
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	2000402c 	.word	0x2000402c
 8004944:	20004038 	.word	0x20004038
 8004948:	20004030 	.word	0x20004030
 800494c:	20004024 	.word	0x20004024
 8004950:	20004034 	.word	0x20004034

08004954 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b086      	sub	sp, #24
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d046      	beq.n	80049f4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004966:	2308      	movs	r3, #8
 8004968:	425b      	negs	r3, r3
 800496a:	697a      	ldr	r2, [r7, #20]
 800496c:	4413      	add	r3, r2
 800496e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	685a      	ldr	r2, [r3, #4]
 8004978:	4b20      	ldr	r3, [pc, #128]	; (80049fc <vPortFree+0xa8>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4013      	ands	r3, r2
 800497e:	2b00      	cmp	r3, #0
 8004980:	d109      	bne.n	8004996 <vPortFree+0x42>
 8004982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004986:	f383 8811 	msr	BASEPRI, r3
 800498a:	f3bf 8f6f 	isb	sy
 800498e:	f3bf 8f4f 	dsb	sy
 8004992:	60fb      	str	r3, [r7, #12]
 8004994:	e7fe      	b.n	8004994 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d009      	beq.n	80049b2 <vPortFree+0x5e>
 800499e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a2:	f383 8811 	msr	BASEPRI, r3
 80049a6:	f3bf 8f6f 	isb	sy
 80049aa:	f3bf 8f4f 	dsb	sy
 80049ae:	60bb      	str	r3, [r7, #8]
 80049b0:	e7fe      	b.n	80049b0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	685a      	ldr	r2, [r3, #4]
 80049b6:	4b11      	ldr	r3, [pc, #68]	; (80049fc <vPortFree+0xa8>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4013      	ands	r3, r2
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d019      	beq.n	80049f4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d115      	bne.n	80049f4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	685a      	ldr	r2, [r3, #4]
 80049cc:	4b0b      	ldr	r3, [pc, #44]	; (80049fc <vPortFree+0xa8>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	43db      	mvns	r3, r3
 80049d2:	401a      	ands	r2, r3
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80049d8:	f7fe fcb4 	bl	8003344 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	685a      	ldr	r2, [r3, #4]
 80049e0:	4b07      	ldr	r3, [pc, #28]	; (8004a00 <vPortFree+0xac>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4413      	add	r3, r2
 80049e6:	4a06      	ldr	r2, [pc, #24]	; (8004a00 <vPortFree+0xac>)
 80049e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80049ea:	6938      	ldr	r0, [r7, #16]
 80049ec:	f000 f86c 	bl	8004ac8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80049f0:	f7fe fcb6 	bl	8003360 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80049f4:	bf00      	nop
 80049f6:	3718      	adds	r7, #24
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	20004038 	.word	0x20004038
 8004a00:	20004030 	.word	0x20004030

08004a04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004a04:	b480      	push	{r7}
 8004a06:	b085      	sub	sp, #20
 8004a08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004a0a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004a0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004a10:	4b27      	ldr	r3, [pc, #156]	; (8004ab0 <prvHeapInit+0xac>)
 8004a12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f003 0307 	and.w	r3, r3, #7
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00c      	beq.n	8004a38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	3307      	adds	r3, #7
 8004a22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f023 0307 	bic.w	r3, r3, #7
 8004a2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004a2c:	68ba      	ldr	r2, [r7, #8]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	4a1f      	ldr	r2, [pc, #124]	; (8004ab0 <prvHeapInit+0xac>)
 8004a34:	4413      	add	r3, r2
 8004a36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004a3c:	4a1d      	ldr	r2, [pc, #116]	; (8004ab4 <prvHeapInit+0xb0>)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004a42:	4b1c      	ldr	r3, [pc, #112]	; (8004ab4 <prvHeapInit+0xb0>)
 8004a44:	2200      	movs	r2, #0
 8004a46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	68ba      	ldr	r2, [r7, #8]
 8004a4c:	4413      	add	r3, r2
 8004a4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004a50:	2208      	movs	r2, #8
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	1a9b      	subs	r3, r3, r2
 8004a56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f023 0307 	bic.w	r3, r3, #7
 8004a5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	4a15      	ldr	r2, [pc, #84]	; (8004ab8 <prvHeapInit+0xb4>)
 8004a64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004a66:	4b14      	ldr	r3, [pc, #80]	; (8004ab8 <prvHeapInit+0xb4>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004a6e:	4b12      	ldr	r3, [pc, #72]	; (8004ab8 <prvHeapInit+0xb4>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2200      	movs	r2, #0
 8004a74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	1ad2      	subs	r2, r2, r3
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004a84:	4b0c      	ldr	r3, [pc, #48]	; (8004ab8 <prvHeapInit+0xb4>)
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	4a0a      	ldr	r2, [pc, #40]	; (8004abc <prvHeapInit+0xb8>)
 8004a92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	4a09      	ldr	r2, [pc, #36]	; (8004ac0 <prvHeapInit+0xbc>)
 8004a9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004a9c:	4b09      	ldr	r3, [pc, #36]	; (8004ac4 <prvHeapInit+0xc0>)
 8004a9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004aa2:	601a      	str	r2, [r3, #0]
}
 8004aa4:	bf00      	nop
 8004aa6:	3714      	adds	r7, #20
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr
 8004ab0:	20000424 	.word	0x20000424
 8004ab4:	20004024 	.word	0x20004024
 8004ab8:	2000402c 	.word	0x2000402c
 8004abc:	20004034 	.word	0x20004034
 8004ac0:	20004030 	.word	0x20004030
 8004ac4:	20004038 	.word	0x20004038

08004ac8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b085      	sub	sp, #20
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004ad0:	4b28      	ldr	r3, [pc, #160]	; (8004b74 <prvInsertBlockIntoFreeList+0xac>)
 8004ad2:	60fb      	str	r3, [r7, #12]
 8004ad4:	e002      	b.n	8004adc <prvInsertBlockIntoFreeList+0x14>
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	60fb      	str	r3, [r7, #12]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d8f7      	bhi.n	8004ad6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	68ba      	ldr	r2, [r7, #8]
 8004af0:	4413      	add	r3, r2
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d108      	bne.n	8004b0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	685a      	ldr	r2, [r3, #4]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	441a      	add	r2, r3
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	68ba      	ldr	r2, [r7, #8]
 8004b14:	441a      	add	r2, r3
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d118      	bne.n	8004b50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	4b15      	ldr	r3, [pc, #84]	; (8004b78 <prvInsertBlockIntoFreeList+0xb0>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d00d      	beq.n	8004b46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	685a      	ldr	r2, [r3, #4]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	441a      	add	r2, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	601a      	str	r2, [r3, #0]
 8004b44:	e008      	b.n	8004b58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004b46:	4b0c      	ldr	r3, [pc, #48]	; (8004b78 <prvInsertBlockIntoFreeList+0xb0>)
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	601a      	str	r2, [r3, #0]
 8004b4e:	e003      	b.n	8004b58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d002      	beq.n	8004b66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b66:	bf00      	nop
 8004b68:	3714      	adds	r7, #20
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	20004024 	.word	0x20004024
 8004b78:	2000402c 	.word	0x2000402c

08004b7c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b085      	sub	sp, #20
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	60b9      	str	r1, [r7, #8]
 8004b86:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	4a07      	ldr	r2, [pc, #28]	; (8004ba8 <vApplicationGetIdleTaskMemory+0x2c>)
 8004b8c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	4a06      	ldr	r2, [pc, #24]	; (8004bac <vApplicationGetIdleTaskMemory+0x30>)
 8004b92:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2280      	movs	r2, #128	; 0x80
 8004b98:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8004b9a:	bf00      	nop
 8004b9c:	3714      	adds	r7, #20
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr
 8004ba6:	bf00      	nop
 8004ba8:	2000403c 	.word	0x2000403c
 8004bac:	20004090 	.word	0x20004090

08004bb0 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];
  
void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )  
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	4a07      	ldr	r2, [pc, #28]	; (8004bdc <vApplicationGetTimerTaskMemory+0x2c>)
 8004bc0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	4a06      	ldr	r2, [pc, #24]	; (8004be0 <vApplicationGetTimerTaskMemory+0x30>)
 8004bc6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004bce:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8004bd0:	bf00      	nop
 8004bd2:	3714      	adds	r7, #20
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr
 8004bdc:	20004290 	.word	0x20004290
 8004be0:	200042e4 	.word	0x200042e4

08004be4 <task1>:
void printc(char *format, ...);
void Decode_CMD(char *msg);


void task1(void *p)
 {
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
	TickType_t tick;
	while (1) {
		vTaskSuspend(NULL);
 8004bec:	2000      	movs	r0, #0
 8004bee:	f7fe fa13 	bl	8003018 <vTaskSuspend>

		if (info.relay_no == 1 && strcmp(info.status, "ON") == 0)
 8004bf2:	4b57      	ldr	r3, [pc, #348]	; (8004d50 <task1+0x16c>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d160      	bne.n	8004cbc <task1+0xd8>
 8004bfa:	4956      	ldr	r1, [pc, #344]	; (8004d54 <task1+0x170>)
 8004bfc:	4856      	ldr	r0, [pc, #344]	; (8004d58 <task1+0x174>)
 8004bfe:	f7fb fb07 	bl	8000210 <strcmp>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d159      	bne.n	8004cbc <task1+0xd8>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8004c08:	2201      	movs	r2, #1
 8004c0a:	2120      	movs	r1, #32
 8004c0c:	4853      	ldr	r0, [pc, #332]	; (8004d5c <task1+0x178>)
 8004c0e:	f7fb ffab 	bl	8000b68 <HAL_GPIO_WritePin>
			tick = xTaskGetTickCount();
 8004c12:	f7fe fc41 	bl	8003498 <xTaskGetTickCount>
 8004c16:	4603      	mov	r3, r0
 8004c18:	60bb      	str	r3, [r7, #8]
			long time = info.tim;
 8004c1a:	4b4d      	ldr	r3, [pc, #308]	; (8004d50 <task1+0x16c>)
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	60fb      	str	r3, [r7, #12]
			while (xTaskGetTickCount() - tick < time * configTICK_RATE_HZ / 1000)
 8004c20:	e00a      	b.n	8004c38 <task1+0x54>
			{
				if (info.relay_no == 1 && strcmp(info.status, "OFF") == 0)
 8004c22:	4b4b      	ldr	r3, [pc, #300]	; (8004d50 <task1+0x16c>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d106      	bne.n	8004c38 <task1+0x54>
 8004c2a:	494d      	ldr	r1, [pc, #308]	; (8004d60 <task1+0x17c>)
 8004c2c:	484a      	ldr	r0, [pc, #296]	; (8004d58 <task1+0x174>)
 8004c2e:	f7fb faef 	bl	8000210 <strcmp>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d010      	beq.n	8004c5a <task1+0x76>
			while (xTaskGetTickCount() - tick < time * configTICK_RATE_HZ / 1000)
 8004c38:	f7fe fc2e 	bl	8003498 <xTaskGetTickCount>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	1ad2      	subs	r2, r2, r3
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004c48:	fb01 f303 	mul.w	r3, r1, r3
 8004c4c:	4945      	ldr	r1, [pc, #276]	; (8004d64 <task1+0x180>)
 8004c4e:	fba1 1303 	umull	r1, r3, r1, r3
 8004c52:	099b      	lsrs	r3, r3, #6
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d3e4      	bcc.n	8004c22 <task1+0x3e>
				{
					goto off;
				}
			}

			off: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 8004c58:	e000      	b.n	8004c5c <task1+0x78>
					goto off;
 8004c5a:	bf00      	nop
			off: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	2120      	movs	r1, #32
 8004c60:	483e      	ldr	r0, [pc, #248]	; (8004d5c <task1+0x178>)
 8004c62:	f7fb ff81 	bl	8000b68 <HAL_GPIO_WritePin>
			if(info.tim > 0 && strcmp(info.status, "OFF") == 0 ){
 8004c66:	4b3a      	ldr	r3, [pc, #232]	; (8004d50 <task1+0x16c>)
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	dd23      	ble.n	8004cb6 <task1+0xd2>
 8004c6e:	493c      	ldr	r1, [pc, #240]	; (8004d60 <task1+0x17c>)
 8004c70:	4839      	ldr	r0, [pc, #228]	; (8004d58 <task1+0x174>)
 8004c72:	f7fb facd 	bl	8000210 <strcmp>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d11c      	bne.n	8004cb6 <task1+0xd2>
				tick = xTaskGetTickCount();
 8004c7c:	f7fe fc0c 	bl	8003498 <xTaskGetTickCount>
 8004c80:	4603      	mov	r3, r0
 8004c82:	60bb      	str	r3, [r7, #8]
				vTaskDelayUntil(&tick, info.tim * configTICK_RATE_HZ / 1000);
 8004c84:	4b32      	ldr	r3, [pc, #200]	; (8004d50 <task1+0x16c>)
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	461a      	mov	r2, r3
 8004c8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c8e:	fb03 f302 	mul.w	r3, r3, r2
 8004c92:	4a34      	ldr	r2, [pc, #208]	; (8004d64 <task1+0x180>)
 8004c94:	fba2 2303 	umull	r2, r3, r2, r3
 8004c98:	099a      	lsrs	r2, r3, #6
 8004c9a:	f107 0308 	add.w	r3, r7, #8
 8004c9e:	4611      	mov	r1, r2
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f7fe f93f 	bl	8002f24 <vTaskDelayUntil>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	2120      	movs	r1, #32
 8004caa:	482c      	ldr	r0, [pc, #176]	; (8004d5c <task1+0x178>)
 8004cac:	f7fb ff5c 	bl	8000b68 <HAL_GPIO_WritePin>
				info.relay_no =0;
 8004cb0:	4b27      	ldr	r3, [pc, #156]	; (8004d50 <task1+0x16c>)
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	601a      	str	r2, [r3, #0]
			}
			info.relay_no =0;
 8004cb6:	4b26      	ldr	r3, [pc, #152]	; (8004d50 <task1+0x16c>)
 8004cb8:	2200      	movs	r2, #0
 8004cba:	601a      	str	r2, [r3, #0]

		}
		if(info.relay_no == 1 && strcmp(info.status, "OFF") == 0 && info.tim == 0)
 8004cbc:	4b24      	ldr	r3, [pc, #144]	; (8004d50 <task1+0x16c>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d10f      	bne.n	8004ce4 <task1+0x100>
 8004cc4:	4926      	ldr	r1, [pc, #152]	; (8004d60 <task1+0x17c>)
 8004cc6:	4824      	ldr	r0, [pc, #144]	; (8004d58 <task1+0x174>)
 8004cc8:	f7fb faa2 	bl	8000210 <strcmp>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d108      	bne.n	8004ce4 <task1+0x100>
 8004cd2:	4b1f      	ldr	r3, [pc, #124]	; (8004d50 <task1+0x16c>)
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d104      	bne.n	8004ce4 <task1+0x100>
		{
			 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 8004cda:	2200      	movs	r2, #0
 8004cdc:	2120      	movs	r1, #32
 8004cde:	481f      	ldr	r0, [pc, #124]	; (8004d5c <task1+0x178>)
 8004ce0:	f7fb ff42 	bl	8000b68 <HAL_GPIO_WritePin>
		}
		if(info.relay_no == 1 && strcmp(info.status, "OFF") == 0 && info.tim > 0)
 8004ce4:	4b1a      	ldr	r3, [pc, #104]	; (8004d50 <task1+0x16c>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d129      	bne.n	8004d40 <task1+0x15c>
 8004cec:	491c      	ldr	r1, [pc, #112]	; (8004d60 <task1+0x17c>)
 8004cee:	481a      	ldr	r0, [pc, #104]	; (8004d58 <task1+0x174>)
 8004cf0:	f7fb fa8e 	bl	8000210 <strcmp>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d122      	bne.n	8004d40 <task1+0x15c>
 8004cfa:	4b15      	ldr	r3, [pc, #84]	; (8004d50 <task1+0x16c>)
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	dd1e      	ble.n	8004d40 <task1+0x15c>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 8004d02:	2200      	movs	r2, #0
 8004d04:	2120      	movs	r1, #32
 8004d06:	4815      	ldr	r0, [pc, #84]	; (8004d5c <task1+0x178>)
 8004d08:	f7fb ff2e 	bl	8000b68 <HAL_GPIO_WritePin>
			tick = xTaskGetTickCount();
 8004d0c:	f7fe fbc4 	bl	8003498 <xTaskGetTickCount>
 8004d10:	4603      	mov	r3, r0
 8004d12:	60bb      	str	r3, [r7, #8]
			vTaskDelayUntil(&tick, info.tim * configTICK_RATE_HZ / 1000);
 8004d14:	4b0e      	ldr	r3, [pc, #56]	; (8004d50 <task1+0x16c>)
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	461a      	mov	r2, r3
 8004d1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d1e:	fb03 f302 	mul.w	r3, r3, r2
 8004d22:	4a10      	ldr	r2, [pc, #64]	; (8004d64 <task1+0x180>)
 8004d24:	fba2 2303 	umull	r2, r3, r2, r3
 8004d28:	099a      	lsrs	r2, r3, #6
 8004d2a:	f107 0308 	add.w	r3, r7, #8
 8004d2e:	4611      	mov	r1, r2
 8004d30:	4618      	mov	r0, r3
 8004d32:	f7fe f8f7 	bl	8002f24 <vTaskDelayUntil>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8004d36:	2201      	movs	r2, #1
 8004d38:	2120      	movs	r1, #32
 8004d3a:	4808      	ldr	r0, [pc, #32]	; (8004d5c <task1+0x178>)
 8004d3c:	f7fb ff14 	bl	8000b68 <HAL_GPIO_WritePin>
		}

		vTaskDelayUntil(&tick, 1900 * configTICK_RATE_HZ / 1000);
 8004d40:	f107 0308 	add.w	r3, r7, #8
 8004d44:	f240 716c 	movw	r1, #1900	; 0x76c
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f7fe f8eb 	bl	8002f24 <vTaskDelayUntil>
		vTaskSuspend(NULL);
 8004d4e:	e74d      	b.n	8004bec <task1+0x8>
 8004d50:	20004738 	.word	0x20004738
 8004d54:	08007f00 	.word	0x08007f00
 8004d58:	2000473c 	.word	0x2000473c
 8004d5c:	40020000 	.word	0x40020000
 8004d60:	08007f04 	.word	0x08007f04
 8004d64:	10624dd3 	.word	0x10624dd3

08004d68 <task2>:
	}
}

void task2(void *p)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b084      	sub	sp, #16
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
	TickType_t tick;
		while (1) {
			vTaskSuspend(NULL);
 8004d70:	2000      	movs	r0, #0
 8004d72:	f7fe f951 	bl	8003018 <vTaskSuspend>

			if (info.relay_no == 2 && strcmp(info.status, "ON") == 0)
 8004d76:	4b40      	ldr	r3, [pc, #256]	; (8004e78 <task2+0x110>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	d160      	bne.n	8004e40 <task2+0xd8>
 8004d7e:	493f      	ldr	r1, [pc, #252]	; (8004e7c <task2+0x114>)
 8004d80:	483f      	ldr	r0, [pc, #252]	; (8004e80 <task2+0x118>)
 8004d82:	f7fb fa45 	bl	8000210 <strcmp>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d159      	bne.n	8004e40 <task2+0xd8>
			{
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, SET);
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	2104      	movs	r1, #4
 8004d90:	483c      	ldr	r0, [pc, #240]	; (8004e84 <task2+0x11c>)
 8004d92:	f7fb fee9 	bl	8000b68 <HAL_GPIO_WritePin>
				tick = xTaskGetTickCount();
 8004d96:	f7fe fb7f 	bl	8003498 <xTaskGetTickCount>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	60bb      	str	r3, [r7, #8]
				uint32_t time = info.tim;
 8004d9e:	4b36      	ldr	r3, [pc, #216]	; (8004e78 <task2+0x110>)
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	60fb      	str	r3, [r7, #12]
				while (xTaskGetTickCount() - tick < time * configTICK_RATE_HZ / 1000)
 8004da4:	e00a      	b.n	8004dbc <task2+0x54>
				{
					if (info.relay_no == 2 && strcmp(info.status, "OFF") == 0)
 8004da6:	4b34      	ldr	r3, [pc, #208]	; (8004e78 <task2+0x110>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d106      	bne.n	8004dbc <task2+0x54>
 8004dae:	4936      	ldr	r1, [pc, #216]	; (8004e88 <task2+0x120>)
 8004db0:	4833      	ldr	r0, [pc, #204]	; (8004e80 <task2+0x118>)
 8004db2:	f7fb fa2d 	bl	8000210 <strcmp>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d010      	beq.n	8004dde <task2+0x76>
				while (xTaskGetTickCount() - tick < time * configTICK_RATE_HZ / 1000)
 8004dbc:	f7fe fb6c 	bl	8003498 <xTaskGetTickCount>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	1ad2      	subs	r2, r2, r3
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004dcc:	fb01 f303 	mul.w	r3, r1, r3
 8004dd0:	492e      	ldr	r1, [pc, #184]	; (8004e8c <task2+0x124>)
 8004dd2:	fba1 1303 	umull	r1, r3, r1, r3
 8004dd6:	099b      	lsrs	r3, r3, #6
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d3e4      	bcc.n	8004da6 <task2+0x3e>
					{
						goto off;
					}
				}

				off: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, RESET);
 8004ddc:	e000      	b.n	8004de0 <task2+0x78>
						goto off;
 8004dde:	bf00      	nop
				off: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, RESET);
 8004de0:	2200      	movs	r2, #0
 8004de2:	2104      	movs	r1, #4
 8004de4:	4827      	ldr	r0, [pc, #156]	; (8004e84 <task2+0x11c>)
 8004de6:	f7fb febf 	bl	8000b68 <HAL_GPIO_WritePin>
				if(info.tim > 0 && strcmp(info.status, "OFF") == 0 ){
 8004dea:	4b23      	ldr	r3, [pc, #140]	; (8004e78 <task2+0x110>)
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	dd23      	ble.n	8004e3a <task2+0xd2>
 8004df2:	4925      	ldr	r1, [pc, #148]	; (8004e88 <task2+0x120>)
 8004df4:	4822      	ldr	r0, [pc, #136]	; (8004e80 <task2+0x118>)
 8004df6:	f7fb fa0b 	bl	8000210 <strcmp>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d11c      	bne.n	8004e3a <task2+0xd2>
					tick = xTaskGetTickCount();
 8004e00:	f7fe fb4a 	bl	8003498 <xTaskGetTickCount>
 8004e04:	4603      	mov	r3, r0
 8004e06:	60bb      	str	r3, [r7, #8]
					vTaskDelayUntil(&tick, info.tim * configTICK_RATE_HZ / 1000);
 8004e08:	4b1b      	ldr	r3, [pc, #108]	; (8004e78 <task2+0x110>)
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e12:	fb03 f302 	mul.w	r3, r3, r2
 8004e16:	4a1d      	ldr	r2, [pc, #116]	; (8004e8c <task2+0x124>)
 8004e18:	fba2 2303 	umull	r2, r3, r2, r3
 8004e1c:	099a      	lsrs	r2, r3, #6
 8004e1e:	f107 0308 	add.w	r3, r7, #8
 8004e22:	4611      	mov	r1, r2
 8004e24:	4618      	mov	r0, r3
 8004e26:	f7fe f87d 	bl	8002f24 <vTaskDelayUntil>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, SET);
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	2104      	movs	r1, #4
 8004e2e:	4815      	ldr	r0, [pc, #84]	; (8004e84 <task2+0x11c>)
 8004e30:	f7fb fe9a 	bl	8000b68 <HAL_GPIO_WritePin>
					info.relay_no =0;
 8004e34:	4b10      	ldr	r3, [pc, #64]	; (8004e78 <task2+0x110>)
 8004e36:	2200      	movs	r2, #0
 8004e38:	601a      	str	r2, [r3, #0]
				}
				info.relay_no =0;
 8004e3a:	4b0f      	ldr	r3, [pc, #60]	; (8004e78 <task2+0x110>)
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	601a      	str	r2, [r3, #0]

			}
			if(info.relay_no == 2 && strcmp(info.status, "OFF") == 0 && info.tim == 0)
 8004e40:	4b0d      	ldr	r3, [pc, #52]	; (8004e78 <task2+0x110>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d10f      	bne.n	8004e68 <task2+0x100>
 8004e48:	490f      	ldr	r1, [pc, #60]	; (8004e88 <task2+0x120>)
 8004e4a:	480d      	ldr	r0, [pc, #52]	; (8004e80 <task2+0x118>)
 8004e4c:	f7fb f9e0 	bl	8000210 <strcmp>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d108      	bne.n	8004e68 <task2+0x100>
 8004e56:	4b08      	ldr	r3, [pc, #32]	; (8004e78 <task2+0x110>)
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d104      	bne.n	8004e68 <task2+0x100>
			{
				 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, RESET);
 8004e5e:	2200      	movs	r2, #0
 8004e60:	2104      	movs	r1, #4
 8004e62:	4808      	ldr	r0, [pc, #32]	; (8004e84 <task2+0x11c>)
 8004e64:	f7fb fe80 	bl	8000b68 <HAL_GPIO_WritePin>
			}

			vTaskDelayUntil(&tick, 1900 * configTICK_RATE_HZ / 1000);
 8004e68:	f107 0308 	add.w	r3, r7, #8
 8004e6c:	f240 716c 	movw	r1, #1900	; 0x76c
 8004e70:	4618      	mov	r0, r3
 8004e72:	f7fe f857 	bl	8002f24 <vTaskDelayUntil>
			vTaskSuspend(NULL);
 8004e76:	e77b      	b.n	8004d70 <task2+0x8>
 8004e78:	20004738 	.word	0x20004738
 8004e7c:	08007f00 	.word	0x08007f00
 8004e80:	2000473c 	.word	0x2000473c
 8004e84:	40020400 	.word	0x40020400
 8004e88:	08007f04 	.word	0x08007f04
 8004e8c:	10624dd3 	.word	0x10624dd3

08004e90 <task4>:
		}
}
void task4(void *p)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
	TickType_t tick;
	while (1) {
		vTaskSuspend(NULL);
 8004e98:	2000      	movs	r0, #0
 8004e9a:	f7fe f8bd 	bl	8003018 <vTaskSuspend>

		if (info.relay_no == 4 && strcmp(info.status, "ON") == 0)
 8004e9e:	4b42      	ldr	r3, [pc, #264]	; (8004fa8 <task4+0x118>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	2b04      	cmp	r3, #4
 8004ea4:	d163      	bne.n	8004f6e <task4+0xde>
 8004ea6:	4941      	ldr	r1, [pc, #260]	; (8004fac <task4+0x11c>)
 8004ea8:	4841      	ldr	r0, [pc, #260]	; (8004fb0 <task4+0x120>)
 8004eaa:	f7fb f9b1 	bl	8000210 <strcmp>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d15c      	bne.n	8004f6e <task4+0xde>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, SET);
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004eba:	483e      	ldr	r0, [pc, #248]	; (8004fb4 <task4+0x124>)
 8004ebc:	f7fb fe54 	bl	8000b68 <HAL_GPIO_WritePin>
			tick = xTaskGetTickCount();
 8004ec0:	f7fe faea 	bl	8003498 <xTaskGetTickCount>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	60bb      	str	r3, [r7, #8]
			uint32_t time = info.tim;
 8004ec8:	4b37      	ldr	r3, [pc, #220]	; (8004fa8 <task4+0x118>)
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	60fb      	str	r3, [r7, #12]
			while (xTaskGetTickCount() - tick < time * configTICK_RATE_HZ / 1000)
 8004ece:	e00a      	b.n	8004ee6 <task4+0x56>
			{
				if (info.relay_no == 4 && strcmp(info.status, "OFF") == 0)
 8004ed0:	4b35      	ldr	r3, [pc, #212]	; (8004fa8 <task4+0x118>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2b04      	cmp	r3, #4
 8004ed6:	d106      	bne.n	8004ee6 <task4+0x56>
 8004ed8:	4937      	ldr	r1, [pc, #220]	; (8004fb8 <task4+0x128>)
 8004eda:	4835      	ldr	r0, [pc, #212]	; (8004fb0 <task4+0x120>)
 8004edc:	f7fb f998 	bl	8000210 <strcmp>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d010      	beq.n	8004f08 <task4+0x78>
			while (xTaskGetTickCount() - tick < time * configTICK_RATE_HZ / 1000)
 8004ee6:	f7fe fad7 	bl	8003498 <xTaskGetTickCount>
 8004eea:	4602      	mov	r2, r0
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	1ad2      	subs	r2, r2, r3
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004ef6:	fb01 f303 	mul.w	r3, r1, r3
 8004efa:	4930      	ldr	r1, [pc, #192]	; (8004fbc <task4+0x12c>)
 8004efc:	fba1 1303 	umull	r1, r3, r1, r3
 8004f00:	099b      	lsrs	r3, r3, #6
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d3e4      	bcc.n	8004ed0 <task4+0x40>
				{
					goto off;
				}
			}

			off: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, RESET);
 8004f06:	e000      	b.n	8004f0a <task4+0x7a>
					goto off;
 8004f08:	bf00      	nop
			off: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, RESET);
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004f10:	4828      	ldr	r0, [pc, #160]	; (8004fb4 <task4+0x124>)
 8004f12:	f7fb fe29 	bl	8000b68 <HAL_GPIO_WritePin>
			if (info.tim > 0 && strcmp(info.status, "OFF") == 0 ) {
 8004f16:	4b24      	ldr	r3, [pc, #144]	; (8004fa8 <task4+0x118>)
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	dd24      	ble.n	8004f68 <task4+0xd8>
 8004f1e:	4926      	ldr	r1, [pc, #152]	; (8004fb8 <task4+0x128>)
 8004f20:	4823      	ldr	r0, [pc, #140]	; (8004fb0 <task4+0x120>)
 8004f22:	f7fb f975 	bl	8000210 <strcmp>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d11d      	bne.n	8004f68 <task4+0xd8>
				tick = xTaskGetTickCount();
 8004f2c:	f7fe fab4 	bl	8003498 <xTaskGetTickCount>
 8004f30:	4603      	mov	r3, r0
 8004f32:	60bb      	str	r3, [r7, #8]
				vTaskDelayUntil(&tick, info.tim * configTICK_RATE_HZ / 1000);
 8004f34:	4b1c      	ldr	r3, [pc, #112]	; (8004fa8 <task4+0x118>)
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	461a      	mov	r2, r3
 8004f3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004f3e:	fb03 f302 	mul.w	r3, r3, r2
 8004f42:	4a1e      	ldr	r2, [pc, #120]	; (8004fbc <task4+0x12c>)
 8004f44:	fba2 2303 	umull	r2, r3, r2, r3
 8004f48:	099a      	lsrs	r2, r3, #6
 8004f4a:	f107 0308 	add.w	r3, r7, #8
 8004f4e:	4611      	mov	r1, r2
 8004f50:	4618      	mov	r0, r3
 8004f52:	f7fd ffe7 	bl	8002f24 <vTaskDelayUntil>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, SET);
 8004f56:	2201      	movs	r2, #1
 8004f58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004f5c:	4815      	ldr	r0, [pc, #84]	; (8004fb4 <task4+0x124>)
 8004f5e:	f7fb fe03 	bl	8000b68 <HAL_GPIO_WritePin>
				info.relay_no =0;
 8004f62:	4b11      	ldr	r3, [pc, #68]	; (8004fa8 <task4+0x118>)
 8004f64:	2200      	movs	r2, #0
 8004f66:	601a      	str	r2, [r3, #0]
			}
			info.relay_no =0;
 8004f68:	4b0f      	ldr	r3, [pc, #60]	; (8004fa8 <task4+0x118>)
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	601a      	str	r2, [r3, #0]

		}
		if (info.relay_no == 4 && strcmp(info.status, "OFF") == 0 && info.tim == 0) {
 8004f6e:	4b0e      	ldr	r3, [pc, #56]	; (8004fa8 <task4+0x118>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	2b04      	cmp	r3, #4
 8004f74:	d110      	bne.n	8004f98 <task4+0x108>
 8004f76:	4910      	ldr	r1, [pc, #64]	; (8004fb8 <task4+0x128>)
 8004f78:	480d      	ldr	r0, [pc, #52]	; (8004fb0 <task4+0x120>)
 8004f7a:	f7fb f949 	bl	8000210 <strcmp>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d109      	bne.n	8004f98 <task4+0x108>
 8004f84:	4b08      	ldr	r3, [pc, #32]	; (8004fa8 <task4+0x118>)
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d105      	bne.n	8004f98 <task4+0x108>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, RESET);
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004f92:	4808      	ldr	r0, [pc, #32]	; (8004fb4 <task4+0x124>)
 8004f94:	f7fb fde8 	bl	8000b68 <HAL_GPIO_WritePin>
		}

		vTaskDelayUntil(&tick, 1300 * configTICK_RATE_HZ / 1000);
 8004f98:	f107 0308 	add.w	r3, r7, #8
 8004f9c:	f240 5114 	movw	r1, #1300	; 0x514
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f7fd ffbf 	bl	8002f24 <vTaskDelayUntil>
		vTaskSuspend(NULL);
 8004fa6:	e777      	b.n	8004e98 <task4+0x8>
 8004fa8:	20004738 	.word	0x20004738
 8004fac:	08007f00 	.word	0x08007f00
 8004fb0:	2000473c 	.word	0x2000473c
 8004fb4:	40020000 	.word	0x40020000
 8004fb8:	08007f04 	.word	0x08007f04
 8004fbc:	10624dd3 	.word	0x10624dd3

08004fc0 <task5>:
	}

}
void task5(void *p)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
	TickType_t tick;
	while(1)
	{vTaskSuspend(NULL);
 8004fc8:	2000      	movs	r0, #0
 8004fca:	f7fe f825 	bl	8003018 <vTaskSuspend>

		if(info.relay_no ==1 && strcmp(info.status,"ON")==0)
 8004fce:	4b63      	ldr	r3, [pc, #396]	; (800515c <task5+0x19c>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d174      	bne.n	80050c0 <task5+0x100>
 8004fd6:	4962      	ldr	r1, [pc, #392]	; (8005160 <task5+0x1a0>)
 8004fd8:	4862      	ldr	r0, [pc, #392]	; (8005164 <task5+0x1a4>)
 8004fda:	f7fb f919 	bl	8000210 <strcmp>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d16d      	bne.n	80050c0 <task5+0x100>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	2120      	movs	r1, #32
 8004fe8:	485f      	ldr	r0, [pc, #380]	; (8005168 <task5+0x1a8>)
 8004fea:	f7fb fdbd 	bl	8000b68 <HAL_GPIO_WritePin>
			tick = xTaskGetTickCount();
 8004fee:	f7fe fa53 	bl	8003498 <xTaskGetTickCount>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	60fb      	str	r3, [r7, #12]
			while(xTaskGetTickCount()-tick < info.tim * configTICK_RATE_HZ/1000)
 8004ff6:	e048      	b.n	800508a <task5+0xca>
			{
				if(info.relay_no == 1 && strcmp(info.status,"OFF")==0 && info.tim != 0)
 8004ff8:	4b58      	ldr	r3, [pc, #352]	; (800515c <task5+0x19c>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d12d      	bne.n	800505c <task5+0x9c>
 8005000:	495a      	ldr	r1, [pc, #360]	; (800516c <task5+0x1ac>)
 8005002:	4858      	ldr	r0, [pc, #352]	; (8005164 <task5+0x1a4>)
 8005004:	f7fb f904 	bl	8000210 <strcmp>
 8005008:	4603      	mov	r3, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d126      	bne.n	800505c <task5+0x9c>
 800500e:	4b53      	ldr	r3, [pc, #332]	; (800515c <task5+0x19c>)
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d022      	beq.n	800505c <task5+0x9c>
				{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 8005016:	2200      	movs	r2, #0
 8005018:	2120      	movs	r1, #32
 800501a:	4853      	ldr	r0, [pc, #332]	; (8005168 <task5+0x1a8>)
 800501c:	f7fb fda4 	bl	8000b68 <HAL_GPIO_WritePin>
					tick = xTaskGetTickCount();
 8005020:	f7fe fa3a 	bl	8003498 <xTaskGetTickCount>
 8005024:	4603      	mov	r3, r0
 8005026:	60fb      	str	r3, [r7, #12]
					vTaskDelayUntil(&tick, info.tim * configTICK_RATE_HZ/1000);
 8005028:	4b4c      	ldr	r3, [pc, #304]	; (800515c <task5+0x19c>)
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	461a      	mov	r2, r3
 800502e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005032:	fb03 f302 	mul.w	r3, r3, r2
 8005036:	4a4e      	ldr	r2, [pc, #312]	; (8005170 <task5+0x1b0>)
 8005038:	fba2 2303 	umull	r2, r3, r2, r3
 800503c:	099a      	lsrs	r2, r3, #6
 800503e:	f107 030c 	add.w	r3, r7, #12
 8005042:	4611      	mov	r1, r2
 8005044:	4618      	mov	r0, r3
 8005046:	f7fd ff6d 	bl	8002f24 <vTaskDelayUntil>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 800504a:	2201      	movs	r2, #1
 800504c:	2120      	movs	r1, #32
 800504e:	4846      	ldr	r0, [pc, #280]	; (8005168 <task5+0x1a8>)
 8005050:	f7fb fd8a 	bl	8000b68 <HAL_GPIO_WritePin>
					vTaskSuspend(NULL);
 8005054:	2000      	movs	r0, #0
 8005056:	f7fd ffdf 	bl	8003018 <vTaskSuspend>
 800505a:	e016      	b.n	800508a <task5+0xca>

				}
				else if(info.relay_no ==1 && strcmp(info.status,"OFF")==0 && info.tim == 0)
 800505c:	4b3f      	ldr	r3, [pc, #252]	; (800515c <task5+0x19c>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2b01      	cmp	r3, #1
 8005062:	d112      	bne.n	800508a <task5+0xca>
 8005064:	4941      	ldr	r1, [pc, #260]	; (800516c <task5+0x1ac>)
 8005066:	483f      	ldr	r0, [pc, #252]	; (8005164 <task5+0x1a4>)
 8005068:	f7fb f8d2 	bl	8000210 <strcmp>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d10b      	bne.n	800508a <task5+0xca>
 8005072:	4b3a      	ldr	r3, [pc, #232]	; (800515c <task5+0x19c>)
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d107      	bne.n	800508a <task5+0xca>
						{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 800507a:	2200      	movs	r2, #0
 800507c:	2120      	movs	r1, #32
 800507e:	483a      	ldr	r0, [pc, #232]	; (8005168 <task5+0x1a8>)
 8005080:	f7fb fd72 	bl	8000b68 <HAL_GPIO_WritePin>
					vTaskSuspend(NULL);
 8005084:	2000      	movs	r0, #0
 8005086:	f7fd ffc7 	bl	8003018 <vTaskSuspend>
			while(xTaskGetTickCount()-tick < info.tim * configTICK_RATE_HZ/1000)
 800508a:	f7fe fa05 	bl	8003498 <xTaskGetTickCount>
 800508e:	4602      	mov	r2, r0
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	1ad2      	subs	r2, r2, r3
 8005094:	4b31      	ldr	r3, [pc, #196]	; (800515c <task5+0x19c>)
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	4619      	mov	r1, r3
 800509a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800509e:	fb03 f301 	mul.w	r3, r3, r1
 80050a2:	4933      	ldr	r1, [pc, #204]	; (8005170 <task5+0x1b0>)
 80050a4:	fba1 1303 	umull	r1, r3, r1, r3
 80050a8:	099b      	lsrs	r3, r3, #6
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d3a4      	bcc.n	8004ff8 <task5+0x38>

				}
			}
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 80050ae:	2200      	movs	r2, #0
 80050b0:	2120      	movs	r1, #32
 80050b2:	482d      	ldr	r0, [pc, #180]	; (8005168 <task5+0x1a8>)
 80050b4:	f7fb fd58 	bl	8000b68 <HAL_GPIO_WritePin>
			info.relay_no =0;
 80050b8:	4b28      	ldr	r3, [pc, #160]	; (800515c <task5+0x19c>)
 80050ba:	2200      	movs	r2, #0
 80050bc:	601a      	str	r2, [r3, #0]
 80050be:	e044      	b.n	800514a <task5+0x18a>

		}
		else if(info.relay_no ==1 && strcmp(info.status,"OFF")==0)
 80050c0:	4b26      	ldr	r3, [pc, #152]	; (800515c <task5+0x19c>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d129      	bne.n	800511c <task5+0x15c>
 80050c8:	4928      	ldr	r1, [pc, #160]	; (800516c <task5+0x1ac>)
 80050ca:	4826      	ldr	r0, [pc, #152]	; (8005164 <task5+0x1a4>)
 80050cc:	f7fb f8a0 	bl	8000210 <strcmp>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d122      	bne.n	800511c <task5+0x15c>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 80050d6:	2200      	movs	r2, #0
 80050d8:	2120      	movs	r1, #32
 80050da:	4823      	ldr	r0, [pc, #140]	; (8005168 <task5+0x1a8>)
 80050dc:	f7fb fd44 	bl	8000b68 <HAL_GPIO_WritePin>
			tick = xTaskGetTickCount();
 80050e0:	f7fe f9da 	bl	8003498 <xTaskGetTickCount>
 80050e4:	4603      	mov	r3, r0
 80050e6:	60fb      	str	r3, [r7, #12]
			vTaskDelayUntil(&tick, info.tim * configTICK_RATE_HZ/1000);
 80050e8:	4b1c      	ldr	r3, [pc, #112]	; (800515c <task5+0x19c>)
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	461a      	mov	r2, r3
 80050ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80050f2:	fb03 f302 	mul.w	r3, r3, r2
 80050f6:	4a1e      	ldr	r2, [pc, #120]	; (8005170 <task5+0x1b0>)
 80050f8:	fba2 2303 	umull	r2, r3, r2, r3
 80050fc:	099a      	lsrs	r2, r3, #6
 80050fe:	f107 030c 	add.w	r3, r7, #12
 8005102:	4611      	mov	r1, r2
 8005104:	4618      	mov	r0, r3
 8005106:	f7fd ff0d 	bl	8002f24 <vTaskDelayUntil>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 800510a:	2201      	movs	r2, #1
 800510c:	2120      	movs	r1, #32
 800510e:	4816      	ldr	r0, [pc, #88]	; (8005168 <task5+0x1a8>)
 8005110:	f7fb fd2a 	bl	8000b68 <HAL_GPIO_WritePin>
			info.relay_no =0;
 8005114:	4b11      	ldr	r3, [pc, #68]	; (800515c <task5+0x19c>)
 8005116:	2200      	movs	r2, #0
 8005118:	601a      	str	r2, [r3, #0]
 800511a:	e016      	b.n	800514a <task5+0x18a>

		}
		else if(info.relay_no ==1 && strcmp(info.status,"OFF")==0 && info.tim == 0)
 800511c:	4b0f      	ldr	r3, [pc, #60]	; (800515c <task5+0x19c>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2b01      	cmp	r3, #1
 8005122:	d112      	bne.n	800514a <task5+0x18a>
 8005124:	4911      	ldr	r1, [pc, #68]	; (800516c <task5+0x1ac>)
 8005126:	480f      	ldr	r0, [pc, #60]	; (8005164 <task5+0x1a4>)
 8005128:	f7fb f872 	bl	8000210 <strcmp>
 800512c:	4603      	mov	r3, r0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d10b      	bne.n	800514a <task5+0x18a>
 8005132:	4b0a      	ldr	r3, [pc, #40]	; (800515c <task5+0x19c>)
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d107      	bne.n	800514a <task5+0x18a>
				{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 800513a:	2200      	movs	r2, #0
 800513c:	2120      	movs	r1, #32
 800513e:	480a      	ldr	r0, [pc, #40]	; (8005168 <task5+0x1a8>)
 8005140:	f7fb fd12 	bl	8000b68 <HAL_GPIO_WritePin>
			info.relay_no = 0;
 8005144:	4b05      	ldr	r3, [pc, #20]	; (800515c <task5+0x19c>)
 8005146:	2200      	movs	r2, #0
 8005148:	601a      	str	r2, [r3, #0]

		}

		vTaskDelayUntil(&tick, 1900 * configTICK_RATE_HZ/1000);
 800514a:	f107 030c 	add.w	r3, r7, #12
 800514e:	f240 716c 	movw	r1, #1900	; 0x76c
 8005152:	4618      	mov	r0, r3
 8005154:	f7fd fee6 	bl	8002f24 <vTaskDelayUntil>
	{vTaskSuspend(NULL);
 8005158:	e736      	b.n	8004fc8 <task5+0x8>
 800515a:	bf00      	nop
 800515c:	20004738 	.word	0x20004738
 8005160:	08007f00 	.word	0x08007f00
 8005164:	2000473c 	.word	0x2000473c
 8005168:	40020000 	.word	0x40020000
 800516c:	08007f04 	.word	0x08007f04
 8005170:	10624dd3 	.word	0x10624dd3

08005174 <task6>:
	}
}
void task6(void *p)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
	TickType_t tick;
	while(1)
	{vTaskSuspend(NULL);
 800517c:	2000      	movs	r0, #0
 800517e:	f7fd ff4b 	bl	8003018 <vTaskSuspend>

		if(info.relay_no ==1 && strcmp(info.status,"ON")==0)
 8005182:	4b63      	ldr	r3, [pc, #396]	; (8005310 <task6+0x19c>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2b01      	cmp	r3, #1
 8005188:	d174      	bne.n	8005274 <task6+0x100>
 800518a:	4962      	ldr	r1, [pc, #392]	; (8005314 <task6+0x1a0>)
 800518c:	4862      	ldr	r0, [pc, #392]	; (8005318 <task6+0x1a4>)
 800518e:	f7fb f83f 	bl	8000210 <strcmp>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d16d      	bne.n	8005274 <task6+0x100>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8005198:	2201      	movs	r2, #1
 800519a:	2120      	movs	r1, #32
 800519c:	485f      	ldr	r0, [pc, #380]	; (800531c <task6+0x1a8>)
 800519e:	f7fb fce3 	bl	8000b68 <HAL_GPIO_WritePin>
			tick = xTaskGetTickCount();
 80051a2:	f7fe f979 	bl	8003498 <xTaskGetTickCount>
 80051a6:	4603      	mov	r3, r0
 80051a8:	60fb      	str	r3, [r7, #12]
			while(xTaskGetTickCount()-tick < info.tim * configTICK_RATE_HZ/1000)
 80051aa:	e048      	b.n	800523e <task6+0xca>
			{
				if(info.relay_no == 1 && strcmp(info.status,"OFF")==0 && info.tim != 0)
 80051ac:	4b58      	ldr	r3, [pc, #352]	; (8005310 <task6+0x19c>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d12d      	bne.n	8005210 <task6+0x9c>
 80051b4:	495a      	ldr	r1, [pc, #360]	; (8005320 <task6+0x1ac>)
 80051b6:	4858      	ldr	r0, [pc, #352]	; (8005318 <task6+0x1a4>)
 80051b8:	f7fb f82a 	bl	8000210 <strcmp>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d126      	bne.n	8005210 <task6+0x9c>
 80051c2:	4b53      	ldr	r3, [pc, #332]	; (8005310 <task6+0x19c>)
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d022      	beq.n	8005210 <task6+0x9c>
				{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 80051ca:	2200      	movs	r2, #0
 80051cc:	2120      	movs	r1, #32
 80051ce:	4853      	ldr	r0, [pc, #332]	; (800531c <task6+0x1a8>)
 80051d0:	f7fb fcca 	bl	8000b68 <HAL_GPIO_WritePin>
					tick = xTaskGetTickCount();
 80051d4:	f7fe f960 	bl	8003498 <xTaskGetTickCount>
 80051d8:	4603      	mov	r3, r0
 80051da:	60fb      	str	r3, [r7, #12]
					vTaskDelayUntil(&tick, info.tim * configTICK_RATE_HZ/1000);
 80051dc:	4b4c      	ldr	r3, [pc, #304]	; (8005310 <task6+0x19c>)
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	461a      	mov	r2, r3
 80051e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80051e6:	fb03 f302 	mul.w	r3, r3, r2
 80051ea:	4a4e      	ldr	r2, [pc, #312]	; (8005324 <task6+0x1b0>)
 80051ec:	fba2 2303 	umull	r2, r3, r2, r3
 80051f0:	099a      	lsrs	r2, r3, #6
 80051f2:	f107 030c 	add.w	r3, r7, #12
 80051f6:	4611      	mov	r1, r2
 80051f8:	4618      	mov	r0, r3
 80051fa:	f7fd fe93 	bl	8002f24 <vTaskDelayUntil>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 80051fe:	2201      	movs	r2, #1
 8005200:	2120      	movs	r1, #32
 8005202:	4846      	ldr	r0, [pc, #280]	; (800531c <task6+0x1a8>)
 8005204:	f7fb fcb0 	bl	8000b68 <HAL_GPIO_WritePin>
					vTaskSuspend(NULL);
 8005208:	2000      	movs	r0, #0
 800520a:	f7fd ff05 	bl	8003018 <vTaskSuspend>
 800520e:	e016      	b.n	800523e <task6+0xca>

				}
				else if(info.relay_no ==1 && strcmp(info.status,"OFF")==0 && info.tim == 0)
 8005210:	4b3f      	ldr	r3, [pc, #252]	; (8005310 <task6+0x19c>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2b01      	cmp	r3, #1
 8005216:	d112      	bne.n	800523e <task6+0xca>
 8005218:	4941      	ldr	r1, [pc, #260]	; (8005320 <task6+0x1ac>)
 800521a:	483f      	ldr	r0, [pc, #252]	; (8005318 <task6+0x1a4>)
 800521c:	f7fa fff8 	bl	8000210 <strcmp>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d10b      	bne.n	800523e <task6+0xca>
 8005226:	4b3a      	ldr	r3, [pc, #232]	; (8005310 <task6+0x19c>)
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d107      	bne.n	800523e <task6+0xca>
						{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 800522e:	2200      	movs	r2, #0
 8005230:	2120      	movs	r1, #32
 8005232:	483a      	ldr	r0, [pc, #232]	; (800531c <task6+0x1a8>)
 8005234:	f7fb fc98 	bl	8000b68 <HAL_GPIO_WritePin>
					vTaskSuspend(NULL);
 8005238:	2000      	movs	r0, #0
 800523a:	f7fd feed 	bl	8003018 <vTaskSuspend>
			while(xTaskGetTickCount()-tick < info.tim * configTICK_RATE_HZ/1000)
 800523e:	f7fe f92b 	bl	8003498 <xTaskGetTickCount>
 8005242:	4602      	mov	r2, r0
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	1ad2      	subs	r2, r2, r3
 8005248:	4b31      	ldr	r3, [pc, #196]	; (8005310 <task6+0x19c>)
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	4619      	mov	r1, r3
 800524e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005252:	fb03 f301 	mul.w	r3, r3, r1
 8005256:	4933      	ldr	r1, [pc, #204]	; (8005324 <task6+0x1b0>)
 8005258:	fba1 1303 	umull	r1, r3, r1, r3
 800525c:	099b      	lsrs	r3, r3, #6
 800525e:	429a      	cmp	r2, r3
 8005260:	d3a4      	bcc.n	80051ac <task6+0x38>

				}
			}
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 8005262:	2200      	movs	r2, #0
 8005264:	2120      	movs	r1, #32
 8005266:	482d      	ldr	r0, [pc, #180]	; (800531c <task6+0x1a8>)
 8005268:	f7fb fc7e 	bl	8000b68 <HAL_GPIO_WritePin>
			info.relay_no =0;
 800526c:	4b28      	ldr	r3, [pc, #160]	; (8005310 <task6+0x19c>)
 800526e:	2200      	movs	r2, #0
 8005270:	601a      	str	r2, [r3, #0]
 8005272:	e044      	b.n	80052fe <task6+0x18a>

		}
		else if(info.relay_no ==1 && strcmp(info.status,"OFF")==0)
 8005274:	4b26      	ldr	r3, [pc, #152]	; (8005310 <task6+0x19c>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2b01      	cmp	r3, #1
 800527a:	d129      	bne.n	80052d0 <task6+0x15c>
 800527c:	4928      	ldr	r1, [pc, #160]	; (8005320 <task6+0x1ac>)
 800527e:	4826      	ldr	r0, [pc, #152]	; (8005318 <task6+0x1a4>)
 8005280:	f7fa ffc6 	bl	8000210 <strcmp>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d122      	bne.n	80052d0 <task6+0x15c>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 800528a:	2200      	movs	r2, #0
 800528c:	2120      	movs	r1, #32
 800528e:	4823      	ldr	r0, [pc, #140]	; (800531c <task6+0x1a8>)
 8005290:	f7fb fc6a 	bl	8000b68 <HAL_GPIO_WritePin>
			tick = xTaskGetTickCount();
 8005294:	f7fe f900 	bl	8003498 <xTaskGetTickCount>
 8005298:	4603      	mov	r3, r0
 800529a:	60fb      	str	r3, [r7, #12]
			vTaskDelayUntil(&tick, info.tim * configTICK_RATE_HZ/1000);
 800529c:	4b1c      	ldr	r3, [pc, #112]	; (8005310 <task6+0x19c>)
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	461a      	mov	r2, r3
 80052a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80052a6:	fb03 f302 	mul.w	r3, r3, r2
 80052aa:	4a1e      	ldr	r2, [pc, #120]	; (8005324 <task6+0x1b0>)
 80052ac:	fba2 2303 	umull	r2, r3, r2, r3
 80052b0:	099a      	lsrs	r2, r3, #6
 80052b2:	f107 030c 	add.w	r3, r7, #12
 80052b6:	4611      	mov	r1, r2
 80052b8:	4618      	mov	r0, r3
 80052ba:	f7fd fe33 	bl	8002f24 <vTaskDelayUntil>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 80052be:	2201      	movs	r2, #1
 80052c0:	2120      	movs	r1, #32
 80052c2:	4816      	ldr	r0, [pc, #88]	; (800531c <task6+0x1a8>)
 80052c4:	f7fb fc50 	bl	8000b68 <HAL_GPIO_WritePin>
			info.relay_no =0;
 80052c8:	4b11      	ldr	r3, [pc, #68]	; (8005310 <task6+0x19c>)
 80052ca:	2200      	movs	r2, #0
 80052cc:	601a      	str	r2, [r3, #0]
 80052ce:	e016      	b.n	80052fe <task6+0x18a>

		}
		else if(info.relay_no ==1 && strcmp(info.status,"OFF")==0 && info.tim == 0)
 80052d0:	4b0f      	ldr	r3, [pc, #60]	; (8005310 <task6+0x19c>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d112      	bne.n	80052fe <task6+0x18a>
 80052d8:	4911      	ldr	r1, [pc, #68]	; (8005320 <task6+0x1ac>)
 80052da:	480f      	ldr	r0, [pc, #60]	; (8005318 <task6+0x1a4>)
 80052dc:	f7fa ff98 	bl	8000210 <strcmp>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d10b      	bne.n	80052fe <task6+0x18a>
 80052e6:	4b0a      	ldr	r3, [pc, #40]	; (8005310 <task6+0x19c>)
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d107      	bne.n	80052fe <task6+0x18a>
				{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 80052ee:	2200      	movs	r2, #0
 80052f0:	2120      	movs	r1, #32
 80052f2:	480a      	ldr	r0, [pc, #40]	; (800531c <task6+0x1a8>)
 80052f4:	f7fb fc38 	bl	8000b68 <HAL_GPIO_WritePin>
			info.relay_no = 0;
 80052f8:	4b05      	ldr	r3, [pc, #20]	; (8005310 <task6+0x19c>)
 80052fa:	2200      	movs	r2, #0
 80052fc:	601a      	str	r2, [r3, #0]

		}

		vTaskDelayUntil(&tick, 2800 * configTICK_RATE_HZ/1000);
 80052fe:	f107 030c 	add.w	r3, r7, #12
 8005302:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
 8005306:	4618      	mov	r0, r3
 8005308:	f7fd fe0c 	bl	8002f24 <vTaskDelayUntil>
	{vTaskSuspend(NULL);
 800530c:	e736      	b.n	800517c <task6+0x8>
 800530e:	bf00      	nop
 8005310:	20004738 	.word	0x20004738
 8005314:	08007f00 	.word	0x08007f00
 8005318:	2000473c 	.word	0x2000473c
 800531c:	40020000 	.word	0x40020000
 8005320:	08007f04 	.word	0x08007f04
 8005324:	10624dd3 	.word	0x10624dd3

08005328 <task7>:
	}
}
void task7(void *p)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
	TickType_t tick;
	while(1)
	{vTaskSuspend(NULL);
 8005330:	2000      	movs	r0, #0
 8005332:	f7fd fe71 	bl	8003018 <vTaskSuspend>

		if(info.relay_no ==1 && strcmp(info.status,"ON")==0)
 8005336:	4b63      	ldr	r3, [pc, #396]	; (80054c4 <task7+0x19c>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2b01      	cmp	r3, #1
 800533c:	d174      	bne.n	8005428 <task7+0x100>
 800533e:	4962      	ldr	r1, [pc, #392]	; (80054c8 <task7+0x1a0>)
 8005340:	4862      	ldr	r0, [pc, #392]	; (80054cc <task7+0x1a4>)
 8005342:	f7fa ff65 	bl	8000210 <strcmp>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d16d      	bne.n	8005428 <task7+0x100>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 800534c:	2201      	movs	r2, #1
 800534e:	2120      	movs	r1, #32
 8005350:	485f      	ldr	r0, [pc, #380]	; (80054d0 <task7+0x1a8>)
 8005352:	f7fb fc09 	bl	8000b68 <HAL_GPIO_WritePin>
			tick = xTaskGetTickCount();
 8005356:	f7fe f89f 	bl	8003498 <xTaskGetTickCount>
 800535a:	4603      	mov	r3, r0
 800535c:	60fb      	str	r3, [r7, #12]
			while(xTaskGetTickCount()-tick < info.tim * configTICK_RATE_HZ/1000)
 800535e:	e048      	b.n	80053f2 <task7+0xca>
			{
				if(info.relay_no == 1 && strcmp(info.status,"OFF")==0 && info.tim != 0)
 8005360:	4b58      	ldr	r3, [pc, #352]	; (80054c4 <task7+0x19c>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	2b01      	cmp	r3, #1
 8005366:	d12d      	bne.n	80053c4 <task7+0x9c>
 8005368:	495a      	ldr	r1, [pc, #360]	; (80054d4 <task7+0x1ac>)
 800536a:	4858      	ldr	r0, [pc, #352]	; (80054cc <task7+0x1a4>)
 800536c:	f7fa ff50 	bl	8000210 <strcmp>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d126      	bne.n	80053c4 <task7+0x9c>
 8005376:	4b53      	ldr	r3, [pc, #332]	; (80054c4 <task7+0x19c>)
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d022      	beq.n	80053c4 <task7+0x9c>
				{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 800537e:	2200      	movs	r2, #0
 8005380:	2120      	movs	r1, #32
 8005382:	4853      	ldr	r0, [pc, #332]	; (80054d0 <task7+0x1a8>)
 8005384:	f7fb fbf0 	bl	8000b68 <HAL_GPIO_WritePin>
					tick = xTaskGetTickCount();
 8005388:	f7fe f886 	bl	8003498 <xTaskGetTickCount>
 800538c:	4603      	mov	r3, r0
 800538e:	60fb      	str	r3, [r7, #12]
					vTaskDelayUntil(&tick, info.tim * configTICK_RATE_HZ/1000);
 8005390:	4b4c      	ldr	r3, [pc, #304]	; (80054c4 <task7+0x19c>)
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	461a      	mov	r2, r3
 8005396:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800539a:	fb03 f302 	mul.w	r3, r3, r2
 800539e:	4a4e      	ldr	r2, [pc, #312]	; (80054d8 <task7+0x1b0>)
 80053a0:	fba2 2303 	umull	r2, r3, r2, r3
 80053a4:	099a      	lsrs	r2, r3, #6
 80053a6:	f107 030c 	add.w	r3, r7, #12
 80053aa:	4611      	mov	r1, r2
 80053ac:	4618      	mov	r0, r3
 80053ae:	f7fd fdb9 	bl	8002f24 <vTaskDelayUntil>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 80053b2:	2201      	movs	r2, #1
 80053b4:	2120      	movs	r1, #32
 80053b6:	4846      	ldr	r0, [pc, #280]	; (80054d0 <task7+0x1a8>)
 80053b8:	f7fb fbd6 	bl	8000b68 <HAL_GPIO_WritePin>
					vTaskSuspend(NULL);
 80053bc:	2000      	movs	r0, #0
 80053be:	f7fd fe2b 	bl	8003018 <vTaskSuspend>
 80053c2:	e016      	b.n	80053f2 <task7+0xca>

				}
				else if(info.relay_no ==1 && strcmp(info.status,"OFF")==0 && info.tim == 0)
 80053c4:	4b3f      	ldr	r3, [pc, #252]	; (80054c4 <task7+0x19c>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d112      	bne.n	80053f2 <task7+0xca>
 80053cc:	4941      	ldr	r1, [pc, #260]	; (80054d4 <task7+0x1ac>)
 80053ce:	483f      	ldr	r0, [pc, #252]	; (80054cc <task7+0x1a4>)
 80053d0:	f7fa ff1e 	bl	8000210 <strcmp>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d10b      	bne.n	80053f2 <task7+0xca>
 80053da:	4b3a      	ldr	r3, [pc, #232]	; (80054c4 <task7+0x19c>)
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d107      	bne.n	80053f2 <task7+0xca>
						{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 80053e2:	2200      	movs	r2, #0
 80053e4:	2120      	movs	r1, #32
 80053e6:	483a      	ldr	r0, [pc, #232]	; (80054d0 <task7+0x1a8>)
 80053e8:	f7fb fbbe 	bl	8000b68 <HAL_GPIO_WritePin>
					vTaskSuspend(NULL);
 80053ec:	2000      	movs	r0, #0
 80053ee:	f7fd fe13 	bl	8003018 <vTaskSuspend>
			while(xTaskGetTickCount()-tick < info.tim * configTICK_RATE_HZ/1000)
 80053f2:	f7fe f851 	bl	8003498 <xTaskGetTickCount>
 80053f6:	4602      	mov	r2, r0
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	1ad2      	subs	r2, r2, r3
 80053fc:	4b31      	ldr	r3, [pc, #196]	; (80054c4 <task7+0x19c>)
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	4619      	mov	r1, r3
 8005402:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005406:	fb03 f301 	mul.w	r3, r3, r1
 800540a:	4933      	ldr	r1, [pc, #204]	; (80054d8 <task7+0x1b0>)
 800540c:	fba1 1303 	umull	r1, r3, r1, r3
 8005410:	099b      	lsrs	r3, r3, #6
 8005412:	429a      	cmp	r2, r3
 8005414:	d3a4      	bcc.n	8005360 <task7+0x38>

				}
			}
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 8005416:	2200      	movs	r2, #0
 8005418:	2120      	movs	r1, #32
 800541a:	482d      	ldr	r0, [pc, #180]	; (80054d0 <task7+0x1a8>)
 800541c:	f7fb fba4 	bl	8000b68 <HAL_GPIO_WritePin>
			info.relay_no =0;
 8005420:	4b28      	ldr	r3, [pc, #160]	; (80054c4 <task7+0x19c>)
 8005422:	2200      	movs	r2, #0
 8005424:	601a      	str	r2, [r3, #0]
 8005426:	e044      	b.n	80054b2 <task7+0x18a>

		}
		else if(info.relay_no ==1 && strcmp(info.status,"OFF")==0)
 8005428:	4b26      	ldr	r3, [pc, #152]	; (80054c4 <task7+0x19c>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2b01      	cmp	r3, #1
 800542e:	d129      	bne.n	8005484 <task7+0x15c>
 8005430:	4928      	ldr	r1, [pc, #160]	; (80054d4 <task7+0x1ac>)
 8005432:	4826      	ldr	r0, [pc, #152]	; (80054cc <task7+0x1a4>)
 8005434:	f7fa feec 	bl	8000210 <strcmp>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d122      	bne.n	8005484 <task7+0x15c>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 800543e:	2200      	movs	r2, #0
 8005440:	2120      	movs	r1, #32
 8005442:	4823      	ldr	r0, [pc, #140]	; (80054d0 <task7+0x1a8>)
 8005444:	f7fb fb90 	bl	8000b68 <HAL_GPIO_WritePin>
			tick = xTaskGetTickCount();
 8005448:	f7fe f826 	bl	8003498 <xTaskGetTickCount>
 800544c:	4603      	mov	r3, r0
 800544e:	60fb      	str	r3, [r7, #12]
			vTaskDelayUntil(&tick, info.tim * configTICK_RATE_HZ/1000);
 8005450:	4b1c      	ldr	r3, [pc, #112]	; (80054c4 <task7+0x19c>)
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	461a      	mov	r2, r3
 8005456:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800545a:	fb03 f302 	mul.w	r3, r3, r2
 800545e:	4a1e      	ldr	r2, [pc, #120]	; (80054d8 <task7+0x1b0>)
 8005460:	fba2 2303 	umull	r2, r3, r2, r3
 8005464:	099a      	lsrs	r2, r3, #6
 8005466:	f107 030c 	add.w	r3, r7, #12
 800546a:	4611      	mov	r1, r2
 800546c:	4618      	mov	r0, r3
 800546e:	f7fd fd59 	bl	8002f24 <vTaskDelayUntil>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8005472:	2201      	movs	r2, #1
 8005474:	2120      	movs	r1, #32
 8005476:	4816      	ldr	r0, [pc, #88]	; (80054d0 <task7+0x1a8>)
 8005478:	f7fb fb76 	bl	8000b68 <HAL_GPIO_WritePin>
			info.relay_no =0;
 800547c:	4b11      	ldr	r3, [pc, #68]	; (80054c4 <task7+0x19c>)
 800547e:	2200      	movs	r2, #0
 8005480:	601a      	str	r2, [r3, #0]
 8005482:	e016      	b.n	80054b2 <task7+0x18a>

		}
		else if(info.relay_no ==1 && strcmp(info.status,"OFF")==0 && info.tim == 0)
 8005484:	4b0f      	ldr	r3, [pc, #60]	; (80054c4 <task7+0x19c>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2b01      	cmp	r3, #1
 800548a:	d112      	bne.n	80054b2 <task7+0x18a>
 800548c:	4911      	ldr	r1, [pc, #68]	; (80054d4 <task7+0x1ac>)
 800548e:	480f      	ldr	r0, [pc, #60]	; (80054cc <task7+0x1a4>)
 8005490:	f7fa febe 	bl	8000210 <strcmp>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d10b      	bne.n	80054b2 <task7+0x18a>
 800549a:	4b0a      	ldr	r3, [pc, #40]	; (80054c4 <task7+0x19c>)
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d107      	bne.n	80054b2 <task7+0x18a>
				{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 80054a2:	2200      	movs	r2, #0
 80054a4:	2120      	movs	r1, #32
 80054a6:	480a      	ldr	r0, [pc, #40]	; (80054d0 <task7+0x1a8>)
 80054a8:	f7fb fb5e 	bl	8000b68 <HAL_GPIO_WritePin>
			info.relay_no = 0;
 80054ac:	4b05      	ldr	r3, [pc, #20]	; (80054c4 <task7+0x19c>)
 80054ae:	2200      	movs	r2, #0
 80054b0:	601a      	str	r2, [r3, #0]

		}

		vTaskDelayUntil(&tick, 1100 * configTICK_RATE_HZ/1000);
 80054b2:	f107 030c 	add.w	r3, r7, #12
 80054b6:	f240 414c 	movw	r1, #1100	; 0x44c
 80054ba:	4618      	mov	r0, r3
 80054bc:	f7fd fd32 	bl	8002f24 <vTaskDelayUntil>
	{vTaskSuspend(NULL);
 80054c0:	e736      	b.n	8005330 <task7+0x8>
 80054c2:	bf00      	nop
 80054c4:	20004738 	.word	0x20004738
 80054c8:	08007f00 	.word	0x08007f00
 80054cc:	2000473c 	.word	0x2000473c
 80054d0:	40020000 	.word	0x40020000
 80054d4:	08007f04 	.word	0x08007f04
 80054d8:	10624dd3 	.word	0x10624dd3

080054dc <task8>:
	}
}
void task8(void *p)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b084      	sub	sp, #16
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
	TickType_t tick;
	while(1)
	{vTaskSuspend(NULL);
 80054e4:	2000      	movs	r0, #0
 80054e6:	f7fd fd97 	bl	8003018 <vTaskSuspend>

		if(info.relay_no ==1 && strcmp(info.status,"ON")==0)
 80054ea:	4b63      	ldr	r3, [pc, #396]	; (8005678 <task8+0x19c>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d174      	bne.n	80055dc <task8+0x100>
 80054f2:	4962      	ldr	r1, [pc, #392]	; (800567c <task8+0x1a0>)
 80054f4:	4862      	ldr	r0, [pc, #392]	; (8005680 <task8+0x1a4>)
 80054f6:	f7fa fe8b 	bl	8000210 <strcmp>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d16d      	bne.n	80055dc <task8+0x100>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8005500:	2201      	movs	r2, #1
 8005502:	2120      	movs	r1, #32
 8005504:	485f      	ldr	r0, [pc, #380]	; (8005684 <task8+0x1a8>)
 8005506:	f7fb fb2f 	bl	8000b68 <HAL_GPIO_WritePin>
			tick = xTaskGetTickCount();
 800550a:	f7fd ffc5 	bl	8003498 <xTaskGetTickCount>
 800550e:	4603      	mov	r3, r0
 8005510:	60fb      	str	r3, [r7, #12]
			while(xTaskGetTickCount()-tick < info.tim * configTICK_RATE_HZ/1000)
 8005512:	e048      	b.n	80055a6 <task8+0xca>
			{
				if(info.relay_no == 1 && strcmp(info.status,"OFF")==0 && info.tim != 0)
 8005514:	4b58      	ldr	r3, [pc, #352]	; (8005678 <task8+0x19c>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2b01      	cmp	r3, #1
 800551a:	d12d      	bne.n	8005578 <task8+0x9c>
 800551c:	495a      	ldr	r1, [pc, #360]	; (8005688 <task8+0x1ac>)
 800551e:	4858      	ldr	r0, [pc, #352]	; (8005680 <task8+0x1a4>)
 8005520:	f7fa fe76 	bl	8000210 <strcmp>
 8005524:	4603      	mov	r3, r0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d126      	bne.n	8005578 <task8+0x9c>
 800552a:	4b53      	ldr	r3, [pc, #332]	; (8005678 <task8+0x19c>)
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d022      	beq.n	8005578 <task8+0x9c>
				{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 8005532:	2200      	movs	r2, #0
 8005534:	2120      	movs	r1, #32
 8005536:	4853      	ldr	r0, [pc, #332]	; (8005684 <task8+0x1a8>)
 8005538:	f7fb fb16 	bl	8000b68 <HAL_GPIO_WritePin>
					tick = xTaskGetTickCount();
 800553c:	f7fd ffac 	bl	8003498 <xTaskGetTickCount>
 8005540:	4603      	mov	r3, r0
 8005542:	60fb      	str	r3, [r7, #12]
					vTaskDelayUntil(&tick, info.tim * configTICK_RATE_HZ/1000);
 8005544:	4b4c      	ldr	r3, [pc, #304]	; (8005678 <task8+0x19c>)
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	461a      	mov	r2, r3
 800554a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800554e:	fb03 f302 	mul.w	r3, r3, r2
 8005552:	4a4e      	ldr	r2, [pc, #312]	; (800568c <task8+0x1b0>)
 8005554:	fba2 2303 	umull	r2, r3, r2, r3
 8005558:	099a      	lsrs	r2, r3, #6
 800555a:	f107 030c 	add.w	r3, r7, #12
 800555e:	4611      	mov	r1, r2
 8005560:	4618      	mov	r0, r3
 8005562:	f7fd fcdf 	bl	8002f24 <vTaskDelayUntil>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8005566:	2201      	movs	r2, #1
 8005568:	2120      	movs	r1, #32
 800556a:	4846      	ldr	r0, [pc, #280]	; (8005684 <task8+0x1a8>)
 800556c:	f7fb fafc 	bl	8000b68 <HAL_GPIO_WritePin>
					vTaskSuspend(NULL);
 8005570:	2000      	movs	r0, #0
 8005572:	f7fd fd51 	bl	8003018 <vTaskSuspend>
 8005576:	e016      	b.n	80055a6 <task8+0xca>

				}
				else if(info.relay_no ==1 && strcmp(info.status,"OFF")==0 && info.tim == 0)
 8005578:	4b3f      	ldr	r3, [pc, #252]	; (8005678 <task8+0x19c>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2b01      	cmp	r3, #1
 800557e:	d112      	bne.n	80055a6 <task8+0xca>
 8005580:	4941      	ldr	r1, [pc, #260]	; (8005688 <task8+0x1ac>)
 8005582:	483f      	ldr	r0, [pc, #252]	; (8005680 <task8+0x1a4>)
 8005584:	f7fa fe44 	bl	8000210 <strcmp>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d10b      	bne.n	80055a6 <task8+0xca>
 800558e:	4b3a      	ldr	r3, [pc, #232]	; (8005678 <task8+0x19c>)
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d107      	bne.n	80055a6 <task8+0xca>
						{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 8005596:	2200      	movs	r2, #0
 8005598:	2120      	movs	r1, #32
 800559a:	483a      	ldr	r0, [pc, #232]	; (8005684 <task8+0x1a8>)
 800559c:	f7fb fae4 	bl	8000b68 <HAL_GPIO_WritePin>
					vTaskSuspend(NULL);
 80055a0:	2000      	movs	r0, #0
 80055a2:	f7fd fd39 	bl	8003018 <vTaskSuspend>
			while(xTaskGetTickCount()-tick < info.tim * configTICK_RATE_HZ/1000)
 80055a6:	f7fd ff77 	bl	8003498 <xTaskGetTickCount>
 80055aa:	4602      	mov	r2, r0
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	1ad2      	subs	r2, r2, r3
 80055b0:	4b31      	ldr	r3, [pc, #196]	; (8005678 <task8+0x19c>)
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	4619      	mov	r1, r3
 80055b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80055ba:	fb03 f301 	mul.w	r3, r3, r1
 80055be:	4933      	ldr	r1, [pc, #204]	; (800568c <task8+0x1b0>)
 80055c0:	fba1 1303 	umull	r1, r3, r1, r3
 80055c4:	099b      	lsrs	r3, r3, #6
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d3a4      	bcc.n	8005514 <task8+0x38>

				}
			}
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 80055ca:	2200      	movs	r2, #0
 80055cc:	2120      	movs	r1, #32
 80055ce:	482d      	ldr	r0, [pc, #180]	; (8005684 <task8+0x1a8>)
 80055d0:	f7fb faca 	bl	8000b68 <HAL_GPIO_WritePin>
			info.relay_no =0;
 80055d4:	4b28      	ldr	r3, [pc, #160]	; (8005678 <task8+0x19c>)
 80055d6:	2200      	movs	r2, #0
 80055d8:	601a      	str	r2, [r3, #0]
 80055da:	e044      	b.n	8005666 <task8+0x18a>

		}
		else if(info.relay_no ==1 && strcmp(info.status,"OFF")==0)
 80055dc:	4b26      	ldr	r3, [pc, #152]	; (8005678 <task8+0x19c>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d129      	bne.n	8005638 <task8+0x15c>
 80055e4:	4928      	ldr	r1, [pc, #160]	; (8005688 <task8+0x1ac>)
 80055e6:	4826      	ldr	r0, [pc, #152]	; (8005680 <task8+0x1a4>)
 80055e8:	f7fa fe12 	bl	8000210 <strcmp>
 80055ec:	4603      	mov	r3, r0
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d122      	bne.n	8005638 <task8+0x15c>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 80055f2:	2200      	movs	r2, #0
 80055f4:	2120      	movs	r1, #32
 80055f6:	4823      	ldr	r0, [pc, #140]	; (8005684 <task8+0x1a8>)
 80055f8:	f7fb fab6 	bl	8000b68 <HAL_GPIO_WritePin>
			tick = xTaskGetTickCount();
 80055fc:	f7fd ff4c 	bl	8003498 <xTaskGetTickCount>
 8005600:	4603      	mov	r3, r0
 8005602:	60fb      	str	r3, [r7, #12]
			vTaskDelayUntil(&tick, info.tim * configTICK_RATE_HZ/1000);
 8005604:	4b1c      	ldr	r3, [pc, #112]	; (8005678 <task8+0x19c>)
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	461a      	mov	r2, r3
 800560a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800560e:	fb03 f302 	mul.w	r3, r3, r2
 8005612:	4a1e      	ldr	r2, [pc, #120]	; (800568c <task8+0x1b0>)
 8005614:	fba2 2303 	umull	r2, r3, r2, r3
 8005618:	099a      	lsrs	r2, r3, #6
 800561a:	f107 030c 	add.w	r3, r7, #12
 800561e:	4611      	mov	r1, r2
 8005620:	4618      	mov	r0, r3
 8005622:	f7fd fc7f 	bl	8002f24 <vTaskDelayUntil>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8005626:	2201      	movs	r2, #1
 8005628:	2120      	movs	r1, #32
 800562a:	4816      	ldr	r0, [pc, #88]	; (8005684 <task8+0x1a8>)
 800562c:	f7fb fa9c 	bl	8000b68 <HAL_GPIO_WritePin>
			info.relay_no =0;
 8005630:	4b11      	ldr	r3, [pc, #68]	; (8005678 <task8+0x19c>)
 8005632:	2200      	movs	r2, #0
 8005634:	601a      	str	r2, [r3, #0]
 8005636:	e016      	b.n	8005666 <task8+0x18a>

		}
		else if(info.relay_no ==1 && strcmp(info.status,"OFF")==0 && info.tim == 0)
 8005638:	4b0f      	ldr	r3, [pc, #60]	; (8005678 <task8+0x19c>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2b01      	cmp	r3, #1
 800563e:	d112      	bne.n	8005666 <task8+0x18a>
 8005640:	4911      	ldr	r1, [pc, #68]	; (8005688 <task8+0x1ac>)
 8005642:	480f      	ldr	r0, [pc, #60]	; (8005680 <task8+0x1a4>)
 8005644:	f7fa fde4 	bl	8000210 <strcmp>
 8005648:	4603      	mov	r3, r0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d10b      	bne.n	8005666 <task8+0x18a>
 800564e:	4b0a      	ldr	r3, [pc, #40]	; (8005678 <task8+0x19c>)
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d107      	bne.n	8005666 <task8+0x18a>
				{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 8005656:	2200      	movs	r2, #0
 8005658:	2120      	movs	r1, #32
 800565a:	480a      	ldr	r0, [pc, #40]	; (8005684 <task8+0x1a8>)
 800565c:	f7fb fa84 	bl	8000b68 <HAL_GPIO_WritePin>
			info.relay_no = 0;
 8005660:	4b05      	ldr	r3, [pc, #20]	; (8005678 <task8+0x19c>)
 8005662:	2200      	movs	r2, #0
 8005664:	601a      	str	r2, [r3, #0]

		}

		vTaskDelayUntil(&tick, 2800 * configTICK_RATE_HZ/1000);
 8005666:	f107 030c 	add.w	r3, r7, #12
 800566a:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
 800566e:	4618      	mov	r0, r3
 8005670:	f7fd fc58 	bl	8002f24 <vTaskDelayUntil>
	{vTaskSuspend(NULL);
 8005674:	e736      	b.n	80054e4 <task8+0x8>
 8005676:	bf00      	nop
 8005678:	20004738 	.word	0x20004738
 800567c:	08007f00 	.word	0x08007f00
 8005680:	2000473c 	.word	0x2000473c
 8005684:	40020000 	.word	0x40020000
 8005688:	08007f04 	.word	0x08007f04
 800568c:	10624dd3 	.word	0x10624dd3

08005690 <task9>:
	}
}
void task9(void *p)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b084      	sub	sp, #16
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
	TickType_t tick;
	while(1)
	{vTaskSuspend(NULL);
 8005698:	2000      	movs	r0, #0
 800569a:	f7fd fcbd 	bl	8003018 <vTaskSuspend>

		if(info.relay_no ==1 && strcmp(info.status,"ON")==0)
 800569e:	4b63      	ldr	r3, [pc, #396]	; (800582c <task9+0x19c>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d174      	bne.n	8005790 <task9+0x100>
 80056a6:	4962      	ldr	r1, [pc, #392]	; (8005830 <task9+0x1a0>)
 80056a8:	4862      	ldr	r0, [pc, #392]	; (8005834 <task9+0x1a4>)
 80056aa:	f7fa fdb1 	bl	8000210 <strcmp>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d16d      	bne.n	8005790 <task9+0x100>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 80056b4:	2201      	movs	r2, #1
 80056b6:	2120      	movs	r1, #32
 80056b8:	485f      	ldr	r0, [pc, #380]	; (8005838 <task9+0x1a8>)
 80056ba:	f7fb fa55 	bl	8000b68 <HAL_GPIO_WritePin>
			tick = xTaskGetTickCount();
 80056be:	f7fd feeb 	bl	8003498 <xTaskGetTickCount>
 80056c2:	4603      	mov	r3, r0
 80056c4:	60fb      	str	r3, [r7, #12]
			while(xTaskGetTickCount()-tick < info.tim * configTICK_RATE_HZ/1000)
 80056c6:	e048      	b.n	800575a <task9+0xca>
			{
				if(info.relay_no == 1 && strcmp(info.status,"OFF")==0 && info.tim != 0)
 80056c8:	4b58      	ldr	r3, [pc, #352]	; (800582c <task9+0x19c>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d12d      	bne.n	800572c <task9+0x9c>
 80056d0:	495a      	ldr	r1, [pc, #360]	; (800583c <task9+0x1ac>)
 80056d2:	4858      	ldr	r0, [pc, #352]	; (8005834 <task9+0x1a4>)
 80056d4:	f7fa fd9c 	bl	8000210 <strcmp>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d126      	bne.n	800572c <task9+0x9c>
 80056de:	4b53      	ldr	r3, [pc, #332]	; (800582c <task9+0x19c>)
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d022      	beq.n	800572c <task9+0x9c>
				{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 80056e6:	2200      	movs	r2, #0
 80056e8:	2120      	movs	r1, #32
 80056ea:	4853      	ldr	r0, [pc, #332]	; (8005838 <task9+0x1a8>)
 80056ec:	f7fb fa3c 	bl	8000b68 <HAL_GPIO_WritePin>
					tick = xTaskGetTickCount();
 80056f0:	f7fd fed2 	bl	8003498 <xTaskGetTickCount>
 80056f4:	4603      	mov	r3, r0
 80056f6:	60fb      	str	r3, [r7, #12]
					vTaskDelayUntil(&tick, info.tim * configTICK_RATE_HZ/1000);
 80056f8:	4b4c      	ldr	r3, [pc, #304]	; (800582c <task9+0x19c>)
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	461a      	mov	r2, r3
 80056fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005702:	fb03 f302 	mul.w	r3, r3, r2
 8005706:	4a4e      	ldr	r2, [pc, #312]	; (8005840 <task9+0x1b0>)
 8005708:	fba2 2303 	umull	r2, r3, r2, r3
 800570c:	099a      	lsrs	r2, r3, #6
 800570e:	f107 030c 	add.w	r3, r7, #12
 8005712:	4611      	mov	r1, r2
 8005714:	4618      	mov	r0, r3
 8005716:	f7fd fc05 	bl	8002f24 <vTaskDelayUntil>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 800571a:	2201      	movs	r2, #1
 800571c:	2120      	movs	r1, #32
 800571e:	4846      	ldr	r0, [pc, #280]	; (8005838 <task9+0x1a8>)
 8005720:	f7fb fa22 	bl	8000b68 <HAL_GPIO_WritePin>
					vTaskSuspend(NULL);
 8005724:	2000      	movs	r0, #0
 8005726:	f7fd fc77 	bl	8003018 <vTaskSuspend>
 800572a:	e016      	b.n	800575a <task9+0xca>

				}
				else if(info.relay_no ==1 && strcmp(info.status,"OFF")==0 && info.tim == 0)
 800572c:	4b3f      	ldr	r3, [pc, #252]	; (800582c <task9+0x19c>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2b01      	cmp	r3, #1
 8005732:	d112      	bne.n	800575a <task9+0xca>
 8005734:	4941      	ldr	r1, [pc, #260]	; (800583c <task9+0x1ac>)
 8005736:	483f      	ldr	r0, [pc, #252]	; (8005834 <task9+0x1a4>)
 8005738:	f7fa fd6a 	bl	8000210 <strcmp>
 800573c:	4603      	mov	r3, r0
 800573e:	2b00      	cmp	r3, #0
 8005740:	d10b      	bne.n	800575a <task9+0xca>
 8005742:	4b3a      	ldr	r3, [pc, #232]	; (800582c <task9+0x19c>)
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d107      	bne.n	800575a <task9+0xca>
						{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 800574a:	2200      	movs	r2, #0
 800574c:	2120      	movs	r1, #32
 800574e:	483a      	ldr	r0, [pc, #232]	; (8005838 <task9+0x1a8>)
 8005750:	f7fb fa0a 	bl	8000b68 <HAL_GPIO_WritePin>
					vTaskSuspend(NULL);
 8005754:	2000      	movs	r0, #0
 8005756:	f7fd fc5f 	bl	8003018 <vTaskSuspend>
			while(xTaskGetTickCount()-tick < info.tim * configTICK_RATE_HZ/1000)
 800575a:	f7fd fe9d 	bl	8003498 <xTaskGetTickCount>
 800575e:	4602      	mov	r2, r0
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	1ad2      	subs	r2, r2, r3
 8005764:	4b31      	ldr	r3, [pc, #196]	; (800582c <task9+0x19c>)
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	4619      	mov	r1, r3
 800576a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800576e:	fb03 f301 	mul.w	r3, r3, r1
 8005772:	4933      	ldr	r1, [pc, #204]	; (8005840 <task9+0x1b0>)
 8005774:	fba1 1303 	umull	r1, r3, r1, r3
 8005778:	099b      	lsrs	r3, r3, #6
 800577a:	429a      	cmp	r2, r3
 800577c:	d3a4      	bcc.n	80056c8 <task9+0x38>

				}
			}
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 800577e:	2200      	movs	r2, #0
 8005780:	2120      	movs	r1, #32
 8005782:	482d      	ldr	r0, [pc, #180]	; (8005838 <task9+0x1a8>)
 8005784:	f7fb f9f0 	bl	8000b68 <HAL_GPIO_WritePin>
			info.relay_no =0;
 8005788:	4b28      	ldr	r3, [pc, #160]	; (800582c <task9+0x19c>)
 800578a:	2200      	movs	r2, #0
 800578c:	601a      	str	r2, [r3, #0]
 800578e:	e044      	b.n	800581a <task9+0x18a>

		}
		else if(info.relay_no ==1 && strcmp(info.status,"OFF")==0)
 8005790:	4b26      	ldr	r3, [pc, #152]	; (800582c <task9+0x19c>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	2b01      	cmp	r3, #1
 8005796:	d129      	bne.n	80057ec <task9+0x15c>
 8005798:	4928      	ldr	r1, [pc, #160]	; (800583c <task9+0x1ac>)
 800579a:	4826      	ldr	r0, [pc, #152]	; (8005834 <task9+0x1a4>)
 800579c:	f7fa fd38 	bl	8000210 <strcmp>
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d122      	bne.n	80057ec <task9+0x15c>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 80057a6:	2200      	movs	r2, #0
 80057a8:	2120      	movs	r1, #32
 80057aa:	4823      	ldr	r0, [pc, #140]	; (8005838 <task9+0x1a8>)
 80057ac:	f7fb f9dc 	bl	8000b68 <HAL_GPIO_WritePin>
			tick = xTaskGetTickCount();
 80057b0:	f7fd fe72 	bl	8003498 <xTaskGetTickCount>
 80057b4:	4603      	mov	r3, r0
 80057b6:	60fb      	str	r3, [r7, #12]
			vTaskDelayUntil(&tick, info.tim * configTICK_RATE_HZ/1000);
 80057b8:	4b1c      	ldr	r3, [pc, #112]	; (800582c <task9+0x19c>)
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	461a      	mov	r2, r3
 80057be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80057c2:	fb03 f302 	mul.w	r3, r3, r2
 80057c6:	4a1e      	ldr	r2, [pc, #120]	; (8005840 <task9+0x1b0>)
 80057c8:	fba2 2303 	umull	r2, r3, r2, r3
 80057cc:	099a      	lsrs	r2, r3, #6
 80057ce:	f107 030c 	add.w	r3, r7, #12
 80057d2:	4611      	mov	r1, r2
 80057d4:	4618      	mov	r0, r3
 80057d6:	f7fd fba5 	bl	8002f24 <vTaskDelayUntil>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 80057da:	2201      	movs	r2, #1
 80057dc:	2120      	movs	r1, #32
 80057de:	4816      	ldr	r0, [pc, #88]	; (8005838 <task9+0x1a8>)
 80057e0:	f7fb f9c2 	bl	8000b68 <HAL_GPIO_WritePin>
			info.relay_no =0;
 80057e4:	4b11      	ldr	r3, [pc, #68]	; (800582c <task9+0x19c>)
 80057e6:	2200      	movs	r2, #0
 80057e8:	601a      	str	r2, [r3, #0]
 80057ea:	e016      	b.n	800581a <task9+0x18a>

		}
		else if(info.relay_no ==1 && strcmp(info.status,"OFF")==0 && info.tim == 0)
 80057ec:	4b0f      	ldr	r3, [pc, #60]	; (800582c <task9+0x19c>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d112      	bne.n	800581a <task9+0x18a>
 80057f4:	4911      	ldr	r1, [pc, #68]	; (800583c <task9+0x1ac>)
 80057f6:	480f      	ldr	r0, [pc, #60]	; (8005834 <task9+0x1a4>)
 80057f8:	f7fa fd0a 	bl	8000210 <strcmp>
 80057fc:	4603      	mov	r3, r0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d10b      	bne.n	800581a <task9+0x18a>
 8005802:	4b0a      	ldr	r3, [pc, #40]	; (800582c <task9+0x19c>)
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d107      	bne.n	800581a <task9+0x18a>
				{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 800580a:	2200      	movs	r2, #0
 800580c:	2120      	movs	r1, #32
 800580e:	480a      	ldr	r0, [pc, #40]	; (8005838 <task9+0x1a8>)
 8005810:	f7fb f9aa 	bl	8000b68 <HAL_GPIO_WritePin>
			info.relay_no = 0;
 8005814:	4b05      	ldr	r3, [pc, #20]	; (800582c <task9+0x19c>)
 8005816:	2200      	movs	r2, #0
 8005818:	601a      	str	r2, [r3, #0]

		}

		vTaskDelayUntil(&tick, 2600 * configTICK_RATE_HZ/1000);
 800581a:	f107 030c 	add.w	r3, r7, #12
 800581e:	f640 2128 	movw	r1, #2600	; 0xa28
 8005822:	4618      	mov	r0, r3
 8005824:	f7fd fb7e 	bl	8002f24 <vTaskDelayUntil>
	{vTaskSuspend(NULL);
 8005828:	e736      	b.n	8005698 <task9+0x8>
 800582a:	bf00      	nop
 800582c:	20004738 	.word	0x20004738
 8005830:	08007f00 	.word	0x08007f00
 8005834:	2000473c 	.word	0x2000473c
 8005838:	40020000 	.word	0x40020000
 800583c:	08007f04 	.word	0x08007f04
 8005840:	10624dd3 	.word	0x10624dd3

08005844 <task13>:
	}
}
void task13(void *p)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
	//uint8_t b;
	TickType_t tick;
	tick = xTaskGetTickCount();
 800584c:	f7fd fe24 	bl	8003498 <xTaskGetTickCount>
 8005850:	4603      	mov	r3, r0
 8005852:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		while(Received != TRUE)
 8005854:	e004      	b.n	8005860 <task13+0x1c>
		{
			HAL_UART_Receive_IT(&huart2, &bit, 1);
 8005856:	2201      	movs	r2, #1
 8005858:	4907      	ldr	r1, [pc, #28]	; (8005878 <task13+0x34>)
 800585a:	4808      	ldr	r0, [pc, #32]	; (800587c <task13+0x38>)
 800585c:	f7fb fdfc 	bl	8001458 <HAL_UART_Receive_IT>
		while(Received != TRUE)
 8005860:	4b07      	ldr	r3, [pc, #28]	; (8005880 <task13+0x3c>)
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	2b01      	cmp	r3, #1
 8005866:	d1f6      	bne.n	8005856 <task13+0x12>
		}
		vTaskDelayUntil(&tick, 1000 * configTICK_RATE_HZ/1000);
 8005868:	f107 030c 	add.w	r3, r7, #12
 800586c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005870:	4618      	mov	r0, r3
 8005872:	f7fd fb57 	bl	8002f24 <vTaskDelayUntil>
		while(Received != TRUE)
 8005876:	e7f3      	b.n	8005860 <task13+0x1c>
 8005878:	20004758 	.word	0x20004758
 800587c:	200047b8 	.word	0x200047b8
 8005880:	200046e4 	.word	0x200046e4

08005884 <task10>:
	}
}
void task10(void *p)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
	TickType_t tick;
	while(1)
	{vTaskSuspend(NULL);
 800588c:	2000      	movs	r0, #0
 800588e:	f7fd fbc3 	bl	8003018 <vTaskSuspend>

		if(info.relay_no ==1 && strcmp(info.status,"ON")==0)
 8005892:	4b63      	ldr	r3, [pc, #396]	; (8005a20 <task10+0x19c>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	2b01      	cmp	r3, #1
 8005898:	d174      	bne.n	8005984 <task10+0x100>
 800589a:	4962      	ldr	r1, [pc, #392]	; (8005a24 <task10+0x1a0>)
 800589c:	4862      	ldr	r0, [pc, #392]	; (8005a28 <task10+0x1a4>)
 800589e:	f7fa fcb7 	bl	8000210 <strcmp>
 80058a2:	4603      	mov	r3, r0
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d16d      	bne.n	8005984 <task10+0x100>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 80058a8:	2201      	movs	r2, #1
 80058aa:	2120      	movs	r1, #32
 80058ac:	485f      	ldr	r0, [pc, #380]	; (8005a2c <task10+0x1a8>)
 80058ae:	f7fb f95b 	bl	8000b68 <HAL_GPIO_WritePin>
			tick = xTaskGetTickCount();
 80058b2:	f7fd fdf1 	bl	8003498 <xTaskGetTickCount>
 80058b6:	4603      	mov	r3, r0
 80058b8:	60fb      	str	r3, [r7, #12]
			while(xTaskGetTickCount()-tick < info.tim * configTICK_RATE_HZ/1000)
 80058ba:	e048      	b.n	800594e <task10+0xca>
			{
				if(info.relay_no == 1 && strcmp(info.status,"OFF")==0 && info.tim != 0)
 80058bc:	4b58      	ldr	r3, [pc, #352]	; (8005a20 <task10+0x19c>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d12d      	bne.n	8005920 <task10+0x9c>
 80058c4:	495a      	ldr	r1, [pc, #360]	; (8005a30 <task10+0x1ac>)
 80058c6:	4858      	ldr	r0, [pc, #352]	; (8005a28 <task10+0x1a4>)
 80058c8:	f7fa fca2 	bl	8000210 <strcmp>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d126      	bne.n	8005920 <task10+0x9c>
 80058d2:	4b53      	ldr	r3, [pc, #332]	; (8005a20 <task10+0x19c>)
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d022      	beq.n	8005920 <task10+0x9c>
				{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 80058da:	2200      	movs	r2, #0
 80058dc:	2120      	movs	r1, #32
 80058de:	4853      	ldr	r0, [pc, #332]	; (8005a2c <task10+0x1a8>)
 80058e0:	f7fb f942 	bl	8000b68 <HAL_GPIO_WritePin>
					tick = xTaskGetTickCount();
 80058e4:	f7fd fdd8 	bl	8003498 <xTaskGetTickCount>
 80058e8:	4603      	mov	r3, r0
 80058ea:	60fb      	str	r3, [r7, #12]
					vTaskDelayUntil(&tick, info.tim * configTICK_RATE_HZ/1000);
 80058ec:	4b4c      	ldr	r3, [pc, #304]	; (8005a20 <task10+0x19c>)
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	461a      	mov	r2, r3
 80058f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80058f6:	fb03 f302 	mul.w	r3, r3, r2
 80058fa:	4a4e      	ldr	r2, [pc, #312]	; (8005a34 <task10+0x1b0>)
 80058fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005900:	099a      	lsrs	r2, r3, #6
 8005902:	f107 030c 	add.w	r3, r7, #12
 8005906:	4611      	mov	r1, r2
 8005908:	4618      	mov	r0, r3
 800590a:	f7fd fb0b 	bl	8002f24 <vTaskDelayUntil>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 800590e:	2201      	movs	r2, #1
 8005910:	2120      	movs	r1, #32
 8005912:	4846      	ldr	r0, [pc, #280]	; (8005a2c <task10+0x1a8>)
 8005914:	f7fb f928 	bl	8000b68 <HAL_GPIO_WritePin>
					vTaskSuspend(NULL);
 8005918:	2000      	movs	r0, #0
 800591a:	f7fd fb7d 	bl	8003018 <vTaskSuspend>
 800591e:	e016      	b.n	800594e <task10+0xca>

				}
				else if(info.relay_no ==1 && strcmp(info.status,"OFF")==0 && info.tim == 0)
 8005920:	4b3f      	ldr	r3, [pc, #252]	; (8005a20 <task10+0x19c>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2b01      	cmp	r3, #1
 8005926:	d112      	bne.n	800594e <task10+0xca>
 8005928:	4941      	ldr	r1, [pc, #260]	; (8005a30 <task10+0x1ac>)
 800592a:	483f      	ldr	r0, [pc, #252]	; (8005a28 <task10+0x1a4>)
 800592c:	f7fa fc70 	bl	8000210 <strcmp>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d10b      	bne.n	800594e <task10+0xca>
 8005936:	4b3a      	ldr	r3, [pc, #232]	; (8005a20 <task10+0x19c>)
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d107      	bne.n	800594e <task10+0xca>
						{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 800593e:	2200      	movs	r2, #0
 8005940:	2120      	movs	r1, #32
 8005942:	483a      	ldr	r0, [pc, #232]	; (8005a2c <task10+0x1a8>)
 8005944:	f7fb f910 	bl	8000b68 <HAL_GPIO_WritePin>
					vTaskSuspend(NULL);
 8005948:	2000      	movs	r0, #0
 800594a:	f7fd fb65 	bl	8003018 <vTaskSuspend>
			while(xTaskGetTickCount()-tick < info.tim * configTICK_RATE_HZ/1000)
 800594e:	f7fd fda3 	bl	8003498 <xTaskGetTickCount>
 8005952:	4602      	mov	r2, r0
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	1ad2      	subs	r2, r2, r3
 8005958:	4b31      	ldr	r3, [pc, #196]	; (8005a20 <task10+0x19c>)
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	4619      	mov	r1, r3
 800595e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005962:	fb03 f301 	mul.w	r3, r3, r1
 8005966:	4933      	ldr	r1, [pc, #204]	; (8005a34 <task10+0x1b0>)
 8005968:	fba1 1303 	umull	r1, r3, r1, r3
 800596c:	099b      	lsrs	r3, r3, #6
 800596e:	429a      	cmp	r2, r3
 8005970:	d3a4      	bcc.n	80058bc <task10+0x38>

				}
			}
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 8005972:	2200      	movs	r2, #0
 8005974:	2120      	movs	r1, #32
 8005976:	482d      	ldr	r0, [pc, #180]	; (8005a2c <task10+0x1a8>)
 8005978:	f7fb f8f6 	bl	8000b68 <HAL_GPIO_WritePin>
			info.relay_no =0;
 800597c:	4b28      	ldr	r3, [pc, #160]	; (8005a20 <task10+0x19c>)
 800597e:	2200      	movs	r2, #0
 8005980:	601a      	str	r2, [r3, #0]
 8005982:	e044      	b.n	8005a0e <task10+0x18a>

		}
		else if(info.relay_no ==1 && strcmp(info.status,"OFF")==0)
 8005984:	4b26      	ldr	r3, [pc, #152]	; (8005a20 <task10+0x19c>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	2b01      	cmp	r3, #1
 800598a:	d129      	bne.n	80059e0 <task10+0x15c>
 800598c:	4928      	ldr	r1, [pc, #160]	; (8005a30 <task10+0x1ac>)
 800598e:	4826      	ldr	r0, [pc, #152]	; (8005a28 <task10+0x1a4>)
 8005990:	f7fa fc3e 	bl	8000210 <strcmp>
 8005994:	4603      	mov	r3, r0
 8005996:	2b00      	cmp	r3, #0
 8005998:	d122      	bne.n	80059e0 <task10+0x15c>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 800599a:	2200      	movs	r2, #0
 800599c:	2120      	movs	r1, #32
 800599e:	4823      	ldr	r0, [pc, #140]	; (8005a2c <task10+0x1a8>)
 80059a0:	f7fb f8e2 	bl	8000b68 <HAL_GPIO_WritePin>
			tick = xTaskGetTickCount();
 80059a4:	f7fd fd78 	bl	8003498 <xTaskGetTickCount>
 80059a8:	4603      	mov	r3, r0
 80059aa:	60fb      	str	r3, [r7, #12]
			vTaskDelayUntil(&tick, info.tim * configTICK_RATE_HZ/1000);
 80059ac:	4b1c      	ldr	r3, [pc, #112]	; (8005a20 <task10+0x19c>)
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	461a      	mov	r2, r3
 80059b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80059b6:	fb03 f302 	mul.w	r3, r3, r2
 80059ba:	4a1e      	ldr	r2, [pc, #120]	; (8005a34 <task10+0x1b0>)
 80059bc:	fba2 2303 	umull	r2, r3, r2, r3
 80059c0:	099a      	lsrs	r2, r3, #6
 80059c2:	f107 030c 	add.w	r3, r7, #12
 80059c6:	4611      	mov	r1, r2
 80059c8:	4618      	mov	r0, r3
 80059ca:	f7fd faab 	bl	8002f24 <vTaskDelayUntil>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 80059ce:	2201      	movs	r2, #1
 80059d0:	2120      	movs	r1, #32
 80059d2:	4816      	ldr	r0, [pc, #88]	; (8005a2c <task10+0x1a8>)
 80059d4:	f7fb f8c8 	bl	8000b68 <HAL_GPIO_WritePin>
			info.relay_no =0;
 80059d8:	4b11      	ldr	r3, [pc, #68]	; (8005a20 <task10+0x19c>)
 80059da:	2200      	movs	r2, #0
 80059dc:	601a      	str	r2, [r3, #0]
 80059de:	e016      	b.n	8005a0e <task10+0x18a>

		}
		else if(info.relay_no ==1 && strcmp(info.status,"OFF")==0 && info.tim == 0)
 80059e0:	4b0f      	ldr	r3, [pc, #60]	; (8005a20 <task10+0x19c>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d112      	bne.n	8005a0e <task10+0x18a>
 80059e8:	4911      	ldr	r1, [pc, #68]	; (8005a30 <task10+0x1ac>)
 80059ea:	480f      	ldr	r0, [pc, #60]	; (8005a28 <task10+0x1a4>)
 80059ec:	f7fa fc10 	bl	8000210 <strcmp>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d10b      	bne.n	8005a0e <task10+0x18a>
 80059f6:	4b0a      	ldr	r3, [pc, #40]	; (8005a20 <task10+0x19c>)
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d107      	bne.n	8005a0e <task10+0x18a>
				{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 80059fe:	2200      	movs	r2, #0
 8005a00:	2120      	movs	r1, #32
 8005a02:	480a      	ldr	r0, [pc, #40]	; (8005a2c <task10+0x1a8>)
 8005a04:	f7fb f8b0 	bl	8000b68 <HAL_GPIO_WritePin>
			info.relay_no = 0;
 8005a08:	4b05      	ldr	r3, [pc, #20]	; (8005a20 <task10+0x19c>)
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	601a      	str	r2, [r3, #0]

		}

		vTaskDelayUntil(&tick, 2400 * configTICK_RATE_HZ/1000);
 8005a0e:	f107 030c 	add.w	r3, r7, #12
 8005a12:	f44f 6116 	mov.w	r1, #2400	; 0x960
 8005a16:	4618      	mov	r0, r3
 8005a18:	f7fd fa84 	bl	8002f24 <vTaskDelayUntil>
	{vTaskSuspend(NULL);
 8005a1c:	e736      	b.n	800588c <task10+0x8>
 8005a1e:	bf00      	nop
 8005a20:	20004738 	.word	0x20004738
 8005a24:	08007f00 	.word	0x08007f00
 8005a28:	2000473c 	.word	0x2000473c
 8005a2c:	40020000 	.word	0x40020000
 8005a30:	08007f04 	.word	0x08007f04
 8005a34:	10624dd3 	.word	0x10624dd3

08005a38 <task11>:
	}

}
void task11(void *p)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b084      	sub	sp, #16
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
	TickType_t tick;
	while(1)
	{vTaskSuspend(NULL);
 8005a40:	2000      	movs	r0, #0
 8005a42:	f7fd fae9 	bl	8003018 <vTaskSuspend>

		if(info.relay_no ==1 && strcmp(info.status,"ON")==0)
 8005a46:	4b63      	ldr	r3, [pc, #396]	; (8005bd4 <task11+0x19c>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d174      	bne.n	8005b38 <task11+0x100>
 8005a4e:	4962      	ldr	r1, [pc, #392]	; (8005bd8 <task11+0x1a0>)
 8005a50:	4862      	ldr	r0, [pc, #392]	; (8005bdc <task11+0x1a4>)
 8005a52:	f7fa fbdd 	bl	8000210 <strcmp>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d16d      	bne.n	8005b38 <task11+0x100>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	2120      	movs	r1, #32
 8005a60:	485f      	ldr	r0, [pc, #380]	; (8005be0 <task11+0x1a8>)
 8005a62:	f7fb f881 	bl	8000b68 <HAL_GPIO_WritePin>
			tick = xTaskGetTickCount();
 8005a66:	f7fd fd17 	bl	8003498 <xTaskGetTickCount>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	60fb      	str	r3, [r7, #12]
			while(xTaskGetTickCount()-tick < info.tim * configTICK_RATE_HZ/1000)
 8005a6e:	e048      	b.n	8005b02 <task11+0xca>
			{
				if(info.relay_no == 1 && strcmp(info.status,"OFF")==0 && info.tim != 0)
 8005a70:	4b58      	ldr	r3, [pc, #352]	; (8005bd4 <task11+0x19c>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d12d      	bne.n	8005ad4 <task11+0x9c>
 8005a78:	495a      	ldr	r1, [pc, #360]	; (8005be4 <task11+0x1ac>)
 8005a7a:	4858      	ldr	r0, [pc, #352]	; (8005bdc <task11+0x1a4>)
 8005a7c:	f7fa fbc8 	bl	8000210 <strcmp>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d126      	bne.n	8005ad4 <task11+0x9c>
 8005a86:	4b53      	ldr	r3, [pc, #332]	; (8005bd4 <task11+0x19c>)
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d022      	beq.n	8005ad4 <task11+0x9c>
				{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 8005a8e:	2200      	movs	r2, #0
 8005a90:	2120      	movs	r1, #32
 8005a92:	4853      	ldr	r0, [pc, #332]	; (8005be0 <task11+0x1a8>)
 8005a94:	f7fb f868 	bl	8000b68 <HAL_GPIO_WritePin>
					tick = xTaskGetTickCount();
 8005a98:	f7fd fcfe 	bl	8003498 <xTaskGetTickCount>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	60fb      	str	r3, [r7, #12]
					vTaskDelayUntil(&tick, info.tim * configTICK_RATE_HZ/1000);
 8005aa0:	4b4c      	ldr	r3, [pc, #304]	; (8005bd4 <task11+0x19c>)
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005aaa:	fb03 f302 	mul.w	r3, r3, r2
 8005aae:	4a4e      	ldr	r2, [pc, #312]	; (8005be8 <task11+0x1b0>)
 8005ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ab4:	099a      	lsrs	r2, r3, #6
 8005ab6:	f107 030c 	add.w	r3, r7, #12
 8005aba:	4611      	mov	r1, r2
 8005abc:	4618      	mov	r0, r3
 8005abe:	f7fd fa31 	bl	8002f24 <vTaskDelayUntil>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	2120      	movs	r1, #32
 8005ac6:	4846      	ldr	r0, [pc, #280]	; (8005be0 <task11+0x1a8>)
 8005ac8:	f7fb f84e 	bl	8000b68 <HAL_GPIO_WritePin>
					vTaskSuspend(NULL);
 8005acc:	2000      	movs	r0, #0
 8005ace:	f7fd faa3 	bl	8003018 <vTaskSuspend>
 8005ad2:	e016      	b.n	8005b02 <task11+0xca>

				}
				else if(info.relay_no ==1 && strcmp(info.status,"OFF")==0 && info.tim == 0)
 8005ad4:	4b3f      	ldr	r3, [pc, #252]	; (8005bd4 <task11+0x19c>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d112      	bne.n	8005b02 <task11+0xca>
 8005adc:	4941      	ldr	r1, [pc, #260]	; (8005be4 <task11+0x1ac>)
 8005ade:	483f      	ldr	r0, [pc, #252]	; (8005bdc <task11+0x1a4>)
 8005ae0:	f7fa fb96 	bl	8000210 <strcmp>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d10b      	bne.n	8005b02 <task11+0xca>
 8005aea:	4b3a      	ldr	r3, [pc, #232]	; (8005bd4 <task11+0x19c>)
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d107      	bne.n	8005b02 <task11+0xca>
						{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 8005af2:	2200      	movs	r2, #0
 8005af4:	2120      	movs	r1, #32
 8005af6:	483a      	ldr	r0, [pc, #232]	; (8005be0 <task11+0x1a8>)
 8005af8:	f7fb f836 	bl	8000b68 <HAL_GPIO_WritePin>
					vTaskSuspend(NULL);
 8005afc:	2000      	movs	r0, #0
 8005afe:	f7fd fa8b 	bl	8003018 <vTaskSuspend>
			while(xTaskGetTickCount()-tick < info.tim * configTICK_RATE_HZ/1000)
 8005b02:	f7fd fcc9 	bl	8003498 <xTaskGetTickCount>
 8005b06:	4602      	mov	r2, r0
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	1ad2      	subs	r2, r2, r3
 8005b0c:	4b31      	ldr	r3, [pc, #196]	; (8005bd4 <task11+0x19c>)
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	4619      	mov	r1, r3
 8005b12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005b16:	fb03 f301 	mul.w	r3, r3, r1
 8005b1a:	4933      	ldr	r1, [pc, #204]	; (8005be8 <task11+0x1b0>)
 8005b1c:	fba1 1303 	umull	r1, r3, r1, r3
 8005b20:	099b      	lsrs	r3, r3, #6
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d3a4      	bcc.n	8005a70 <task11+0x38>

				}
			}
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 8005b26:	2200      	movs	r2, #0
 8005b28:	2120      	movs	r1, #32
 8005b2a:	482d      	ldr	r0, [pc, #180]	; (8005be0 <task11+0x1a8>)
 8005b2c:	f7fb f81c 	bl	8000b68 <HAL_GPIO_WritePin>
			info.relay_no =0;
 8005b30:	4b28      	ldr	r3, [pc, #160]	; (8005bd4 <task11+0x19c>)
 8005b32:	2200      	movs	r2, #0
 8005b34:	601a      	str	r2, [r3, #0]
 8005b36:	e044      	b.n	8005bc2 <task11+0x18a>

		}
		else if(info.relay_no ==1 && strcmp(info.status,"OFF")==0)
 8005b38:	4b26      	ldr	r3, [pc, #152]	; (8005bd4 <task11+0x19c>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d129      	bne.n	8005b94 <task11+0x15c>
 8005b40:	4928      	ldr	r1, [pc, #160]	; (8005be4 <task11+0x1ac>)
 8005b42:	4826      	ldr	r0, [pc, #152]	; (8005bdc <task11+0x1a4>)
 8005b44:	f7fa fb64 	bl	8000210 <strcmp>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d122      	bne.n	8005b94 <task11+0x15c>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 8005b4e:	2200      	movs	r2, #0
 8005b50:	2120      	movs	r1, #32
 8005b52:	4823      	ldr	r0, [pc, #140]	; (8005be0 <task11+0x1a8>)
 8005b54:	f7fb f808 	bl	8000b68 <HAL_GPIO_WritePin>
			tick = xTaskGetTickCount();
 8005b58:	f7fd fc9e 	bl	8003498 <xTaskGetTickCount>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	60fb      	str	r3, [r7, #12]
			vTaskDelayUntil(&tick, info.tim * configTICK_RATE_HZ/1000);
 8005b60:	4b1c      	ldr	r3, [pc, #112]	; (8005bd4 <task11+0x19c>)
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	461a      	mov	r2, r3
 8005b66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005b6a:	fb03 f302 	mul.w	r3, r3, r2
 8005b6e:	4a1e      	ldr	r2, [pc, #120]	; (8005be8 <task11+0x1b0>)
 8005b70:	fba2 2303 	umull	r2, r3, r2, r3
 8005b74:	099a      	lsrs	r2, r3, #6
 8005b76:	f107 030c 	add.w	r3, r7, #12
 8005b7a:	4611      	mov	r1, r2
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f7fd f9d1 	bl	8002f24 <vTaskDelayUntil>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8005b82:	2201      	movs	r2, #1
 8005b84:	2120      	movs	r1, #32
 8005b86:	4816      	ldr	r0, [pc, #88]	; (8005be0 <task11+0x1a8>)
 8005b88:	f7fa ffee 	bl	8000b68 <HAL_GPIO_WritePin>
			info.relay_no =0;
 8005b8c:	4b11      	ldr	r3, [pc, #68]	; (8005bd4 <task11+0x19c>)
 8005b8e:	2200      	movs	r2, #0
 8005b90:	601a      	str	r2, [r3, #0]
 8005b92:	e016      	b.n	8005bc2 <task11+0x18a>

		}
		else if(info.relay_no ==1 && strcmp(info.status,"OFF")==0 && info.tim == 0)
 8005b94:	4b0f      	ldr	r3, [pc, #60]	; (8005bd4 <task11+0x19c>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d112      	bne.n	8005bc2 <task11+0x18a>
 8005b9c:	4911      	ldr	r1, [pc, #68]	; (8005be4 <task11+0x1ac>)
 8005b9e:	480f      	ldr	r0, [pc, #60]	; (8005bdc <task11+0x1a4>)
 8005ba0:	f7fa fb36 	bl	8000210 <strcmp>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d10b      	bne.n	8005bc2 <task11+0x18a>
 8005baa:	4b0a      	ldr	r3, [pc, #40]	; (8005bd4 <task11+0x19c>)
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d107      	bne.n	8005bc2 <task11+0x18a>
				{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	2120      	movs	r1, #32
 8005bb6:	480a      	ldr	r0, [pc, #40]	; (8005be0 <task11+0x1a8>)
 8005bb8:	f7fa ffd6 	bl	8000b68 <HAL_GPIO_WritePin>
			info.relay_no = 0;
 8005bbc:	4b05      	ldr	r3, [pc, #20]	; (8005bd4 <task11+0x19c>)
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	601a      	str	r2, [r3, #0]

		}

		vTaskDelayUntil(&tick, 2100 * configTICK_RATE_HZ/1000);
 8005bc2:	f107 030c 	add.w	r3, r7, #12
 8005bc6:	f640 0134 	movw	r1, #2100	; 0x834
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f7fd f9aa 	bl	8002f24 <vTaskDelayUntil>
	{vTaskSuspend(NULL);
 8005bd0:	e736      	b.n	8005a40 <task11+0x8>
 8005bd2:	bf00      	nop
 8005bd4:	20004738 	.word	0x20004738
 8005bd8:	08007f00 	.word	0x08007f00
 8005bdc:	2000473c 	.word	0x2000473c
 8005be0:	40020000 	.word	0x40020000
 8005be4:	08007f04 	.word	0x08007f04
 8005be8:	10624dd3 	.word	0x10624dd3

08005bec <task12>:
	}

}
void task12(void *p)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
	TickType_t tick;
	while(1)
	{vTaskSuspend(NULL);
 8005bf4:	2000      	movs	r0, #0
 8005bf6:	f7fd fa0f 	bl	8003018 <vTaskSuspend>

		if(info.relay_no ==1 && strcmp(info.status,"ON")==0)
 8005bfa:	4b63      	ldr	r3, [pc, #396]	; (8005d88 <task12+0x19c>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d174      	bne.n	8005cec <task12+0x100>
 8005c02:	4962      	ldr	r1, [pc, #392]	; (8005d8c <task12+0x1a0>)
 8005c04:	4862      	ldr	r0, [pc, #392]	; (8005d90 <task12+0x1a4>)
 8005c06:	f7fa fb03 	bl	8000210 <strcmp>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d16d      	bne.n	8005cec <task12+0x100>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8005c10:	2201      	movs	r2, #1
 8005c12:	2120      	movs	r1, #32
 8005c14:	485f      	ldr	r0, [pc, #380]	; (8005d94 <task12+0x1a8>)
 8005c16:	f7fa ffa7 	bl	8000b68 <HAL_GPIO_WritePin>
			tick = xTaskGetTickCount();
 8005c1a:	f7fd fc3d 	bl	8003498 <xTaskGetTickCount>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	60fb      	str	r3, [r7, #12]
			while(xTaskGetTickCount()-tick < info.tim * configTICK_RATE_HZ/1000)
 8005c22:	e048      	b.n	8005cb6 <task12+0xca>
			{
				if(info.relay_no == 1 && strcmp(info.status,"OFF")==0 && info.tim != 0)
 8005c24:	4b58      	ldr	r3, [pc, #352]	; (8005d88 <task12+0x19c>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d12d      	bne.n	8005c88 <task12+0x9c>
 8005c2c:	495a      	ldr	r1, [pc, #360]	; (8005d98 <task12+0x1ac>)
 8005c2e:	4858      	ldr	r0, [pc, #352]	; (8005d90 <task12+0x1a4>)
 8005c30:	f7fa faee 	bl	8000210 <strcmp>
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d126      	bne.n	8005c88 <task12+0x9c>
 8005c3a:	4b53      	ldr	r3, [pc, #332]	; (8005d88 <task12+0x19c>)
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d022      	beq.n	8005c88 <task12+0x9c>
				{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 8005c42:	2200      	movs	r2, #0
 8005c44:	2120      	movs	r1, #32
 8005c46:	4853      	ldr	r0, [pc, #332]	; (8005d94 <task12+0x1a8>)
 8005c48:	f7fa ff8e 	bl	8000b68 <HAL_GPIO_WritePin>
					tick = xTaskGetTickCount();
 8005c4c:	f7fd fc24 	bl	8003498 <xTaskGetTickCount>
 8005c50:	4603      	mov	r3, r0
 8005c52:	60fb      	str	r3, [r7, #12]
					vTaskDelayUntil(&tick, info.tim * configTICK_RATE_HZ/1000);
 8005c54:	4b4c      	ldr	r3, [pc, #304]	; (8005d88 <task12+0x19c>)
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	461a      	mov	r2, r3
 8005c5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005c5e:	fb03 f302 	mul.w	r3, r3, r2
 8005c62:	4a4e      	ldr	r2, [pc, #312]	; (8005d9c <task12+0x1b0>)
 8005c64:	fba2 2303 	umull	r2, r3, r2, r3
 8005c68:	099a      	lsrs	r2, r3, #6
 8005c6a:	f107 030c 	add.w	r3, r7, #12
 8005c6e:	4611      	mov	r1, r2
 8005c70:	4618      	mov	r0, r3
 8005c72:	f7fd f957 	bl	8002f24 <vTaskDelayUntil>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8005c76:	2201      	movs	r2, #1
 8005c78:	2120      	movs	r1, #32
 8005c7a:	4846      	ldr	r0, [pc, #280]	; (8005d94 <task12+0x1a8>)
 8005c7c:	f7fa ff74 	bl	8000b68 <HAL_GPIO_WritePin>
					vTaskSuspend(NULL);
 8005c80:	2000      	movs	r0, #0
 8005c82:	f7fd f9c9 	bl	8003018 <vTaskSuspend>
 8005c86:	e016      	b.n	8005cb6 <task12+0xca>

				}
				else if(info.relay_no ==1 && strcmp(info.status,"OFF")==0 && info.tim == 0)
 8005c88:	4b3f      	ldr	r3, [pc, #252]	; (8005d88 <task12+0x19c>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d112      	bne.n	8005cb6 <task12+0xca>
 8005c90:	4941      	ldr	r1, [pc, #260]	; (8005d98 <task12+0x1ac>)
 8005c92:	483f      	ldr	r0, [pc, #252]	; (8005d90 <task12+0x1a4>)
 8005c94:	f7fa fabc 	bl	8000210 <strcmp>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d10b      	bne.n	8005cb6 <task12+0xca>
 8005c9e:	4b3a      	ldr	r3, [pc, #232]	; (8005d88 <task12+0x19c>)
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d107      	bne.n	8005cb6 <task12+0xca>
						{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	2120      	movs	r1, #32
 8005caa:	483a      	ldr	r0, [pc, #232]	; (8005d94 <task12+0x1a8>)
 8005cac:	f7fa ff5c 	bl	8000b68 <HAL_GPIO_WritePin>
					vTaskSuspend(NULL);
 8005cb0:	2000      	movs	r0, #0
 8005cb2:	f7fd f9b1 	bl	8003018 <vTaskSuspend>
			while(xTaskGetTickCount()-tick < info.tim * configTICK_RATE_HZ/1000)
 8005cb6:	f7fd fbef 	bl	8003498 <xTaskGetTickCount>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	1ad2      	subs	r2, r2, r3
 8005cc0:	4b31      	ldr	r3, [pc, #196]	; (8005d88 <task12+0x19c>)
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	4619      	mov	r1, r3
 8005cc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005cca:	fb03 f301 	mul.w	r3, r3, r1
 8005cce:	4933      	ldr	r1, [pc, #204]	; (8005d9c <task12+0x1b0>)
 8005cd0:	fba1 1303 	umull	r1, r3, r1, r3
 8005cd4:	099b      	lsrs	r3, r3, #6
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d3a4      	bcc.n	8005c24 <task12+0x38>

				}
			}
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 8005cda:	2200      	movs	r2, #0
 8005cdc:	2120      	movs	r1, #32
 8005cde:	482d      	ldr	r0, [pc, #180]	; (8005d94 <task12+0x1a8>)
 8005ce0:	f7fa ff42 	bl	8000b68 <HAL_GPIO_WritePin>
			info.relay_no =0;
 8005ce4:	4b28      	ldr	r3, [pc, #160]	; (8005d88 <task12+0x19c>)
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	601a      	str	r2, [r3, #0]
 8005cea:	e044      	b.n	8005d76 <task12+0x18a>

		}
		else if(info.relay_no ==1 && strcmp(info.status,"OFF")==0)
 8005cec:	4b26      	ldr	r3, [pc, #152]	; (8005d88 <task12+0x19c>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d129      	bne.n	8005d48 <task12+0x15c>
 8005cf4:	4928      	ldr	r1, [pc, #160]	; (8005d98 <task12+0x1ac>)
 8005cf6:	4826      	ldr	r0, [pc, #152]	; (8005d90 <task12+0x1a4>)
 8005cf8:	f7fa fa8a 	bl	8000210 <strcmp>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d122      	bne.n	8005d48 <task12+0x15c>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 8005d02:	2200      	movs	r2, #0
 8005d04:	2120      	movs	r1, #32
 8005d06:	4823      	ldr	r0, [pc, #140]	; (8005d94 <task12+0x1a8>)
 8005d08:	f7fa ff2e 	bl	8000b68 <HAL_GPIO_WritePin>
			tick = xTaskGetTickCount();
 8005d0c:	f7fd fbc4 	bl	8003498 <xTaskGetTickCount>
 8005d10:	4603      	mov	r3, r0
 8005d12:	60fb      	str	r3, [r7, #12]
			vTaskDelayUntil(&tick, info.tim * configTICK_RATE_HZ/1000);
 8005d14:	4b1c      	ldr	r3, [pc, #112]	; (8005d88 <task12+0x19c>)
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	461a      	mov	r2, r3
 8005d1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005d1e:	fb03 f302 	mul.w	r3, r3, r2
 8005d22:	4a1e      	ldr	r2, [pc, #120]	; (8005d9c <task12+0x1b0>)
 8005d24:	fba2 2303 	umull	r2, r3, r2, r3
 8005d28:	099a      	lsrs	r2, r3, #6
 8005d2a:	f107 030c 	add.w	r3, r7, #12
 8005d2e:	4611      	mov	r1, r2
 8005d30:	4618      	mov	r0, r3
 8005d32:	f7fd f8f7 	bl	8002f24 <vTaskDelayUntil>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8005d36:	2201      	movs	r2, #1
 8005d38:	2120      	movs	r1, #32
 8005d3a:	4816      	ldr	r0, [pc, #88]	; (8005d94 <task12+0x1a8>)
 8005d3c:	f7fa ff14 	bl	8000b68 <HAL_GPIO_WritePin>
			info.relay_no =0;
 8005d40:	4b11      	ldr	r3, [pc, #68]	; (8005d88 <task12+0x19c>)
 8005d42:	2200      	movs	r2, #0
 8005d44:	601a      	str	r2, [r3, #0]
 8005d46:	e016      	b.n	8005d76 <task12+0x18a>

		}
		else if(info.relay_no ==1 && strcmp(info.status,"OFF")==0 && info.tim == 0)
 8005d48:	4b0f      	ldr	r3, [pc, #60]	; (8005d88 <task12+0x19c>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d112      	bne.n	8005d76 <task12+0x18a>
 8005d50:	4911      	ldr	r1, [pc, #68]	; (8005d98 <task12+0x1ac>)
 8005d52:	480f      	ldr	r0, [pc, #60]	; (8005d90 <task12+0x1a4>)
 8005d54:	f7fa fa5c 	bl	8000210 <strcmp>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d10b      	bne.n	8005d76 <task12+0x18a>
 8005d5e:	4b0a      	ldr	r3, [pc, #40]	; (8005d88 <task12+0x19c>)
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d107      	bne.n	8005d76 <task12+0x18a>
				{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 8005d66:	2200      	movs	r2, #0
 8005d68:	2120      	movs	r1, #32
 8005d6a:	480a      	ldr	r0, [pc, #40]	; (8005d94 <task12+0x1a8>)
 8005d6c:	f7fa fefc 	bl	8000b68 <HAL_GPIO_WritePin>
			info.relay_no = 0;
 8005d70:	4b05      	ldr	r3, [pc, #20]	; (8005d88 <task12+0x19c>)
 8005d72:	2200      	movs	r2, #0
 8005d74:	601a      	str	r2, [r3, #0]

		}

		vTaskDelayUntil(&tick, 1800 * configTICK_RATE_HZ/1000);
 8005d76:	f107 030c 	add.w	r3, r7, #12
 8005d7a:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f7fd f8d0 	bl	8002f24 <vTaskDelayUntil>
	{vTaskSuspend(NULL);
 8005d84:	e736      	b.n	8005bf4 <task12+0x8>
 8005d86:	bf00      	nop
 8005d88:	20004738 	.word	0x20004738
 8005d8c:	08007f00 	.word	0x08007f00
 8005d90:	2000473c 	.word	0x2000473c
 8005d94:	40020000 	.word	0x40020000
 8005d98:	08007f04 	.word	0x08007f04
 8005d9c:	10624dd3 	.word	0x10624dd3

08005da0 <task3>:
	}
}
void task3(void *p)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
	TickType_t tick;
	while(1)
	{vTaskSuspend(NULL);
 8005da8:	2000      	movs	r0, #0
 8005daa:	f7fd f935 	bl	8003018 <vTaskSuspend>

		if(info.relay_no ==1 && strcmp(info.status,"ON")==0)
 8005dae:	4b63      	ldr	r3, [pc, #396]	; (8005f3c <task3+0x19c>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d174      	bne.n	8005ea0 <task3+0x100>
 8005db6:	4962      	ldr	r1, [pc, #392]	; (8005f40 <task3+0x1a0>)
 8005db8:	4862      	ldr	r0, [pc, #392]	; (8005f44 <task3+0x1a4>)
 8005dba:	f7fa fa29 	bl	8000210 <strcmp>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d16d      	bne.n	8005ea0 <task3+0x100>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	2120      	movs	r1, #32
 8005dc8:	485f      	ldr	r0, [pc, #380]	; (8005f48 <task3+0x1a8>)
 8005dca:	f7fa fecd 	bl	8000b68 <HAL_GPIO_WritePin>
			tick = xTaskGetTickCount();
 8005dce:	f7fd fb63 	bl	8003498 <xTaskGetTickCount>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	60fb      	str	r3, [r7, #12]
			while(xTaskGetTickCount()-tick < info.tim * configTICK_RATE_HZ/1000)
 8005dd6:	e048      	b.n	8005e6a <task3+0xca>
			{
				if(info.relay_no == 1 && strcmp(info.status,"OFF")==0 && info.tim != 0)
 8005dd8:	4b58      	ldr	r3, [pc, #352]	; (8005f3c <task3+0x19c>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d12d      	bne.n	8005e3c <task3+0x9c>
 8005de0:	495a      	ldr	r1, [pc, #360]	; (8005f4c <task3+0x1ac>)
 8005de2:	4858      	ldr	r0, [pc, #352]	; (8005f44 <task3+0x1a4>)
 8005de4:	f7fa fa14 	bl	8000210 <strcmp>
 8005de8:	4603      	mov	r3, r0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d126      	bne.n	8005e3c <task3+0x9c>
 8005dee:	4b53      	ldr	r3, [pc, #332]	; (8005f3c <task3+0x19c>)
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d022      	beq.n	8005e3c <task3+0x9c>
				{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 8005df6:	2200      	movs	r2, #0
 8005df8:	2120      	movs	r1, #32
 8005dfa:	4853      	ldr	r0, [pc, #332]	; (8005f48 <task3+0x1a8>)
 8005dfc:	f7fa feb4 	bl	8000b68 <HAL_GPIO_WritePin>
					tick = xTaskGetTickCount();
 8005e00:	f7fd fb4a 	bl	8003498 <xTaskGetTickCount>
 8005e04:	4603      	mov	r3, r0
 8005e06:	60fb      	str	r3, [r7, #12]
					vTaskDelayUntil(&tick, info.tim * configTICK_RATE_HZ/1000);
 8005e08:	4b4c      	ldr	r3, [pc, #304]	; (8005f3c <task3+0x19c>)
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005e12:	fb03 f302 	mul.w	r3, r3, r2
 8005e16:	4a4e      	ldr	r2, [pc, #312]	; (8005f50 <task3+0x1b0>)
 8005e18:	fba2 2303 	umull	r2, r3, r2, r3
 8005e1c:	099a      	lsrs	r2, r3, #6
 8005e1e:	f107 030c 	add.w	r3, r7, #12
 8005e22:	4611      	mov	r1, r2
 8005e24:	4618      	mov	r0, r3
 8005e26:	f7fd f87d 	bl	8002f24 <vTaskDelayUntil>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	2120      	movs	r1, #32
 8005e2e:	4846      	ldr	r0, [pc, #280]	; (8005f48 <task3+0x1a8>)
 8005e30:	f7fa fe9a 	bl	8000b68 <HAL_GPIO_WritePin>
					vTaskSuspend(NULL);
 8005e34:	2000      	movs	r0, #0
 8005e36:	f7fd f8ef 	bl	8003018 <vTaskSuspend>
 8005e3a:	e016      	b.n	8005e6a <task3+0xca>

				}
				else if(info.relay_no ==1 && strcmp(info.status,"OFF")==0 && info.tim == 0)
 8005e3c:	4b3f      	ldr	r3, [pc, #252]	; (8005f3c <task3+0x19c>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d112      	bne.n	8005e6a <task3+0xca>
 8005e44:	4941      	ldr	r1, [pc, #260]	; (8005f4c <task3+0x1ac>)
 8005e46:	483f      	ldr	r0, [pc, #252]	; (8005f44 <task3+0x1a4>)
 8005e48:	f7fa f9e2 	bl	8000210 <strcmp>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d10b      	bne.n	8005e6a <task3+0xca>
 8005e52:	4b3a      	ldr	r3, [pc, #232]	; (8005f3c <task3+0x19c>)
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d107      	bne.n	8005e6a <task3+0xca>
						{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	2120      	movs	r1, #32
 8005e5e:	483a      	ldr	r0, [pc, #232]	; (8005f48 <task3+0x1a8>)
 8005e60:	f7fa fe82 	bl	8000b68 <HAL_GPIO_WritePin>
					vTaskSuspend(NULL);
 8005e64:	2000      	movs	r0, #0
 8005e66:	f7fd f8d7 	bl	8003018 <vTaskSuspend>
			while(xTaskGetTickCount()-tick < info.tim * configTICK_RATE_HZ/1000)
 8005e6a:	f7fd fb15 	bl	8003498 <xTaskGetTickCount>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	1ad2      	subs	r2, r2, r3
 8005e74:	4b31      	ldr	r3, [pc, #196]	; (8005f3c <task3+0x19c>)
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	4619      	mov	r1, r3
 8005e7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005e7e:	fb03 f301 	mul.w	r3, r3, r1
 8005e82:	4933      	ldr	r1, [pc, #204]	; (8005f50 <task3+0x1b0>)
 8005e84:	fba1 1303 	umull	r1, r3, r1, r3
 8005e88:	099b      	lsrs	r3, r3, #6
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d3a4      	bcc.n	8005dd8 <task3+0x38>

				}
			}
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 8005e8e:	2200      	movs	r2, #0
 8005e90:	2120      	movs	r1, #32
 8005e92:	482d      	ldr	r0, [pc, #180]	; (8005f48 <task3+0x1a8>)
 8005e94:	f7fa fe68 	bl	8000b68 <HAL_GPIO_WritePin>
			info.relay_no =0;
 8005e98:	4b28      	ldr	r3, [pc, #160]	; (8005f3c <task3+0x19c>)
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	601a      	str	r2, [r3, #0]
 8005e9e:	e044      	b.n	8005f2a <task3+0x18a>

		}
		else if(info.relay_no ==1 && strcmp(info.status,"OFF")==0)
 8005ea0:	4b26      	ldr	r3, [pc, #152]	; (8005f3c <task3+0x19c>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d129      	bne.n	8005efc <task3+0x15c>
 8005ea8:	4928      	ldr	r1, [pc, #160]	; (8005f4c <task3+0x1ac>)
 8005eaa:	4826      	ldr	r0, [pc, #152]	; (8005f44 <task3+0x1a4>)
 8005eac:	f7fa f9b0 	bl	8000210 <strcmp>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d122      	bne.n	8005efc <task3+0x15c>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	2120      	movs	r1, #32
 8005eba:	4823      	ldr	r0, [pc, #140]	; (8005f48 <task3+0x1a8>)
 8005ebc:	f7fa fe54 	bl	8000b68 <HAL_GPIO_WritePin>
			tick = xTaskGetTickCount();
 8005ec0:	f7fd faea 	bl	8003498 <xTaskGetTickCount>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	60fb      	str	r3, [r7, #12]
			vTaskDelayUntil(&tick, info.tim * configTICK_RATE_HZ/1000);
 8005ec8:	4b1c      	ldr	r3, [pc, #112]	; (8005f3c <task3+0x19c>)
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	461a      	mov	r2, r3
 8005ece:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005ed2:	fb03 f302 	mul.w	r3, r3, r2
 8005ed6:	4a1e      	ldr	r2, [pc, #120]	; (8005f50 <task3+0x1b0>)
 8005ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8005edc:	099a      	lsrs	r2, r3, #6
 8005ede:	f107 030c 	add.w	r3, r7, #12
 8005ee2:	4611      	mov	r1, r2
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f7fd f81d 	bl	8002f24 <vTaskDelayUntil>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8005eea:	2201      	movs	r2, #1
 8005eec:	2120      	movs	r1, #32
 8005eee:	4816      	ldr	r0, [pc, #88]	; (8005f48 <task3+0x1a8>)
 8005ef0:	f7fa fe3a 	bl	8000b68 <HAL_GPIO_WritePin>
			info.relay_no =0;
 8005ef4:	4b11      	ldr	r3, [pc, #68]	; (8005f3c <task3+0x19c>)
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	601a      	str	r2, [r3, #0]
 8005efa:	e016      	b.n	8005f2a <task3+0x18a>

		}
		else if(info.relay_no ==1 && strcmp(info.status,"OFF")==0 && info.tim == 0)
 8005efc:	4b0f      	ldr	r3, [pc, #60]	; (8005f3c <task3+0x19c>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d112      	bne.n	8005f2a <task3+0x18a>
 8005f04:	4911      	ldr	r1, [pc, #68]	; (8005f4c <task3+0x1ac>)
 8005f06:	480f      	ldr	r0, [pc, #60]	; (8005f44 <task3+0x1a4>)
 8005f08:	f7fa f982 	bl	8000210 <strcmp>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d10b      	bne.n	8005f2a <task3+0x18a>
 8005f12:	4b0a      	ldr	r3, [pc, #40]	; (8005f3c <task3+0x19c>)
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d107      	bne.n	8005f2a <task3+0x18a>
				{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	2120      	movs	r1, #32
 8005f1e:	480a      	ldr	r0, [pc, #40]	; (8005f48 <task3+0x1a8>)
 8005f20:	f7fa fe22 	bl	8000b68 <HAL_GPIO_WritePin>
			info.relay_no = 0;
 8005f24:	4b05      	ldr	r3, [pc, #20]	; (8005f3c <task3+0x19c>)
 8005f26:	2200      	movs	r2, #0
 8005f28:	601a      	str	r2, [r3, #0]

		}

		vTaskDelayUntil(&tick, 1500 * configTICK_RATE_HZ/1000);
 8005f2a:	f107 030c 	add.w	r3, r7, #12
 8005f2e:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8005f32:	4618      	mov	r0, r3
 8005f34:	f7fc fff6 	bl	8002f24 <vTaskDelayUntil>
	{vTaskSuspend(NULL);
 8005f38:	e736      	b.n	8005da8 <task3+0x8>
 8005f3a:	bf00      	nop
 8005f3c:	20004738 	.word	0x20004738
 8005f40:	08007f00 	.word	0x08007f00
 8005f44:	2000473c 	.word	0x2000473c
 8005f48:	40020000 	.word	0x40020000
 8005f4c:	08007f04 	.word	0x08007f04
 8005f50:	10624dd3 	.word	0x10624dd3

08005f54 <main>:
	}
}
int main()
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b082      	sub	sp, #8
 8005f58:	af02      	add	r7, sp, #8
	HAL_Init();
 8005f5a:	f7fa fb41 	bl	80005e0 <HAL_Init>
	GPIO_INIT();
 8005f5e:	f000 f92b 	bl	80061b8 <GPIO_INIT>
	MX_USART2_UART_Init();
 8005f62:	f000 f8d9 	bl	8006118 <MX_USART2_UART_Init>
	//gatekeeper = xSemaphoreCreateBinary();
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
	xTaskCreate(task1, "task1", 100, (void*)0,tskIDLE_PRIORITY, &task1handle);
 8005f66:	4b44      	ldr	r3, [pc, #272]	; (8006078 <main+0x124>)
 8005f68:	9301      	str	r3, [sp, #4]
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	9300      	str	r3, [sp, #0]
 8005f6e:	2300      	movs	r3, #0
 8005f70:	2264      	movs	r2, #100	; 0x64
 8005f72:	4942      	ldr	r1, [pc, #264]	; (800607c <main+0x128>)
 8005f74:	4842      	ldr	r0, [pc, #264]	; (8006080 <main+0x12c>)
 8005f76:	f7fc fe9f 	bl	8002cb8 <xTaskCreate>
	xTaskCreate(task2, "task2", 100, (void*)0,tskIDLE_PRIORITY, &task2handle);
 8005f7a:	4b42      	ldr	r3, [pc, #264]	; (8006084 <main+0x130>)
 8005f7c:	9301      	str	r3, [sp, #4]
 8005f7e:	2300      	movs	r3, #0
 8005f80:	9300      	str	r3, [sp, #0]
 8005f82:	2300      	movs	r3, #0
 8005f84:	2264      	movs	r2, #100	; 0x64
 8005f86:	4940      	ldr	r1, [pc, #256]	; (8006088 <main+0x134>)
 8005f88:	4840      	ldr	r0, [pc, #256]	; (800608c <main+0x138>)
 8005f8a:	f7fc fe95 	bl	8002cb8 <xTaskCreate>
	xTaskCreate(task3, "task3", 100, (void*)0,tskIDLE_PRIORITY, &task3handle);
 8005f8e:	4b40      	ldr	r3, [pc, #256]	; (8006090 <main+0x13c>)
 8005f90:	9301      	str	r3, [sp, #4]
 8005f92:	2300      	movs	r3, #0
 8005f94:	9300      	str	r3, [sp, #0]
 8005f96:	2300      	movs	r3, #0
 8005f98:	2264      	movs	r2, #100	; 0x64
 8005f9a:	493e      	ldr	r1, [pc, #248]	; (8006094 <main+0x140>)
 8005f9c:	483e      	ldr	r0, [pc, #248]	; (8006098 <main+0x144>)
 8005f9e:	f7fc fe8b 	bl	8002cb8 <xTaskCreate>
	xTaskCreate(task4, "task4", 100, (void*)0,tskIDLE_PRIORITY, &task4handle);
 8005fa2:	4b3e      	ldr	r3, [pc, #248]	; (800609c <main+0x148>)
 8005fa4:	9301      	str	r3, [sp, #4]
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	9300      	str	r3, [sp, #0]
 8005faa:	2300      	movs	r3, #0
 8005fac:	2264      	movs	r2, #100	; 0x64
 8005fae:	493c      	ldr	r1, [pc, #240]	; (80060a0 <main+0x14c>)
 8005fb0:	483c      	ldr	r0, [pc, #240]	; (80060a4 <main+0x150>)
 8005fb2:	f7fc fe81 	bl	8002cb8 <xTaskCreate>
	xTaskCreate(task5, "task5", 100, (void*)0,tskIDLE_PRIORITY, &task5handle);
 8005fb6:	4b3c      	ldr	r3, [pc, #240]	; (80060a8 <main+0x154>)
 8005fb8:	9301      	str	r3, [sp, #4]
 8005fba:	2300      	movs	r3, #0
 8005fbc:	9300      	str	r3, [sp, #0]
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	2264      	movs	r2, #100	; 0x64
 8005fc2:	493a      	ldr	r1, [pc, #232]	; (80060ac <main+0x158>)
 8005fc4:	483a      	ldr	r0, [pc, #232]	; (80060b0 <main+0x15c>)
 8005fc6:	f7fc fe77 	bl	8002cb8 <xTaskCreate>
	xTaskCreate(task6, "task6", 100, (void*)0,tskIDLE_PRIORITY, &task6handle);
 8005fca:	4b3a      	ldr	r3, [pc, #232]	; (80060b4 <main+0x160>)
 8005fcc:	9301      	str	r3, [sp, #4]
 8005fce:	2300      	movs	r3, #0
 8005fd0:	9300      	str	r3, [sp, #0]
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	2264      	movs	r2, #100	; 0x64
 8005fd6:	4938      	ldr	r1, [pc, #224]	; (80060b8 <main+0x164>)
 8005fd8:	4838      	ldr	r0, [pc, #224]	; (80060bc <main+0x168>)
 8005fda:	f7fc fe6d 	bl	8002cb8 <xTaskCreate>
	xTaskCreate(task7, "task7", 100, (void*)0,tskIDLE_PRIORITY, &task7handle);
 8005fde:	4b38      	ldr	r3, [pc, #224]	; (80060c0 <main+0x16c>)
 8005fe0:	9301      	str	r3, [sp, #4]
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	9300      	str	r3, [sp, #0]
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	2264      	movs	r2, #100	; 0x64
 8005fea:	4936      	ldr	r1, [pc, #216]	; (80060c4 <main+0x170>)
 8005fec:	4836      	ldr	r0, [pc, #216]	; (80060c8 <main+0x174>)
 8005fee:	f7fc fe63 	bl	8002cb8 <xTaskCreate>
	xTaskCreate(task8, "task8", 100, (void*)0,tskIDLE_PRIORITY, &task8handle);
 8005ff2:	4b36      	ldr	r3, [pc, #216]	; (80060cc <main+0x178>)
 8005ff4:	9301      	str	r3, [sp, #4]
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	9300      	str	r3, [sp, #0]
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	2264      	movs	r2, #100	; 0x64
 8005ffe:	4934      	ldr	r1, [pc, #208]	; (80060d0 <main+0x17c>)
 8006000:	4834      	ldr	r0, [pc, #208]	; (80060d4 <main+0x180>)
 8006002:	f7fc fe59 	bl	8002cb8 <xTaskCreate>
	xTaskCreate(task9, "task9", 100, (void*)0,tskIDLE_PRIORITY , &task9handle);
 8006006:	4b34      	ldr	r3, [pc, #208]	; (80060d8 <main+0x184>)
 8006008:	9301      	str	r3, [sp, #4]
 800600a:	2300      	movs	r3, #0
 800600c:	9300      	str	r3, [sp, #0]
 800600e:	2300      	movs	r3, #0
 8006010:	2264      	movs	r2, #100	; 0x64
 8006012:	4932      	ldr	r1, [pc, #200]	; (80060dc <main+0x188>)
 8006014:	4832      	ldr	r0, [pc, #200]	; (80060e0 <main+0x18c>)
 8006016:	f7fc fe4f 	bl	8002cb8 <xTaskCreate>
	xTaskCreate(task10,"task10", 100, (void*)0,tskIDLE_PRIORITY, &task10handle);
 800601a:	4b32      	ldr	r3, [pc, #200]	; (80060e4 <main+0x190>)
 800601c:	9301      	str	r3, [sp, #4]
 800601e:	2300      	movs	r3, #0
 8006020:	9300      	str	r3, [sp, #0]
 8006022:	2300      	movs	r3, #0
 8006024:	2264      	movs	r2, #100	; 0x64
 8006026:	4930      	ldr	r1, [pc, #192]	; (80060e8 <main+0x194>)
 8006028:	4830      	ldr	r0, [pc, #192]	; (80060ec <main+0x198>)
 800602a:	f7fc fe45 	bl	8002cb8 <xTaskCreate>
	xTaskCreate(task11,"task11", 100, (void*)0,tskIDLE_PRIORITY, &task11handle);
 800602e:	4b30      	ldr	r3, [pc, #192]	; (80060f0 <main+0x19c>)
 8006030:	9301      	str	r3, [sp, #4]
 8006032:	2300      	movs	r3, #0
 8006034:	9300      	str	r3, [sp, #0]
 8006036:	2300      	movs	r3, #0
 8006038:	2264      	movs	r2, #100	; 0x64
 800603a:	492e      	ldr	r1, [pc, #184]	; (80060f4 <main+0x1a0>)
 800603c:	482e      	ldr	r0, [pc, #184]	; (80060f8 <main+0x1a4>)
 800603e:	f7fc fe3b 	bl	8002cb8 <xTaskCreate>
	xTaskCreate(task12,"task12", 100, (void*)0,tskIDLE_PRIORITY, &task12handle);
 8006042:	4b2e      	ldr	r3, [pc, #184]	; (80060fc <main+0x1a8>)
 8006044:	9301      	str	r3, [sp, #4]
 8006046:	2300      	movs	r3, #0
 8006048:	9300      	str	r3, [sp, #0]
 800604a:	2300      	movs	r3, #0
 800604c:	2264      	movs	r2, #100	; 0x64
 800604e:	492c      	ldr	r1, [pc, #176]	; (8006100 <main+0x1ac>)
 8006050:	482c      	ldr	r0, [pc, #176]	; (8006104 <main+0x1b0>)
 8006052:	f7fc fe31 	bl	8002cb8 <xTaskCreate>
	xTaskCreate(task13,"task13", 100, (void*)0,tskIDLE_PRIORITY, &task13handle);
 8006056:	4b2c      	ldr	r3, [pc, #176]	; (8006108 <main+0x1b4>)
 8006058:	9301      	str	r3, [sp, #4]
 800605a:	2300      	movs	r3, #0
 800605c:	9300      	str	r3, [sp, #0]
 800605e:	2300      	movs	r3, #0
 8006060:	2264      	movs	r2, #100	; 0x64
 8006062:	492a      	ldr	r1, [pc, #168]	; (800610c <main+0x1b8>)
 8006064:	482a      	ldr	r0, [pc, #168]	; (8006110 <main+0x1bc>)
 8006066:	f7fc fe27 	bl	8002cb8 <xTaskCreate>

	printc("|||******************Nucleo-64 STMF446RE(online)******************|||\r\nCommand:~$ ");
 800606a:	482a      	ldr	r0, [pc, #168]	; (8006114 <main+0x1c0>)
 800606c:	f000 f87e 	bl	800616c <printc>

	vTaskStartScheduler();
 8006070:	f7fd f904 	bl	800327c <vTaskStartScheduler>
	while(1);
 8006074:	e7fe      	b.n	8006074 <main+0x120>
 8006076:	bf00      	nop
 8006078:	20004750 	.word	0x20004750
 800607c:	08007f08 	.word	0x08007f08
 8006080:	08004be5 	.word	0x08004be5
 8006084:	200047a8 	.word	0x200047a8
 8006088:	08007f10 	.word	0x08007f10
 800608c:	08004d69 	.word	0x08004d69
 8006090:	200047f8 	.word	0x200047f8
 8006094:	08007f18 	.word	0x08007f18
 8006098:	08005da1 	.word	0x08005da1
 800609c:	200047a4 	.word	0x200047a4
 80060a0:	08007f20 	.word	0x08007f20
 80060a4:	08004e91 	.word	0x08004e91
 80060a8:	20004748 	.word	0x20004748
 80060ac:	08007f28 	.word	0x08007f28
 80060b0:	08004fc1 	.word	0x08004fc1
 80060b4:	200047b4 	.word	0x200047b4
 80060b8:	08007f30 	.word	0x08007f30
 80060bc:	08005175 	.word	0x08005175
 80060c0:	200047b0 	.word	0x200047b0
 80060c4:	08007f38 	.word	0x08007f38
 80060c8:	08005329 	.word	0x08005329
 80060cc:	2000475c 	.word	0x2000475c
 80060d0:	08007f40 	.word	0x08007f40
 80060d4:	080054dd 	.word	0x080054dd
 80060d8:	20004754 	.word	0x20004754
 80060dc:	08007f48 	.word	0x08007f48
 80060e0:	08005691 	.word	0x08005691
 80060e4:	20004760 	.word	0x20004760
 80060e8:	08007f50 	.word	0x08007f50
 80060ec:	08005885 	.word	0x08005885
 80060f0:	2000474c 	.word	0x2000474c
 80060f4:	08007f58 	.word	0x08007f58
 80060f8:	08005a39 	.word	0x08005a39
 80060fc:	200047fc 	.word	0x200047fc
 8006100:	08007f60 	.word	0x08007f60
 8006104:	08005bed 	.word	0x08005bed
 8006108:	200047ac 	.word	0x200047ac
 800610c:	08007f68 	.word	0x08007f68
 8006110:	08005845 	.word	0x08005845
 8006114:	08007f70 	.word	0x08007f70

08006118 <MX_USART2_UART_Init>:
}


static void MX_USART2_UART_Init(void)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800611c:	4b11      	ldr	r3, [pc, #68]	; (8006164 <MX_USART2_UART_Init+0x4c>)
 800611e:	4a12      	ldr	r2, [pc, #72]	; (8006168 <MX_USART2_UART_Init+0x50>)
 8006120:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006122:	4b10      	ldr	r3, [pc, #64]	; (8006164 <MX_USART2_UART_Init+0x4c>)
 8006124:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006128:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800612a:	4b0e      	ldr	r3, [pc, #56]	; (8006164 <MX_USART2_UART_Init+0x4c>)
 800612c:	2200      	movs	r2, #0
 800612e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006130:	4b0c      	ldr	r3, [pc, #48]	; (8006164 <MX_USART2_UART_Init+0x4c>)
 8006132:	2200      	movs	r2, #0
 8006134:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006136:	4b0b      	ldr	r3, [pc, #44]	; (8006164 <MX_USART2_UART_Init+0x4c>)
 8006138:	2200      	movs	r2, #0
 800613a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800613c:	4b09      	ldr	r3, [pc, #36]	; (8006164 <MX_USART2_UART_Init+0x4c>)
 800613e:	220c      	movs	r2, #12
 8006140:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006142:	4b08      	ldr	r3, [pc, #32]	; (8006164 <MX_USART2_UART_Init+0x4c>)
 8006144:	2200      	movs	r2, #0
 8006146:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006148:	4b06      	ldr	r3, [pc, #24]	; (8006164 <MX_USART2_UART_Init+0x4c>)
 800614a:	2200      	movs	r2, #0
 800614c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800614e:	4805      	ldr	r0, [pc, #20]	; (8006164 <MX_USART2_UART_Init+0x4c>)
 8006150:	f7fa fff6 	bl	8001140 <HAL_UART_Init>
 8006154:	4603      	mov	r3, r0
 8006156:	2b00      	cmp	r3, #0
 8006158:	d001      	beq.n	800615e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800615a:	f000 fbc9 	bl	80068f0 <Error_Handler>
  }

}
 800615e:	bf00      	nop
 8006160:	bd80      	pop	{r7, pc}
 8006162:	bf00      	nop
 8006164:	200047b8 	.word	0x200047b8
 8006168:	40004400 	.word	0x40004400

0800616c <printc>:

void printc(char *format, ...) {
 800616c:	b40f      	push	{r0, r1, r2, r3}
 800616e:	b580      	push	{r7, lr}
 8006170:	b096      	sub	sp, #88	; 0x58
 8006172:	af00      	add	r7, sp, #0
		char str[80];
		va_list args;
		va_start(args, format);
 8006174:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006178:	607b      	str	r3, [r7, #4]
		vsprintf(str, format, args);
 800617a:	f107 0308 	add.w	r3, r7, #8
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006182:	4618      	mov	r0, r3
 8006184:	f000 fdfe 	bl	8006d84 <vsiprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 8006188:	f107 0308 	add.w	r3, r7, #8
 800618c:	4618      	mov	r0, r3
 800618e:	f7fa f849 	bl	8000224 <strlen>
 8006192:	4603      	mov	r3, r0
 8006194:	b29a      	uxth	r2, r3
 8006196:	f107 0108 	add.w	r1, r7, #8
 800619a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800619e:	4805      	ldr	r0, [pc, #20]	; (80061b4 <printc+0x48>)
 80061a0:	f7fb f81b 	bl	80011da <HAL_UART_Transmit>
		//cannot use _IT since interrupt time is very low so only some of message will get printed and interrupt will be triggered
		va_end(args);
	}
 80061a4:	bf00      	nop
 80061a6:	3758      	adds	r7, #88	; 0x58
 80061a8:	46bd      	mov	sp, r7
 80061aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80061ae:	b004      	add	sp, #16
 80061b0:	4770      	bx	lr
 80061b2:	bf00      	nop
 80061b4:	200047b8 	.word	0x200047b8

080061b8 <GPIO_INIT>:


void GPIO_INIT(void)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b08e      	sub	sp, #56	; 0x38
 80061bc:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80061be:	2300      	movs	r3, #0
 80061c0:	60fb      	str	r3, [r7, #12]
 80061c2:	4b33      	ldr	r3, [pc, #204]	; (8006290 <GPIO_INIT+0xd8>)
 80061c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c6:	4a32      	ldr	r2, [pc, #200]	; (8006290 <GPIO_INIT+0xd8>)
 80061c8:	f043 0301 	orr.w	r3, r3, #1
 80061cc:	6313      	str	r3, [r2, #48]	; 0x30
 80061ce:	4b30      	ldr	r3, [pc, #192]	; (8006290 <GPIO_INIT+0xd8>)
 80061d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061d2:	f003 0301 	and.w	r3, r3, #1
 80061d6:	60fb      	str	r3, [r7, #12]
 80061d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80061da:	2300      	movs	r3, #0
 80061dc:	60bb      	str	r3, [r7, #8]
 80061de:	4b2c      	ldr	r3, [pc, #176]	; (8006290 <GPIO_INIT+0xd8>)
 80061e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e2:	4a2b      	ldr	r2, [pc, #172]	; (8006290 <GPIO_INIT+0xd8>)
 80061e4:	f043 0304 	orr.w	r3, r3, #4
 80061e8:	6313      	str	r3, [r2, #48]	; 0x30
 80061ea:	4b29      	ldr	r3, [pc, #164]	; (8006290 <GPIO_INIT+0xd8>)
 80061ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ee:	f003 0304 	and.w	r3, r3, #4
 80061f2:	60bb      	str	r3, [r7, #8]
 80061f4:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80061f6:	2300      	movs	r3, #0
 80061f8:	607b      	str	r3, [r7, #4]
 80061fa:	4b25      	ldr	r3, [pc, #148]	; (8006290 <GPIO_INIT+0xd8>)
 80061fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061fe:	4a24      	ldr	r2, [pc, #144]	; (8006290 <GPIO_INIT+0xd8>)
 8006200:	f043 0302 	orr.w	r3, r3, #2
 8006204:	6313      	str	r3, [r2, #48]	; 0x30
 8006206:	4b22      	ldr	r3, [pc, #136]	; (8006290 <GPIO_INIT+0xd8>)
 8006208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800620a:	f003 0302 	and.w	r3, r3, #2
 800620e:	607b      	str	r3, [r7, #4]
 8006210:	687b      	ldr	r3, [r7, #4]

	GPIO_InitTypeDef ledgpio , buttongpio;

	ledgpio.Pin = GPIO_PIN_5;
 8006212:	2320      	movs	r3, #32
 8006214:	627b      	str	r3, [r7, #36]	; 0x24
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 8006216:	2301      	movs	r3, #1
 8006218:	62bb      	str	r3, [r7, #40]	; 0x28
	ledgpio.Pull = GPIO_NOPULL;
 800621a:	2300      	movs	r3, #0
 800621c:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA,&ledgpio);
 800621e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006222:	4619      	mov	r1, r3
 8006224:	481b      	ldr	r0, [pc, #108]	; (8006294 <GPIO_INIT+0xdc>)
 8006226:	f7fa fb0d 	bl	8000844 <HAL_GPIO_Init>

	ledgpio.Pin = GPIO_PIN_2;
 800622a:	2304      	movs	r3, #4
 800622c:	627b      	str	r3, [r7, #36]	; 0x24
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 800622e:	2301      	movs	r3, #1
 8006230:	62bb      	str	r3, [r7, #40]	; 0x28
	ledgpio.Pull = GPIO_NOPULL;
 8006232:	2300      	movs	r3, #0
 8006234:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOB,&ledgpio);
 8006236:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800623a:	4619      	mov	r1, r3
 800623c:	4816      	ldr	r0, [pc, #88]	; (8006298 <GPIO_INIT+0xe0>)
 800623e:	f7fa fb01 	bl	8000844 <HAL_GPIO_Init>

	ledgpio.Pin = GPIO_PIN_8;
 8006242:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006246:	627b      	str	r3, [r7, #36]	; 0x24
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 8006248:	2301      	movs	r3, #1
 800624a:	62bb      	str	r3, [r7, #40]	; 0x28
	ledgpio.Pull = GPIO_NOPULL;
 800624c:	2300      	movs	r3, #0
 800624e:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA,&ledgpio);
 8006250:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006254:	4619      	mov	r1, r3
 8006256:	480f      	ldr	r0, [pc, #60]	; (8006294 <GPIO_INIT+0xdc>)
 8006258:	f7fa faf4 	bl	8000844 <HAL_GPIO_Init>

	buttongpio.Pin = GPIO_PIN_13;
 800625c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006260:	613b      	str	r3, [r7, #16]
	buttongpio.Mode = GPIO_MODE_IT_FALLING;
 8006262:	4b0e      	ldr	r3, [pc, #56]	; (800629c <GPIO_INIT+0xe4>)
 8006264:	617b      	str	r3, [r7, #20]
	buttongpio.Pull = GPIO_NOPULL;
 8006266:	2300      	movs	r3, #0
 8006268:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOC,&buttongpio);
 800626a:	f107 0310 	add.w	r3, r7, #16
 800626e:	4619      	mov	r1, r3
 8006270:	480b      	ldr	r0, [pc, #44]	; (80062a0 <GPIO_INIT+0xe8>)
 8006272:	f7fa fae7 	bl	8000844 <HAL_GPIO_Init>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn,10,0);
 8006276:	2200      	movs	r2, #0
 8006278:	210a      	movs	r1, #10
 800627a:	2028      	movs	r0, #40	; 0x28
 800627c:	f7fa fa96 	bl	80007ac <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006280:	2028      	movs	r0, #40	; 0x28
 8006282:	f7fa faaf 	bl	80007e4 <HAL_NVIC_EnableIRQ>


}
 8006286:	bf00      	nop
 8006288:	3738      	adds	r7, #56	; 0x38
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop
 8006290:	40023800 	.word	0x40023800
 8006294:	40020000 	.word	0x40020000
 8006298:	40020400 	.word	0x40020400
 800629c:	10210000 	.word	0x10210000
 80062a0:	40020800 	.word	0x40020800

080062a4 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b08c      	sub	sp, #48	; 0x30
 80062a8:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80062aa:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80062ae:	f7fa fc75 	bl	8000b9c <HAL_GPIO_EXTI_IRQHandler>
	HAL_UART_Receive(&huart2, (uint8_t*)msg, 15, HAL_MAX_DELAY);
 80062b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80062b6:	220f      	movs	r2, #15
 80062b8:	498f      	ldr	r1, [pc, #572]	; (80064f8 <EXTI15_10_IRQHandler+0x254>)
 80062ba:	4890      	ldr	r0, [pc, #576]	; (80064fc <EXTI15_10_IRQHandler+0x258>)
 80062bc:	f7fb f826 	bl	800130c <HAL_UART_Receive>

	Decode_CMD(msg);
 80062c0:	488d      	ldr	r0, [pc, #564]	; (80064f8 <EXTI15_10_IRQHandler+0x254>)
 80062c2:	f000 f93d 	bl	8006540 <Decode_CMD>
	 printc("Relay is %d, status is %s, time is %d \r\n", info.relay_no, info.status,info.tim);
 80062c6:	4b8e      	ldr	r3, [pc, #568]	; (8006500 <EXTI15_10_IRQHandler+0x25c>)
 80062c8:	6819      	ldr	r1, [r3, #0]
 80062ca:	4b8d      	ldr	r3, [pc, #564]	; (8006500 <EXTI15_10_IRQHandler+0x25c>)
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	4a8d      	ldr	r2, [pc, #564]	; (8006504 <EXTI15_10_IRQHandler+0x260>)
 80062d0:	488d      	ldr	r0, [pc, #564]	; (8006508 <EXTI15_10_IRQHandler+0x264>)
 80062d2:	f7ff ff4b 	bl	800616c <printc>

	if(info.relay_no ==1 )
 80062d6:	4b8a      	ldr	r3, [pc, #552]	; (8006500 <EXTI15_10_IRQHandler+0x25c>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d112      	bne.n	8006304 <EXTI15_10_IRQHandler+0x60>
	{
		BaseType_t checkforresume;
		checkforresume = xTaskResumeFromISR(task1handle);
 80062de:	4b8b      	ldr	r3, [pc, #556]	; (800650c <EXTI15_10_IRQHandler+0x268>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4618      	mov	r0, r3
 80062e4:	f7fc ff5a 	bl	800319c <xTaskResumeFromISR>
 80062e8:	6038      	str	r0, [r7, #0]
		portYIELD_FROM_ISR(checkforresume);
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	f000 80ff 	beq.w	80064f0 <EXTI15_10_IRQHandler+0x24c>
 80062f2:	4b87      	ldr	r3, [pc, #540]	; (8006510 <EXTI15_10_IRQHandler+0x26c>)
 80062f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062f8:	601a      	str	r2, [r3, #0]
 80062fa:	f3bf 8f4f 	dsb	sy
 80062fe:	f3bf 8f6f 	isb	sy
		BaseType_t checkforresume;
		checkforresume = xTaskResumeFromISR(task12handle);
		portYIELD_FROM_ISR(checkforresume);
	}

}
 8006302:	e0f5      	b.n	80064f0 <EXTI15_10_IRQHandler+0x24c>
	else if(info.relay_no ==2 )
 8006304:	4b7e      	ldr	r3, [pc, #504]	; (8006500 <EXTI15_10_IRQHandler+0x25c>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	2b02      	cmp	r3, #2
 800630a:	d112      	bne.n	8006332 <EXTI15_10_IRQHandler+0x8e>
		checkforresume = xTaskResumeFromISR(task2handle);
 800630c:	4b81      	ldr	r3, [pc, #516]	; (8006514 <EXTI15_10_IRQHandler+0x270>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4618      	mov	r0, r3
 8006312:	f7fc ff43 	bl	800319c <xTaskResumeFromISR>
 8006316:	6078      	str	r0, [r7, #4]
		portYIELD_FROM_ISR(checkforresume);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2b00      	cmp	r3, #0
 800631c:	f000 80e8 	beq.w	80064f0 <EXTI15_10_IRQHandler+0x24c>
 8006320:	4b7b      	ldr	r3, [pc, #492]	; (8006510 <EXTI15_10_IRQHandler+0x26c>)
 8006322:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006326:	601a      	str	r2, [r3, #0]
 8006328:	f3bf 8f4f 	dsb	sy
 800632c:	f3bf 8f6f 	isb	sy
}
 8006330:	e0de      	b.n	80064f0 <EXTI15_10_IRQHandler+0x24c>
	else if(info.relay_no ==3 )
 8006332:	4b73      	ldr	r3, [pc, #460]	; (8006500 <EXTI15_10_IRQHandler+0x25c>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	2b03      	cmp	r3, #3
 8006338:	d112      	bne.n	8006360 <EXTI15_10_IRQHandler+0xbc>
		checkforresume = xTaskResumeFromISR(task3handle);
 800633a:	4b77      	ldr	r3, [pc, #476]	; (8006518 <EXTI15_10_IRQHandler+0x274>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4618      	mov	r0, r3
 8006340:	f7fc ff2c 	bl	800319c <xTaskResumeFromISR>
 8006344:	60b8      	str	r0, [r7, #8]
		portYIELD_FROM_ISR(checkforresume);
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	2b00      	cmp	r3, #0
 800634a:	f000 80d1 	beq.w	80064f0 <EXTI15_10_IRQHandler+0x24c>
 800634e:	4b70      	ldr	r3, [pc, #448]	; (8006510 <EXTI15_10_IRQHandler+0x26c>)
 8006350:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006354:	601a      	str	r2, [r3, #0]
 8006356:	f3bf 8f4f 	dsb	sy
 800635a:	f3bf 8f6f 	isb	sy
}
 800635e:	e0c7      	b.n	80064f0 <EXTI15_10_IRQHandler+0x24c>
	else if(info.relay_no ==4 )
 8006360:	4b67      	ldr	r3, [pc, #412]	; (8006500 <EXTI15_10_IRQHandler+0x25c>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2b04      	cmp	r3, #4
 8006366:	d112      	bne.n	800638e <EXTI15_10_IRQHandler+0xea>
		checkforresume = xTaskResumeFromISR(task4handle);
 8006368:	4b6c      	ldr	r3, [pc, #432]	; (800651c <EXTI15_10_IRQHandler+0x278>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4618      	mov	r0, r3
 800636e:	f7fc ff15 	bl	800319c <xTaskResumeFromISR>
 8006372:	60f8      	str	r0, [r7, #12]
		portYIELD_FROM_ISR(checkforresume);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2b00      	cmp	r3, #0
 8006378:	f000 80ba 	beq.w	80064f0 <EXTI15_10_IRQHandler+0x24c>
 800637c:	4b64      	ldr	r3, [pc, #400]	; (8006510 <EXTI15_10_IRQHandler+0x26c>)
 800637e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006382:	601a      	str	r2, [r3, #0]
 8006384:	f3bf 8f4f 	dsb	sy
 8006388:	f3bf 8f6f 	isb	sy
}
 800638c:	e0b0      	b.n	80064f0 <EXTI15_10_IRQHandler+0x24c>
	else if(info.relay_no ==5 )
 800638e:	4b5c      	ldr	r3, [pc, #368]	; (8006500 <EXTI15_10_IRQHandler+0x25c>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	2b05      	cmp	r3, #5
 8006394:	d112      	bne.n	80063bc <EXTI15_10_IRQHandler+0x118>
		checkforresume = xTaskResumeFromISR(task5handle);
 8006396:	4b62      	ldr	r3, [pc, #392]	; (8006520 <EXTI15_10_IRQHandler+0x27c>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4618      	mov	r0, r3
 800639c:	f7fc fefe 	bl	800319c <xTaskResumeFromISR>
 80063a0:	6138      	str	r0, [r7, #16]
		portYIELD_FROM_ISR(checkforresume);
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	f000 80a3 	beq.w	80064f0 <EXTI15_10_IRQHandler+0x24c>
 80063aa:	4b59      	ldr	r3, [pc, #356]	; (8006510 <EXTI15_10_IRQHandler+0x26c>)
 80063ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063b0:	601a      	str	r2, [r3, #0]
 80063b2:	f3bf 8f4f 	dsb	sy
 80063b6:	f3bf 8f6f 	isb	sy
}
 80063ba:	e099      	b.n	80064f0 <EXTI15_10_IRQHandler+0x24c>
	else if(info.relay_no ==6 )
 80063bc:	4b50      	ldr	r3, [pc, #320]	; (8006500 <EXTI15_10_IRQHandler+0x25c>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	2b06      	cmp	r3, #6
 80063c2:	d112      	bne.n	80063ea <EXTI15_10_IRQHandler+0x146>
		checkforresume = xTaskResumeFromISR(task6handle);
 80063c4:	4b57      	ldr	r3, [pc, #348]	; (8006524 <EXTI15_10_IRQHandler+0x280>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4618      	mov	r0, r3
 80063ca:	f7fc fee7 	bl	800319c <xTaskResumeFromISR>
 80063ce:	6178      	str	r0, [r7, #20]
		portYIELD_FROM_ISR(checkforresume);
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	f000 808c 	beq.w	80064f0 <EXTI15_10_IRQHandler+0x24c>
 80063d8:	4b4d      	ldr	r3, [pc, #308]	; (8006510 <EXTI15_10_IRQHandler+0x26c>)
 80063da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063de:	601a      	str	r2, [r3, #0]
 80063e0:	f3bf 8f4f 	dsb	sy
 80063e4:	f3bf 8f6f 	isb	sy
}
 80063e8:	e082      	b.n	80064f0 <EXTI15_10_IRQHandler+0x24c>
	else if(info.relay_no ==7 )
 80063ea:	4b45      	ldr	r3, [pc, #276]	; (8006500 <EXTI15_10_IRQHandler+0x25c>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	2b07      	cmp	r3, #7
 80063f0:	d111      	bne.n	8006416 <EXTI15_10_IRQHandler+0x172>
		checkforresume = xTaskResumeFromISR(task7handle);
 80063f2:	4b4d      	ldr	r3, [pc, #308]	; (8006528 <EXTI15_10_IRQHandler+0x284>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4618      	mov	r0, r3
 80063f8:	f7fc fed0 	bl	800319c <xTaskResumeFromISR>
 80063fc:	61b8      	str	r0, [r7, #24]
		portYIELD_FROM_ISR(checkforresume);
 80063fe:	69bb      	ldr	r3, [r7, #24]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d075      	beq.n	80064f0 <EXTI15_10_IRQHandler+0x24c>
 8006404:	4b42      	ldr	r3, [pc, #264]	; (8006510 <EXTI15_10_IRQHandler+0x26c>)
 8006406:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800640a:	601a      	str	r2, [r3, #0]
 800640c:	f3bf 8f4f 	dsb	sy
 8006410:	f3bf 8f6f 	isb	sy
}
 8006414:	e06c      	b.n	80064f0 <EXTI15_10_IRQHandler+0x24c>
	else if(info.relay_no ==8 )
 8006416:	4b3a      	ldr	r3, [pc, #232]	; (8006500 <EXTI15_10_IRQHandler+0x25c>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2b08      	cmp	r3, #8
 800641c:	d111      	bne.n	8006442 <EXTI15_10_IRQHandler+0x19e>
		checkforresume = xTaskResumeFromISR(task8handle);
 800641e:	4b43      	ldr	r3, [pc, #268]	; (800652c <EXTI15_10_IRQHandler+0x288>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4618      	mov	r0, r3
 8006424:	f7fc feba 	bl	800319c <xTaskResumeFromISR>
 8006428:	61f8      	str	r0, [r7, #28]
		portYIELD_FROM_ISR(checkforresume);
 800642a:	69fb      	ldr	r3, [r7, #28]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d05f      	beq.n	80064f0 <EXTI15_10_IRQHandler+0x24c>
 8006430:	4b37      	ldr	r3, [pc, #220]	; (8006510 <EXTI15_10_IRQHandler+0x26c>)
 8006432:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006436:	601a      	str	r2, [r3, #0]
 8006438:	f3bf 8f4f 	dsb	sy
 800643c:	f3bf 8f6f 	isb	sy
}
 8006440:	e056      	b.n	80064f0 <EXTI15_10_IRQHandler+0x24c>
	else if(info.relay_no ==9 )
 8006442:	4b2f      	ldr	r3, [pc, #188]	; (8006500 <EXTI15_10_IRQHandler+0x25c>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	2b09      	cmp	r3, #9
 8006448:	d111      	bne.n	800646e <EXTI15_10_IRQHandler+0x1ca>
		checkforresume = xTaskResumeFromISR(task9handle);
 800644a:	4b39      	ldr	r3, [pc, #228]	; (8006530 <EXTI15_10_IRQHandler+0x28c>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4618      	mov	r0, r3
 8006450:	f7fc fea4 	bl	800319c <xTaskResumeFromISR>
 8006454:	6238      	str	r0, [r7, #32]
		portYIELD_FROM_ISR(checkforresume);
 8006456:	6a3b      	ldr	r3, [r7, #32]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d049      	beq.n	80064f0 <EXTI15_10_IRQHandler+0x24c>
 800645c:	4b2c      	ldr	r3, [pc, #176]	; (8006510 <EXTI15_10_IRQHandler+0x26c>)
 800645e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006462:	601a      	str	r2, [r3, #0]
 8006464:	f3bf 8f4f 	dsb	sy
 8006468:	f3bf 8f6f 	isb	sy
}
 800646c:	e040      	b.n	80064f0 <EXTI15_10_IRQHandler+0x24c>
	else if(info.relay_no ==10 )
 800646e:	4b24      	ldr	r3, [pc, #144]	; (8006500 <EXTI15_10_IRQHandler+0x25c>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	2b0a      	cmp	r3, #10
 8006474:	d111      	bne.n	800649a <EXTI15_10_IRQHandler+0x1f6>
		checkforresume = xTaskResumeFromISR(task10handle);
 8006476:	4b2f      	ldr	r3, [pc, #188]	; (8006534 <EXTI15_10_IRQHandler+0x290>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4618      	mov	r0, r3
 800647c:	f7fc fe8e 	bl	800319c <xTaskResumeFromISR>
 8006480:	6278      	str	r0, [r7, #36]	; 0x24
		portYIELD_FROM_ISR(checkforresume);
 8006482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006484:	2b00      	cmp	r3, #0
 8006486:	d033      	beq.n	80064f0 <EXTI15_10_IRQHandler+0x24c>
 8006488:	4b21      	ldr	r3, [pc, #132]	; (8006510 <EXTI15_10_IRQHandler+0x26c>)
 800648a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800648e:	601a      	str	r2, [r3, #0]
 8006490:	f3bf 8f4f 	dsb	sy
 8006494:	f3bf 8f6f 	isb	sy
}
 8006498:	e02a      	b.n	80064f0 <EXTI15_10_IRQHandler+0x24c>
	else if(info.relay_no ==11 )
 800649a:	4b19      	ldr	r3, [pc, #100]	; (8006500 <EXTI15_10_IRQHandler+0x25c>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	2b0b      	cmp	r3, #11
 80064a0:	d111      	bne.n	80064c6 <EXTI15_10_IRQHandler+0x222>
		checkforresume = xTaskResumeFromISR(task11handle);
 80064a2:	4b25      	ldr	r3, [pc, #148]	; (8006538 <EXTI15_10_IRQHandler+0x294>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4618      	mov	r0, r3
 80064a8:	f7fc fe78 	bl	800319c <xTaskResumeFromISR>
 80064ac:	62b8      	str	r0, [r7, #40]	; 0x28
		portYIELD_FROM_ISR(checkforresume);
 80064ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d01d      	beq.n	80064f0 <EXTI15_10_IRQHandler+0x24c>
 80064b4:	4b16      	ldr	r3, [pc, #88]	; (8006510 <EXTI15_10_IRQHandler+0x26c>)
 80064b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064ba:	601a      	str	r2, [r3, #0]
 80064bc:	f3bf 8f4f 	dsb	sy
 80064c0:	f3bf 8f6f 	isb	sy
}
 80064c4:	e014      	b.n	80064f0 <EXTI15_10_IRQHandler+0x24c>
	else if(info.relay_no ==12 )
 80064c6:	4b0e      	ldr	r3, [pc, #56]	; (8006500 <EXTI15_10_IRQHandler+0x25c>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	2b0c      	cmp	r3, #12
 80064cc:	d110      	bne.n	80064f0 <EXTI15_10_IRQHandler+0x24c>
		checkforresume = xTaskResumeFromISR(task12handle);
 80064ce:	4b1b      	ldr	r3, [pc, #108]	; (800653c <EXTI15_10_IRQHandler+0x298>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4618      	mov	r0, r3
 80064d4:	f7fc fe62 	bl	800319c <xTaskResumeFromISR>
 80064d8:	62f8      	str	r0, [r7, #44]	; 0x2c
		portYIELD_FROM_ISR(checkforresume);
 80064da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d007      	beq.n	80064f0 <EXTI15_10_IRQHandler+0x24c>
 80064e0:	4b0b      	ldr	r3, [pc, #44]	; (8006510 <EXTI15_10_IRQHandler+0x26c>)
 80064e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064e6:	601a      	str	r2, [r3, #0]
 80064e8:	f3bf 8f4f 	dsb	sy
 80064ec:	f3bf 8f6f 	isb	sy
}
 80064f0:	bf00      	nop
 80064f2:	3730      	adds	r7, #48	; 0x30
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}
 80064f8:	20004764 	.word	0x20004764
 80064fc:	200047b8 	.word	0x200047b8
 8006500:	20004738 	.word	0x20004738
 8006504:	2000473c 	.word	0x2000473c
 8006508:	08007fc4 	.word	0x08007fc4
 800650c:	20004750 	.word	0x20004750
 8006510:	e000ed04 	.word	0xe000ed04
 8006514:	200047a8 	.word	0x200047a8
 8006518:	200047f8 	.word	0x200047f8
 800651c:	200047a4 	.word	0x200047a4
 8006520:	20004748 	.word	0x20004748
 8006524:	200047b4 	.word	0x200047b4
 8006528:	200047b0 	.word	0x200047b0
 800652c:	2000475c 	.word	0x2000475c
 8006530:	20004754 	.word	0x20004754
 8006534:	20004760 	.word	0x20004760
 8006538:	2000474c 	.word	0x2000474c
 800653c:	200047fc 	.word	0x200047fc

08006540 <Decode_CMD>:

void Decode_CMD(char *msg) {
 8006540:	b580      	push	{r7, lr}
 8006542:	b09e      	sub	sp, #120	; 0x78
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]

	char msg_read[10][10];
	uint32_t i = 0;
 8006548:	2300      	movs	r3, #0
 800654a:	677b      	str	r3, [r7, #116]	; 0x74

	char *token = strtok(msg, "SR().,\r\n ");
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4920      	ldr	r1, [pc, #128]	; (80065d0 <Decode_CMD+0x90>)
 8006550:	4618      	mov	r0, r3
 8006552:	f000 fbad 	bl	8006cb0 <strtok>
 8006556:	6738      	str	r0, [r7, #112]	; 0x70
	while (token != NULL) {
 8006558:	e013      	b.n	8006582 <Decode_CMD+0x42>
		strcpy(msg_read[i], token);
 800655a:	f107 010c 	add.w	r1, r7, #12
 800655e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006560:	4613      	mov	r3, r2
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	4413      	add	r3, r2
 8006566:	005b      	lsls	r3, r3, #1
 8006568:	440b      	add	r3, r1
 800656a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800656c:	4618      	mov	r0, r3
 800656e:	f000 fb97 	bl	8006ca0 <strcpy>
		token = strtok(NULL, "SR().,\r\n ");
 8006572:	4917      	ldr	r1, [pc, #92]	; (80065d0 <Decode_CMD+0x90>)
 8006574:	2000      	movs	r0, #0
 8006576:	f000 fb9b 	bl	8006cb0 <strtok>
 800657a:	6738      	str	r0, [r7, #112]	; 0x70
		i++;
 800657c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800657e:	3301      	adds	r3, #1
 8006580:	677b      	str	r3, [r7, #116]	; 0x74
	while (token != NULL) {
 8006582:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006584:	2b00      	cmp	r3, #0
 8006586:	d1e8      	bne.n	800655a <Decode_CMD+0x1a>
	}
	memset(&info,0,sizeof(info));
 8006588:	2210      	movs	r2, #16
 800658a:	2100      	movs	r1, #0
 800658c:	4811      	ldr	r0, [pc, #68]	; (80065d4 <Decode_CMD+0x94>)
 800658e:	f000 fb52 	bl	8006c36 <memset>
	sscanf(msg_read[0], "%ld", &info.relay_no);
 8006592:	f107 030c 	add.w	r3, r7, #12
 8006596:	4a0f      	ldr	r2, [pc, #60]	; (80065d4 <Decode_CMD+0x94>)
 8006598:	490f      	ldr	r1, [pc, #60]	; (80065d8 <Decode_CMD+0x98>)
 800659a:	4618      	mov	r0, r3
 800659c:	f000 fb54 	bl	8006c48 <siscanf>
	strcpy(info.status, msg_read[1]);
 80065a0:	f107 030c 	add.w	r3, r7, #12
 80065a4:	330a      	adds	r3, #10
 80065a6:	4619      	mov	r1, r3
 80065a8:	480c      	ldr	r0, [pc, #48]	; (80065dc <Decode_CMD+0x9c>)
 80065aa:	f000 fb79 	bl	8006ca0 <strcpy>
	sscanf(msg_read[2], "%ld", &info.tim);
 80065ae:	f107 030c 	add.w	r3, r7, #12
 80065b2:	3314      	adds	r3, #20
 80065b4:	4a0a      	ldr	r2, [pc, #40]	; (80065e0 <Decode_CMD+0xa0>)
 80065b6:	4908      	ldr	r1, [pc, #32]	; (80065d8 <Decode_CMD+0x98>)
 80065b8:	4618      	mov	r0, r3
 80065ba:	f000 fb45 	bl	8006c48 <siscanf>
	info.count =0;
 80065be:	4b05      	ldr	r3, [pc, #20]	; (80065d4 <Decode_CMD+0x94>)
 80065c0:	2200      	movs	r2, #0
 80065c2:	60da      	str	r2, [r3, #12]
	memset(&msg,0,sizeof(msg));
 80065c4:	2300      	movs	r3, #0
 80065c6:	607b      	str	r3, [r7, #4]
}
 80065c8:	bf00      	nop
 80065ca:	3778      	adds	r7, #120	; 0x78
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}
 80065d0:	08007ff0 	.word	0x08007ff0
 80065d4:	20004738 	.word	0x20004738
 80065d8:	08007ffc 	.word	0x08007ffc
 80065dc:	2000473c 	.word	0x2000473c
 80065e0:	20004740 	.word	0x20004740

080065e4 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart2);
 80065e8:	4802      	ldr	r0, [pc, #8]	; (80065f4 <USART2_IRQHandler+0x10>)
 80065ea:	f7fa ff8b 	bl	8001504 <HAL_UART_IRQHandler>
//	HAL_UART_Receive(&huart2, (uint8_t*)msg, 14, HAL_MAX_DELAY);
}
 80065ee:	bf00      	nop
 80065f0:	bd80      	pop	{r7, pc}
 80065f2:	bf00      	nop
 80065f4:	200047b8 	.word	0x200047b8

080065f8 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b08e      	sub	sp, #56	; 0x38
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]

	if(bit == '\r')
 8006600:	4ba5      	ldr	r3, [pc, #660]	; (8006898 <HAL_UART_RxCpltCallback+0x2a0>)
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	2b0d      	cmp	r3, #13
 8006606:	f040 813a 	bne.w	800687e <HAL_UART_RxCpltCallback+0x286>
		 {
			 Received = TRUE;
 800660a:	4ba4      	ldr	r3, [pc, #656]	; (800689c <HAL_UART_RxCpltCallback+0x2a4>)
 800660c:	2201      	movs	r2, #1
 800660e:	701a      	strb	r2, [r3, #0]
			 msg[info.count++]='\r';
 8006610:	4ba3      	ldr	r3, [pc, #652]	; (80068a0 <HAL_UART_RxCpltCallback+0x2a8>)
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	1c5a      	adds	r2, r3, #1
 8006616:	49a2      	ldr	r1, [pc, #648]	; (80068a0 <HAL_UART_RxCpltCallback+0x2a8>)
 8006618:	60ca      	str	r2, [r1, #12]
 800661a:	4aa2      	ldr	r2, [pc, #648]	; (80068a4 <HAL_UART_RxCpltCallback+0x2ac>)
 800661c:	210d      	movs	r1, #13
 800661e:	54d1      	strb	r1, [r2, r3]
			 printc("%s",msg);
 8006620:	49a0      	ldr	r1, [pc, #640]	; (80068a4 <HAL_UART_RxCpltCallback+0x2ac>)
 8006622:	48a1      	ldr	r0, [pc, #644]	; (80068a8 <HAL_UART_RxCpltCallback+0x2b0>)
 8006624:	f7ff fda2 	bl	800616c <printc>

			 Decode_CMD(msg);
 8006628:	489e      	ldr	r0, [pc, #632]	; (80068a4 <HAL_UART_RxCpltCallback+0x2ac>)
 800662a:	f7ff ff89 	bl	8006540 <Decode_CMD>
			 printc("Relay is %d, status is %s, time is %d \r\n", info.relay_no, info.status,info.tim);
 800662e:	4b9c      	ldr	r3, [pc, #624]	; (80068a0 <HAL_UART_RxCpltCallback+0x2a8>)
 8006630:	6819      	ldr	r1, [r3, #0]
 8006632:	4b9b      	ldr	r3, [pc, #620]	; (80068a0 <HAL_UART_RxCpltCallback+0x2a8>)
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	4a9d      	ldr	r2, [pc, #628]	; (80068ac <HAL_UART_RxCpltCallback+0x2b4>)
 8006638:	489d      	ldr	r0, [pc, #628]	; (80068b0 <HAL_UART_RxCpltCallback+0x2b8>)
 800663a:	f7ff fd97 	bl	800616c <printc>
			 printc("Command:~$ ");
 800663e:	489d      	ldr	r0, [pc, #628]	; (80068b4 <HAL_UART_RxCpltCallback+0x2bc>)
 8006640:	f7ff fd94 	bl	800616c <printc>
			 if(info.relay_no ==1 )
 8006644:	4b96      	ldr	r3, [pc, #600]	; (80068a0 <HAL_UART_RxCpltCallback+0x2a8>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	2b01      	cmp	r3, #1
 800664a:	d112      	bne.n	8006672 <HAL_UART_RxCpltCallback+0x7a>
			 	{
			 		BaseType_t checkforresume;
			 		checkforresume = xTaskResumeFromISR(task1handle);
 800664c:	4b9a      	ldr	r3, [pc, #616]	; (80068b8 <HAL_UART_RxCpltCallback+0x2c0>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4618      	mov	r0, r3
 8006652:	f7fc fda3 	bl	800319c <xTaskResumeFromISR>
 8006656:	60b8      	str	r0, [r7, #8]
			 		portYIELD_FROM_ISR(checkforresume);
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	2b00      	cmp	r3, #0
 800665c:	f000 8103 	beq.w	8006866 <HAL_UART_RxCpltCallback+0x26e>
 8006660:	4b96      	ldr	r3, [pc, #600]	; (80068bc <HAL_UART_RxCpltCallback+0x2c4>)
 8006662:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006666:	601a      	str	r2, [r3, #0]
 8006668:	f3bf 8f4f 	dsb	sy
 800666c:	f3bf 8f6f 	isb	sy
 8006670:	e0f9      	b.n	8006866 <HAL_UART_RxCpltCallback+0x26e>
			 	}
			 	else if(info.relay_no ==2 )
 8006672:	4b8b      	ldr	r3, [pc, #556]	; (80068a0 <HAL_UART_RxCpltCallback+0x2a8>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	2b02      	cmp	r3, #2
 8006678:	d112      	bne.n	80066a0 <HAL_UART_RxCpltCallback+0xa8>
			 	{
			 		BaseType_t checkforresume;
			 		checkforresume = xTaskResumeFromISR(task2handle);
 800667a:	4b91      	ldr	r3, [pc, #580]	; (80068c0 <HAL_UART_RxCpltCallback+0x2c8>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4618      	mov	r0, r3
 8006680:	f7fc fd8c 	bl	800319c <xTaskResumeFromISR>
 8006684:	60f8      	str	r0, [r7, #12]
			 		portYIELD_FROM_ISR(checkforresume);
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2b00      	cmp	r3, #0
 800668a:	f000 80ec 	beq.w	8006866 <HAL_UART_RxCpltCallback+0x26e>
 800668e:	4b8b      	ldr	r3, [pc, #556]	; (80068bc <HAL_UART_RxCpltCallback+0x2c4>)
 8006690:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006694:	601a      	str	r2, [r3, #0]
 8006696:	f3bf 8f4f 	dsb	sy
 800669a:	f3bf 8f6f 	isb	sy
 800669e:	e0e2      	b.n	8006866 <HAL_UART_RxCpltCallback+0x26e>
			 	}
			 	else if(info.relay_no ==3 )
 80066a0:	4b7f      	ldr	r3, [pc, #508]	; (80068a0 <HAL_UART_RxCpltCallback+0x2a8>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	2b03      	cmp	r3, #3
 80066a6:	d112      	bne.n	80066ce <HAL_UART_RxCpltCallback+0xd6>
			 	{
			 		BaseType_t checkforresume;
			 		checkforresume = xTaskResumeFromISR(task3handle);
 80066a8:	4b86      	ldr	r3, [pc, #536]	; (80068c4 <HAL_UART_RxCpltCallback+0x2cc>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4618      	mov	r0, r3
 80066ae:	f7fc fd75 	bl	800319c <xTaskResumeFromISR>
 80066b2:	6138      	str	r0, [r7, #16]
			 		portYIELD_FROM_ISR(checkforresume);
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	f000 80d5 	beq.w	8006866 <HAL_UART_RxCpltCallback+0x26e>
 80066bc:	4b7f      	ldr	r3, [pc, #508]	; (80068bc <HAL_UART_RxCpltCallback+0x2c4>)
 80066be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066c2:	601a      	str	r2, [r3, #0]
 80066c4:	f3bf 8f4f 	dsb	sy
 80066c8:	f3bf 8f6f 	isb	sy
 80066cc:	e0cb      	b.n	8006866 <HAL_UART_RxCpltCallback+0x26e>
			 	}
			 	else if(info.relay_no ==4 )
 80066ce:	4b74      	ldr	r3, [pc, #464]	; (80068a0 <HAL_UART_RxCpltCallback+0x2a8>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	2b04      	cmp	r3, #4
 80066d4:	d112      	bne.n	80066fc <HAL_UART_RxCpltCallback+0x104>
			 	{
			 		BaseType_t checkforresume;
			 		checkforresume = xTaskResumeFromISR(task4handle);
 80066d6:	4b7c      	ldr	r3, [pc, #496]	; (80068c8 <HAL_UART_RxCpltCallback+0x2d0>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4618      	mov	r0, r3
 80066dc:	f7fc fd5e 	bl	800319c <xTaskResumeFromISR>
 80066e0:	6178      	str	r0, [r7, #20]
			 		portYIELD_FROM_ISR(checkforresume);
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	f000 80be 	beq.w	8006866 <HAL_UART_RxCpltCallback+0x26e>
 80066ea:	4b74      	ldr	r3, [pc, #464]	; (80068bc <HAL_UART_RxCpltCallback+0x2c4>)
 80066ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066f0:	601a      	str	r2, [r3, #0]
 80066f2:	f3bf 8f4f 	dsb	sy
 80066f6:	f3bf 8f6f 	isb	sy
 80066fa:	e0b4      	b.n	8006866 <HAL_UART_RxCpltCallback+0x26e>
			 	}
			 	else if(info.relay_no ==5 )
 80066fc:	4b68      	ldr	r3, [pc, #416]	; (80068a0 <HAL_UART_RxCpltCallback+0x2a8>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	2b05      	cmp	r3, #5
 8006702:	d112      	bne.n	800672a <HAL_UART_RxCpltCallback+0x132>
			 	{
			 		BaseType_t checkforresume;
			 		checkforresume = xTaskResumeFromISR(task5handle);
 8006704:	4b71      	ldr	r3, [pc, #452]	; (80068cc <HAL_UART_RxCpltCallback+0x2d4>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4618      	mov	r0, r3
 800670a:	f7fc fd47 	bl	800319c <xTaskResumeFromISR>
 800670e:	61b8      	str	r0, [r7, #24]
			 		portYIELD_FROM_ISR(checkforresume);
 8006710:	69bb      	ldr	r3, [r7, #24]
 8006712:	2b00      	cmp	r3, #0
 8006714:	f000 80a7 	beq.w	8006866 <HAL_UART_RxCpltCallback+0x26e>
 8006718:	4b68      	ldr	r3, [pc, #416]	; (80068bc <HAL_UART_RxCpltCallback+0x2c4>)
 800671a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800671e:	601a      	str	r2, [r3, #0]
 8006720:	f3bf 8f4f 	dsb	sy
 8006724:	f3bf 8f6f 	isb	sy
 8006728:	e09d      	b.n	8006866 <HAL_UART_RxCpltCallback+0x26e>
			 	}
			 	else if(info.relay_no ==6 )
 800672a:	4b5d      	ldr	r3, [pc, #372]	; (80068a0 <HAL_UART_RxCpltCallback+0x2a8>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	2b06      	cmp	r3, #6
 8006730:	d112      	bne.n	8006758 <HAL_UART_RxCpltCallback+0x160>
			 	{
			 		BaseType_t checkforresume;
			 		checkforresume = xTaskResumeFromISR(task6handle);
 8006732:	4b67      	ldr	r3, [pc, #412]	; (80068d0 <HAL_UART_RxCpltCallback+0x2d8>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4618      	mov	r0, r3
 8006738:	f7fc fd30 	bl	800319c <xTaskResumeFromISR>
 800673c:	61f8      	str	r0, [r7, #28]
			 		portYIELD_FROM_ISR(checkforresume);
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	2b00      	cmp	r3, #0
 8006742:	f000 8090 	beq.w	8006866 <HAL_UART_RxCpltCallback+0x26e>
 8006746:	4b5d      	ldr	r3, [pc, #372]	; (80068bc <HAL_UART_RxCpltCallback+0x2c4>)
 8006748:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800674c:	601a      	str	r2, [r3, #0]
 800674e:	f3bf 8f4f 	dsb	sy
 8006752:	f3bf 8f6f 	isb	sy
 8006756:	e086      	b.n	8006866 <HAL_UART_RxCpltCallback+0x26e>
			 	}
			 	else if(info.relay_no ==7 )
 8006758:	4b51      	ldr	r3, [pc, #324]	; (80068a0 <HAL_UART_RxCpltCallback+0x2a8>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	2b07      	cmp	r3, #7
 800675e:	d111      	bne.n	8006784 <HAL_UART_RxCpltCallback+0x18c>
			 	{
			 		BaseType_t checkforresume;
			 		checkforresume = xTaskResumeFromISR(task7handle);
 8006760:	4b5c      	ldr	r3, [pc, #368]	; (80068d4 <HAL_UART_RxCpltCallback+0x2dc>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4618      	mov	r0, r3
 8006766:	f7fc fd19 	bl	800319c <xTaskResumeFromISR>
 800676a:	6238      	str	r0, [r7, #32]
			 		portYIELD_FROM_ISR(checkforresume);
 800676c:	6a3b      	ldr	r3, [r7, #32]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d079      	beq.n	8006866 <HAL_UART_RxCpltCallback+0x26e>
 8006772:	4b52      	ldr	r3, [pc, #328]	; (80068bc <HAL_UART_RxCpltCallback+0x2c4>)
 8006774:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006778:	601a      	str	r2, [r3, #0]
 800677a:	f3bf 8f4f 	dsb	sy
 800677e:	f3bf 8f6f 	isb	sy
 8006782:	e070      	b.n	8006866 <HAL_UART_RxCpltCallback+0x26e>
			 	}
			 	else if(info.relay_no ==8 )
 8006784:	4b46      	ldr	r3, [pc, #280]	; (80068a0 <HAL_UART_RxCpltCallback+0x2a8>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	2b08      	cmp	r3, #8
 800678a:	d111      	bne.n	80067b0 <HAL_UART_RxCpltCallback+0x1b8>
			 	{
			 		BaseType_t checkforresume;
			 		checkforresume = xTaskResumeFromISR(task8handle);
 800678c:	4b52      	ldr	r3, [pc, #328]	; (80068d8 <HAL_UART_RxCpltCallback+0x2e0>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4618      	mov	r0, r3
 8006792:	f7fc fd03 	bl	800319c <xTaskResumeFromISR>
 8006796:	6278      	str	r0, [r7, #36]	; 0x24
			 		portYIELD_FROM_ISR(checkforresume);
 8006798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679a:	2b00      	cmp	r3, #0
 800679c:	d063      	beq.n	8006866 <HAL_UART_RxCpltCallback+0x26e>
 800679e:	4b47      	ldr	r3, [pc, #284]	; (80068bc <HAL_UART_RxCpltCallback+0x2c4>)
 80067a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067a4:	601a      	str	r2, [r3, #0]
 80067a6:	f3bf 8f4f 	dsb	sy
 80067aa:	f3bf 8f6f 	isb	sy
 80067ae:	e05a      	b.n	8006866 <HAL_UART_RxCpltCallback+0x26e>
			 	}
			 	else if(info.relay_no ==9 )
 80067b0:	4b3b      	ldr	r3, [pc, #236]	; (80068a0 <HAL_UART_RxCpltCallback+0x2a8>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	2b09      	cmp	r3, #9
 80067b6:	d111      	bne.n	80067dc <HAL_UART_RxCpltCallback+0x1e4>
			 	{
			 		BaseType_t checkforresume;
			 		checkforresume = xTaskResumeFromISR(task9handle);
 80067b8:	4b48      	ldr	r3, [pc, #288]	; (80068dc <HAL_UART_RxCpltCallback+0x2e4>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4618      	mov	r0, r3
 80067be:	f7fc fced 	bl	800319c <xTaskResumeFromISR>
 80067c2:	62b8      	str	r0, [r7, #40]	; 0x28
			 		portYIELD_FROM_ISR(checkforresume);
 80067c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d04d      	beq.n	8006866 <HAL_UART_RxCpltCallback+0x26e>
 80067ca:	4b3c      	ldr	r3, [pc, #240]	; (80068bc <HAL_UART_RxCpltCallback+0x2c4>)
 80067cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067d0:	601a      	str	r2, [r3, #0]
 80067d2:	f3bf 8f4f 	dsb	sy
 80067d6:	f3bf 8f6f 	isb	sy
 80067da:	e044      	b.n	8006866 <HAL_UART_RxCpltCallback+0x26e>
			 	}
			 	else if(info.relay_no ==10 )
 80067dc:	4b30      	ldr	r3, [pc, #192]	; (80068a0 <HAL_UART_RxCpltCallback+0x2a8>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	2b0a      	cmp	r3, #10
 80067e2:	d111      	bne.n	8006808 <HAL_UART_RxCpltCallback+0x210>
			 	{
			 		BaseType_t checkforresume;
			 		checkforresume = xTaskResumeFromISR(task10handle);
 80067e4:	4b3e      	ldr	r3, [pc, #248]	; (80068e0 <HAL_UART_RxCpltCallback+0x2e8>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4618      	mov	r0, r3
 80067ea:	f7fc fcd7 	bl	800319c <xTaskResumeFromISR>
 80067ee:	62f8      	str	r0, [r7, #44]	; 0x2c
			 		portYIELD_FROM_ISR(checkforresume);
 80067f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d037      	beq.n	8006866 <HAL_UART_RxCpltCallback+0x26e>
 80067f6:	4b31      	ldr	r3, [pc, #196]	; (80068bc <HAL_UART_RxCpltCallback+0x2c4>)
 80067f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067fc:	601a      	str	r2, [r3, #0]
 80067fe:	f3bf 8f4f 	dsb	sy
 8006802:	f3bf 8f6f 	isb	sy
 8006806:	e02e      	b.n	8006866 <HAL_UART_RxCpltCallback+0x26e>
			 	}
			 	else if(info.relay_no ==11 )
 8006808:	4b25      	ldr	r3, [pc, #148]	; (80068a0 <HAL_UART_RxCpltCallback+0x2a8>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	2b0b      	cmp	r3, #11
 800680e:	d111      	bne.n	8006834 <HAL_UART_RxCpltCallback+0x23c>
			 	{
			 		BaseType_t checkforresume;
			 		checkforresume = xTaskResumeFromISR(task11handle);
 8006810:	4b34      	ldr	r3, [pc, #208]	; (80068e4 <HAL_UART_RxCpltCallback+0x2ec>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4618      	mov	r0, r3
 8006816:	f7fc fcc1 	bl	800319c <xTaskResumeFromISR>
 800681a:	6338      	str	r0, [r7, #48]	; 0x30
			 		portYIELD_FROM_ISR(checkforresume);
 800681c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800681e:	2b00      	cmp	r3, #0
 8006820:	d021      	beq.n	8006866 <HAL_UART_RxCpltCallback+0x26e>
 8006822:	4b26      	ldr	r3, [pc, #152]	; (80068bc <HAL_UART_RxCpltCallback+0x2c4>)
 8006824:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006828:	601a      	str	r2, [r3, #0]
 800682a:	f3bf 8f4f 	dsb	sy
 800682e:	f3bf 8f6f 	isb	sy
 8006832:	e018      	b.n	8006866 <HAL_UART_RxCpltCallback+0x26e>
			 	}
			 	else if(info.relay_no ==12 )
 8006834:	4b1a      	ldr	r3, [pc, #104]	; (80068a0 <HAL_UART_RxCpltCallback+0x2a8>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	2b0c      	cmp	r3, #12
 800683a:	d111      	bne.n	8006860 <HAL_UART_RxCpltCallback+0x268>
			 	{
			 		BaseType_t checkforresume;
			 		checkforresume = xTaskResumeFromISR(task12handle);
 800683c:	4b2a      	ldr	r3, [pc, #168]	; (80068e8 <HAL_UART_RxCpltCallback+0x2f0>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4618      	mov	r0, r3
 8006842:	f7fc fcab 	bl	800319c <xTaskResumeFromISR>
 8006846:	6378      	str	r0, [r7, #52]	; 0x34
			 		portYIELD_FROM_ISR(checkforresume);
 8006848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800684a:	2b00      	cmp	r3, #0
 800684c:	d00b      	beq.n	8006866 <HAL_UART_RxCpltCallback+0x26e>
 800684e:	4b1b      	ldr	r3, [pc, #108]	; (80068bc <HAL_UART_RxCpltCallback+0x2c4>)
 8006850:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006854:	601a      	str	r2, [r3, #0]
 8006856:	f3bf 8f4f 	dsb	sy
 800685a:	f3bf 8f6f 	isb	sy
 800685e:	e002      	b.n	8006866 <HAL_UART_RxCpltCallback+0x26e>
			 	}
			 	else
			 	{
			 		printc("Invalid Command\r\n");
 8006860:	4822      	ldr	r0, [pc, #136]	; (80068ec <HAL_UART_RxCpltCallback+0x2f4>)
 8006862:	f7ff fc83 	bl	800616c <printc>
			 	}


			 Received = FALSE;
 8006866:	4b0d      	ldr	r3, [pc, #52]	; (800689c <HAL_UART_RxCpltCallback+0x2a4>)
 8006868:	2200      	movs	r2, #0
 800686a:	701a      	strb	r2, [r3, #0]
			 info.count = 0;
 800686c:	4b0c      	ldr	r3, [pc, #48]	; (80068a0 <HAL_UART_RxCpltCallback+0x2a8>)
 800686e:	2200      	movs	r2, #0
 8006870:	60da      	str	r2, [r3, #12]
			 memset(&msg,0,sizeof(msg));
 8006872:	2240      	movs	r2, #64	; 0x40
 8006874:	2100      	movs	r1, #0
 8006876:	480b      	ldr	r0, [pc, #44]	; (80068a4 <HAL_UART_RxCpltCallback+0x2ac>)
 8006878:	f000 f9dd 	bl	8006c36 <memset>
		 }
		 else
		 {
			 msg[info.count++] = bit;
		 }
}
 800687c:	e008      	b.n	8006890 <HAL_UART_RxCpltCallback+0x298>
			 msg[info.count++] = bit;
 800687e:	4b08      	ldr	r3, [pc, #32]	; (80068a0 <HAL_UART_RxCpltCallback+0x2a8>)
 8006880:	68db      	ldr	r3, [r3, #12]
 8006882:	1c5a      	adds	r2, r3, #1
 8006884:	4906      	ldr	r1, [pc, #24]	; (80068a0 <HAL_UART_RxCpltCallback+0x2a8>)
 8006886:	60ca      	str	r2, [r1, #12]
 8006888:	4a03      	ldr	r2, [pc, #12]	; (8006898 <HAL_UART_RxCpltCallback+0x2a0>)
 800688a:	7811      	ldrb	r1, [r2, #0]
 800688c:	4a05      	ldr	r2, [pc, #20]	; (80068a4 <HAL_UART_RxCpltCallback+0x2ac>)
 800688e:	54d1      	strb	r1, [r2, r3]
}
 8006890:	bf00      	nop
 8006892:	3738      	adds	r7, #56	; 0x38
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}
 8006898:	20004758 	.word	0x20004758
 800689c:	200046e4 	.word	0x200046e4
 80068a0:	20004738 	.word	0x20004738
 80068a4:	20004764 	.word	0x20004764
 80068a8:	08008000 	.word	0x08008000
 80068ac:	2000473c 	.word	0x2000473c
 80068b0:	08007fc4 	.word	0x08007fc4
 80068b4:	08008004 	.word	0x08008004
 80068b8:	20004750 	.word	0x20004750
 80068bc:	e000ed04 	.word	0xe000ed04
 80068c0:	200047a8 	.word	0x200047a8
 80068c4:	200047f8 	.word	0x200047f8
 80068c8:	200047a4 	.word	0x200047a4
 80068cc:	20004748 	.word	0x20004748
 80068d0:	200047b4 	.word	0x200047b4
 80068d4:	200047b0 	.word	0x200047b0
 80068d8:	2000475c 	.word	0x2000475c
 80068dc:	20004754 	.word	0x20004754
 80068e0:	20004760 	.word	0x20004760
 80068e4:	2000474c 	.word	0x2000474c
 80068e8:	200047fc 	.word	0x200047fc
 80068ec:	08008010 	.word	0x08008010

080068f0 <Error_Handler>:
void Error_Handler(void)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	af00      	add	r7, sp, #0
	printc("Error Occurred\r\n");
 80068f4:	4801      	ldr	r0, [pc, #4]	; (80068fc <Error_Handler+0xc>)
 80068f6:	f7ff fc39 	bl	800616c <printc>
	while(1);
 80068fa:	e7fe      	b.n	80068fa <Error_Handler+0xa>
 80068fc:	08008024 	.word	0x08008024

08006900 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b082      	sub	sp, #8
 8006904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006906:	2300      	movs	r3, #0
 8006908:	607b      	str	r3, [r7, #4]
 800690a:	4b12      	ldr	r3, [pc, #72]	; (8006954 <HAL_MspInit+0x54>)
 800690c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800690e:	4a11      	ldr	r2, [pc, #68]	; (8006954 <HAL_MspInit+0x54>)
 8006910:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006914:	6453      	str	r3, [r2, #68]	; 0x44
 8006916:	4b0f      	ldr	r3, [pc, #60]	; (8006954 <HAL_MspInit+0x54>)
 8006918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800691a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800691e:	607b      	str	r3, [r7, #4]
 8006920:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006922:	2300      	movs	r3, #0
 8006924:	603b      	str	r3, [r7, #0]
 8006926:	4b0b      	ldr	r3, [pc, #44]	; (8006954 <HAL_MspInit+0x54>)
 8006928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800692a:	4a0a      	ldr	r2, [pc, #40]	; (8006954 <HAL_MspInit+0x54>)
 800692c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006930:	6413      	str	r3, [r2, #64]	; 0x40
 8006932:	4b08      	ldr	r3, [pc, #32]	; (8006954 <HAL_MspInit+0x54>)
 8006934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800693a:	603b      	str	r3, [r7, #0]
 800693c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800693e:	2200      	movs	r2, #0
 8006940:	210f      	movs	r1, #15
 8006942:	f06f 0001 	mvn.w	r0, #1
 8006946:	f7f9 ff31 	bl	80007ac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800694a:	bf00      	nop
 800694c:	3708      	adds	r7, #8
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
 8006952:	bf00      	nop
 8006954:	40023800 	.word	0x40023800

08006958 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b08a      	sub	sp, #40	; 0x28
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006960:	f107 0314 	add.w	r3, r7, #20
 8006964:	2200      	movs	r2, #0
 8006966:	601a      	str	r2, [r3, #0]
 8006968:	605a      	str	r2, [r3, #4]
 800696a:	609a      	str	r2, [r3, #8]
 800696c:	60da      	str	r2, [r3, #12]
 800696e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a1d      	ldr	r2, [pc, #116]	; (80069ec <HAL_UART_MspInit+0x94>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d133      	bne.n	80069e2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800697a:	2300      	movs	r3, #0
 800697c:	613b      	str	r3, [r7, #16]
 800697e:	4b1c      	ldr	r3, [pc, #112]	; (80069f0 <HAL_UART_MspInit+0x98>)
 8006980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006982:	4a1b      	ldr	r2, [pc, #108]	; (80069f0 <HAL_UART_MspInit+0x98>)
 8006984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006988:	6413      	str	r3, [r2, #64]	; 0x40
 800698a:	4b19      	ldr	r3, [pc, #100]	; (80069f0 <HAL_UART_MspInit+0x98>)
 800698c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800698e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006992:	613b      	str	r3, [r7, #16]
 8006994:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006996:	2300      	movs	r3, #0
 8006998:	60fb      	str	r3, [r7, #12]
 800699a:	4b15      	ldr	r3, [pc, #84]	; (80069f0 <HAL_UART_MspInit+0x98>)
 800699c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800699e:	4a14      	ldr	r2, [pc, #80]	; (80069f0 <HAL_UART_MspInit+0x98>)
 80069a0:	f043 0301 	orr.w	r3, r3, #1
 80069a4:	6313      	str	r3, [r2, #48]	; 0x30
 80069a6:	4b12      	ldr	r3, [pc, #72]	; (80069f0 <HAL_UART_MspInit+0x98>)
 80069a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069aa:	f003 0301 	and.w	r3, r3, #1
 80069ae:	60fb      	str	r3, [r7, #12]
 80069b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80069b2:	230c      	movs	r3, #12
 80069b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069b6:	2302      	movs	r3, #2
 80069b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069ba:	2300      	movs	r3, #0
 80069bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80069be:	2303      	movs	r3, #3
 80069c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80069c2:	2307      	movs	r3, #7
 80069c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80069c6:	f107 0314 	add.w	r3, r7, #20
 80069ca:	4619      	mov	r1, r3
 80069cc:	4809      	ldr	r0, [pc, #36]	; (80069f4 <HAL_UART_MspInit+0x9c>)
 80069ce:	f7f9 ff39 	bl	8000844 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80069d2:	2200      	movs	r2, #0
 80069d4:	2105      	movs	r1, #5
 80069d6:	2026      	movs	r0, #38	; 0x26
 80069d8:	f7f9 fee8 	bl	80007ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80069dc:	2026      	movs	r0, #38	; 0x26
 80069de:	f7f9 ff01 	bl	80007e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80069e2:	bf00      	nop
 80069e4:	3728      	adds	r7, #40	; 0x28
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	bf00      	nop
 80069ec:	40004400 	.word	0x40004400
 80069f0:	40023800 	.word	0x40023800
 80069f4:	40020000 	.word	0x40020000

080069f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b08c      	sub	sp, #48	; 0x30
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8006a00:	2300      	movs	r3, #0
 8006a02:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8006a04:	2300      	movs	r3, #0
 8006a06:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 8006a08:	2200      	movs	r2, #0
 8006a0a:	6879      	ldr	r1, [r7, #4]
 8006a0c:	201c      	movs	r0, #28
 8006a0e:	f7f9 fecd 	bl	80007ac <HAL_NVIC_SetPriority>
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
 8006a12:	201c      	movs	r0, #28
 8006a14:	f7f9 fee6 	bl	80007e4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8006a18:	2300      	movs	r3, #0
 8006a1a:	60fb      	str	r3, [r7, #12]
 8006a1c:	4b20      	ldr	r3, [pc, #128]	; (8006aa0 <HAL_InitTick+0xa8>)
 8006a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a20:	4a1f      	ldr	r2, [pc, #124]	; (8006aa0 <HAL_InitTick+0xa8>)
 8006a22:	f043 0301 	orr.w	r3, r3, #1
 8006a26:	6413      	str	r3, [r2, #64]	; 0x40
 8006a28:	4b1d      	ldr	r3, [pc, #116]	; (8006aa0 <HAL_InitTick+0xa8>)
 8006a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a2c:	f003 0301 	and.w	r3, r3, #1
 8006a30:	60fb      	str	r3, [r7, #12]
 8006a32:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006a34:	f107 0210 	add.w	r2, r7, #16
 8006a38:	f107 0314 	add.w	r3, r7, #20
 8006a3c:	4611      	mov	r1, r2
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f7fa f904 	bl	8000c4c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8006a44:	f7fa f8da 	bl	8000bfc <HAL_RCC_GetPCLK1Freq>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	005b      	lsls	r3, r3, #1
 8006a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8006a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a50:	4a14      	ldr	r2, [pc, #80]	; (8006aa4 <HAL_InitTick+0xac>)
 8006a52:	fba2 2303 	umull	r2, r3, r2, r3
 8006a56:	0c9b      	lsrs	r3, r3, #18
 8006a58:	3b01      	subs	r3, #1
 8006a5a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8006a5c:	4b12      	ldr	r3, [pc, #72]	; (8006aa8 <HAL_InitTick+0xb0>)
 8006a5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006a62:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 8006a64:	4b10      	ldr	r3, [pc, #64]	; (8006aa8 <HAL_InitTick+0xb0>)
 8006a66:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006a6a:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8006a6c:	4a0e      	ldr	r2, [pc, #56]	; (8006aa8 <HAL_InitTick+0xb0>)
 8006a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a70:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8006a72:	4b0d      	ldr	r3, [pc, #52]	; (8006aa8 <HAL_InitTick+0xb0>)
 8006a74:	2200      	movs	r2, #0
 8006a76:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006a78:	4b0b      	ldr	r3, [pc, #44]	; (8006aa8 <HAL_InitTick+0xb0>)
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8006a7e:	480a      	ldr	r0, [pc, #40]	; (8006aa8 <HAL_InitTick+0xb0>)
 8006a80:	f7fa f916 	bl	8000cb0 <HAL_TIM_Base_Init>
 8006a84:	4603      	mov	r3, r0
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d104      	bne.n	8006a94 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8006a8a:	4807      	ldr	r0, [pc, #28]	; (8006aa8 <HAL_InitTick+0xb0>)
 8006a8c:	f7fa f945 	bl	8000d1a <HAL_TIM_Base_Start_IT>
 8006a90:	4603      	mov	r3, r0
 8006a92:	e000      	b.n	8006a96 <HAL_InitTick+0x9e>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8006a94:	2301      	movs	r3, #1
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3730      	adds	r7, #48	; 0x30
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
 8006a9e:	bf00      	nop
 8006aa0:	40023800 	.word	0x40023800
 8006aa4:	431bde83 	.word	0x431bde83
 8006aa8:	20004800 	.word	0x20004800

08006aac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006aac:	b480      	push	{r7}
 8006aae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006ab0:	bf00      	nop
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr

08006aba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006aba:	b480      	push	{r7}
 8006abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006abe:	e7fe      	b.n	8006abe <HardFault_Handler+0x4>

08006ac0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006ac4:	e7fe      	b.n	8006ac4 <MemManage_Handler+0x4>

08006ac6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006ac6:	b480      	push	{r7}
 8006ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006aca:	e7fe      	b.n	8006aca <BusFault_Handler+0x4>

08006acc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006acc:	b480      	push	{r7}
 8006ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006ad0:	e7fe      	b.n	8006ad0 <UsageFault_Handler+0x4>

08006ad2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006ad2:	b480      	push	{r7}
 8006ad4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006ad6:	bf00      	nop
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr

08006ae0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006ae4:	4802      	ldr	r0, [pc, #8]	; (8006af0 <TIM2_IRQHandler+0x10>)
 8006ae6:	f7fa f93c 	bl	8000d62 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8006aea:	bf00      	nop
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop
 8006af0:	20004800 	.word	0x20004800

08006af4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b084      	sub	sp, #16
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006afc:	4b11      	ldr	r3, [pc, #68]	; (8006b44 <_sbrk+0x50>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d102      	bne.n	8006b0a <_sbrk+0x16>
		heap_end = &end;
 8006b04:	4b0f      	ldr	r3, [pc, #60]	; (8006b44 <_sbrk+0x50>)
 8006b06:	4a10      	ldr	r2, [pc, #64]	; (8006b48 <_sbrk+0x54>)
 8006b08:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8006b0a:	4b0e      	ldr	r3, [pc, #56]	; (8006b44 <_sbrk+0x50>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8006b10:	4b0c      	ldr	r3, [pc, #48]	; (8006b44 <_sbrk+0x50>)
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	4413      	add	r3, r2
 8006b18:	466a      	mov	r2, sp
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d907      	bls.n	8006b2e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8006b1e:	f000 f855 	bl	8006bcc <__errno>
 8006b22:	4602      	mov	r2, r0
 8006b24:	230c      	movs	r3, #12
 8006b26:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8006b28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b2c:	e006      	b.n	8006b3c <_sbrk+0x48>
	}

	heap_end += incr;
 8006b2e:	4b05      	ldr	r3, [pc, #20]	; (8006b44 <_sbrk+0x50>)
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	4413      	add	r3, r2
 8006b36:	4a03      	ldr	r2, [pc, #12]	; (8006b44 <_sbrk+0x50>)
 8006b38:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3710      	adds	r7, #16
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}
 8006b44:	200046e8 	.word	0x200046e8
 8006b48:	20004848 	.word	0x20004848

08006b4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006b50:	4b08      	ldr	r3, [pc, #32]	; (8006b74 <SystemInit+0x28>)
 8006b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b56:	4a07      	ldr	r2, [pc, #28]	; (8006b74 <SystemInit+0x28>)
 8006b58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006b5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006b60:	4b04      	ldr	r3, [pc, #16]	; (8006b74 <SystemInit+0x28>)
 8006b62:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006b66:	609a      	str	r2, [r3, #8]
#endif
}
 8006b68:	bf00      	nop
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr
 8006b72:	bf00      	nop
 8006b74:	e000ed00 	.word	0xe000ed00

08006b78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006b78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006bb0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006b7c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006b7e:	e003      	b.n	8006b88 <LoopCopyDataInit>

08006b80 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006b80:	4b0c      	ldr	r3, [pc, #48]	; (8006bb4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006b82:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006b84:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006b86:	3104      	adds	r1, #4

08006b88 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006b88:	480b      	ldr	r0, [pc, #44]	; (8006bb8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006b8a:	4b0c      	ldr	r3, [pc, #48]	; (8006bbc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006b8c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006b8e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006b90:	d3f6      	bcc.n	8006b80 <CopyDataInit>
  ldr  r2, =_sbss
 8006b92:	4a0b      	ldr	r2, [pc, #44]	; (8006bc0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006b94:	e002      	b.n	8006b9c <LoopFillZerobss>

08006b96 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006b96:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006b98:	f842 3b04 	str.w	r3, [r2], #4

08006b9c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006b9c:	4b09      	ldr	r3, [pc, #36]	; (8006bc4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006b9e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006ba0:	d3f9      	bcc.n	8006b96 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006ba2:	f7ff ffd3 	bl	8006b4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006ba6:	f000 f817 	bl	8006bd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006baa:	f7ff f9d3 	bl	8005f54 <main>
  bx  lr    
 8006bae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006bb0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8006bb4:	08008218 	.word	0x08008218
  ldr  r0, =_sdata
 8006bb8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006bbc:	200001d8 	.word	0x200001d8
  ldr  r2, =_sbss
 8006bc0:	200001d8 	.word	0x200001d8
  ldr  r3, = _ebss
 8006bc4:	20004844 	.word	0x20004844

08006bc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006bc8:	e7fe      	b.n	8006bc8 <ADC_IRQHandler>
	...

08006bcc <__errno>:
 8006bcc:	4b01      	ldr	r3, [pc, #4]	; (8006bd4 <__errno+0x8>)
 8006bce:	6818      	ldr	r0, [r3, #0]
 8006bd0:	4770      	bx	lr
 8006bd2:	bf00      	nop
 8006bd4:	20000008 	.word	0x20000008

08006bd8 <__libc_init_array>:
 8006bd8:	b570      	push	{r4, r5, r6, lr}
 8006bda:	4e0d      	ldr	r6, [pc, #52]	; (8006c10 <__libc_init_array+0x38>)
 8006bdc:	4c0d      	ldr	r4, [pc, #52]	; (8006c14 <__libc_init_array+0x3c>)
 8006bde:	1ba4      	subs	r4, r4, r6
 8006be0:	10a4      	asrs	r4, r4, #2
 8006be2:	2500      	movs	r5, #0
 8006be4:	42a5      	cmp	r5, r4
 8006be6:	d109      	bne.n	8006bfc <__libc_init_array+0x24>
 8006be8:	4e0b      	ldr	r6, [pc, #44]	; (8006c18 <__libc_init_array+0x40>)
 8006bea:	4c0c      	ldr	r4, [pc, #48]	; (8006c1c <__libc_init_array+0x44>)
 8006bec:	f001 f970 	bl	8007ed0 <_init>
 8006bf0:	1ba4      	subs	r4, r4, r6
 8006bf2:	10a4      	asrs	r4, r4, #2
 8006bf4:	2500      	movs	r5, #0
 8006bf6:	42a5      	cmp	r5, r4
 8006bf8:	d105      	bne.n	8006c06 <__libc_init_array+0x2e>
 8006bfa:	bd70      	pop	{r4, r5, r6, pc}
 8006bfc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006c00:	4798      	blx	r3
 8006c02:	3501      	adds	r5, #1
 8006c04:	e7ee      	b.n	8006be4 <__libc_init_array+0xc>
 8006c06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006c0a:	4798      	blx	r3
 8006c0c:	3501      	adds	r5, #1
 8006c0e:	e7f2      	b.n	8006bf6 <__libc_init_array+0x1e>
 8006c10:	08008210 	.word	0x08008210
 8006c14:	08008210 	.word	0x08008210
 8006c18:	08008210 	.word	0x08008210
 8006c1c:	08008214 	.word	0x08008214

08006c20 <memcpy>:
 8006c20:	b510      	push	{r4, lr}
 8006c22:	1e43      	subs	r3, r0, #1
 8006c24:	440a      	add	r2, r1
 8006c26:	4291      	cmp	r1, r2
 8006c28:	d100      	bne.n	8006c2c <memcpy+0xc>
 8006c2a:	bd10      	pop	{r4, pc}
 8006c2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c30:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c34:	e7f7      	b.n	8006c26 <memcpy+0x6>

08006c36 <memset>:
 8006c36:	4402      	add	r2, r0
 8006c38:	4603      	mov	r3, r0
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d100      	bne.n	8006c40 <memset+0xa>
 8006c3e:	4770      	bx	lr
 8006c40:	f803 1b01 	strb.w	r1, [r3], #1
 8006c44:	e7f9      	b.n	8006c3a <memset+0x4>
	...

08006c48 <siscanf>:
 8006c48:	b40e      	push	{r1, r2, r3}
 8006c4a:	b530      	push	{r4, r5, lr}
 8006c4c:	b09c      	sub	sp, #112	; 0x70
 8006c4e:	ac1f      	add	r4, sp, #124	; 0x7c
 8006c50:	f44f 7201 	mov.w	r2, #516	; 0x204
 8006c54:	f854 5b04 	ldr.w	r5, [r4], #4
 8006c58:	f8ad 2014 	strh.w	r2, [sp, #20]
 8006c5c:	9002      	str	r0, [sp, #8]
 8006c5e:	9006      	str	r0, [sp, #24]
 8006c60:	f7f9 fae0 	bl	8000224 <strlen>
 8006c64:	4b0b      	ldr	r3, [pc, #44]	; (8006c94 <siscanf+0x4c>)
 8006c66:	9003      	str	r0, [sp, #12]
 8006c68:	9007      	str	r0, [sp, #28]
 8006c6a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c6c:	480a      	ldr	r0, [pc, #40]	; (8006c98 <siscanf+0x50>)
 8006c6e:	9401      	str	r4, [sp, #4]
 8006c70:	2300      	movs	r3, #0
 8006c72:	930f      	str	r3, [sp, #60]	; 0x3c
 8006c74:	9314      	str	r3, [sp, #80]	; 0x50
 8006c76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006c7a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006c7e:	462a      	mov	r2, r5
 8006c80:	4623      	mov	r3, r4
 8006c82:	a902      	add	r1, sp, #8
 8006c84:	6800      	ldr	r0, [r0, #0]
 8006c86:	f000 fae3 	bl	8007250 <__ssvfiscanf_r>
 8006c8a:	b01c      	add	sp, #112	; 0x70
 8006c8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006c90:	b003      	add	sp, #12
 8006c92:	4770      	bx	lr
 8006c94:	08006c9d 	.word	0x08006c9d
 8006c98:	20000008 	.word	0x20000008

08006c9c <__seofread>:
 8006c9c:	2000      	movs	r0, #0
 8006c9e:	4770      	bx	lr

08006ca0 <strcpy>:
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006ca6:	f803 2b01 	strb.w	r2, [r3], #1
 8006caa:	2a00      	cmp	r2, #0
 8006cac:	d1f9      	bne.n	8006ca2 <strcpy+0x2>
 8006cae:	4770      	bx	lr

08006cb0 <strtok>:
 8006cb0:	4b13      	ldr	r3, [pc, #76]	; (8006d00 <strtok+0x50>)
 8006cb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cb6:	681d      	ldr	r5, [r3, #0]
 8006cb8:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8006cba:	4606      	mov	r6, r0
 8006cbc:	460f      	mov	r7, r1
 8006cbe:	b9b4      	cbnz	r4, 8006cee <strtok+0x3e>
 8006cc0:	2050      	movs	r0, #80	; 0x50
 8006cc2:	f000 f869 	bl	8006d98 <malloc>
 8006cc6:	65a8      	str	r0, [r5, #88]	; 0x58
 8006cc8:	e9c0 4400 	strd	r4, r4, [r0]
 8006ccc:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006cd0:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8006cd4:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8006cd8:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8006cdc:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8006ce0:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8006ce4:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8006ce8:	6184      	str	r4, [r0, #24]
 8006cea:	7704      	strb	r4, [r0, #28]
 8006cec:	6244      	str	r4, [r0, #36]	; 0x24
 8006cee:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8006cf0:	4639      	mov	r1, r7
 8006cf2:	4630      	mov	r0, r6
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006cfa:	f000 b803 	b.w	8006d04 <__strtok_r>
 8006cfe:	bf00      	nop
 8006d00:	20000008 	.word	0x20000008

08006d04 <__strtok_r>:
 8006d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d06:	b918      	cbnz	r0, 8006d10 <__strtok_r+0xc>
 8006d08:	6810      	ldr	r0, [r2, #0]
 8006d0a:	b908      	cbnz	r0, 8006d10 <__strtok_r+0xc>
 8006d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d0e:	4620      	mov	r0, r4
 8006d10:	4604      	mov	r4, r0
 8006d12:	460f      	mov	r7, r1
 8006d14:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006d18:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006d1c:	b91e      	cbnz	r6, 8006d26 <__strtok_r+0x22>
 8006d1e:	b96d      	cbnz	r5, 8006d3c <__strtok_r+0x38>
 8006d20:	6015      	str	r5, [r2, #0]
 8006d22:	4628      	mov	r0, r5
 8006d24:	e7f2      	b.n	8006d0c <__strtok_r+0x8>
 8006d26:	42b5      	cmp	r5, r6
 8006d28:	d1f6      	bne.n	8006d18 <__strtok_r+0x14>
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d1ef      	bne.n	8006d0e <__strtok_r+0xa>
 8006d2e:	6014      	str	r4, [r2, #0]
 8006d30:	7003      	strb	r3, [r0, #0]
 8006d32:	e7eb      	b.n	8006d0c <__strtok_r+0x8>
 8006d34:	462b      	mov	r3, r5
 8006d36:	e00d      	b.n	8006d54 <__strtok_r+0x50>
 8006d38:	b926      	cbnz	r6, 8006d44 <__strtok_r+0x40>
 8006d3a:	461c      	mov	r4, r3
 8006d3c:	4623      	mov	r3, r4
 8006d3e:	460f      	mov	r7, r1
 8006d40:	f813 5b01 	ldrb.w	r5, [r3], #1
 8006d44:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006d48:	42b5      	cmp	r5, r6
 8006d4a:	d1f5      	bne.n	8006d38 <__strtok_r+0x34>
 8006d4c:	2d00      	cmp	r5, #0
 8006d4e:	d0f1      	beq.n	8006d34 <__strtok_r+0x30>
 8006d50:	2100      	movs	r1, #0
 8006d52:	7021      	strb	r1, [r4, #0]
 8006d54:	6013      	str	r3, [r2, #0]
 8006d56:	e7d9      	b.n	8006d0c <__strtok_r+0x8>

08006d58 <_vsiprintf_r>:
 8006d58:	b500      	push	{lr}
 8006d5a:	b09b      	sub	sp, #108	; 0x6c
 8006d5c:	9100      	str	r1, [sp, #0]
 8006d5e:	9104      	str	r1, [sp, #16]
 8006d60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006d64:	9105      	str	r1, [sp, #20]
 8006d66:	9102      	str	r1, [sp, #8]
 8006d68:	4905      	ldr	r1, [pc, #20]	; (8006d80 <_vsiprintf_r+0x28>)
 8006d6a:	9103      	str	r1, [sp, #12]
 8006d6c:	4669      	mov	r1, sp
 8006d6e:	f000 f91d 	bl	8006fac <_svfiprintf_r>
 8006d72:	9b00      	ldr	r3, [sp, #0]
 8006d74:	2200      	movs	r2, #0
 8006d76:	701a      	strb	r2, [r3, #0]
 8006d78:	b01b      	add	sp, #108	; 0x6c
 8006d7a:	f85d fb04 	ldr.w	pc, [sp], #4
 8006d7e:	bf00      	nop
 8006d80:	ffff0208 	.word	0xffff0208

08006d84 <vsiprintf>:
 8006d84:	4613      	mov	r3, r2
 8006d86:	460a      	mov	r2, r1
 8006d88:	4601      	mov	r1, r0
 8006d8a:	4802      	ldr	r0, [pc, #8]	; (8006d94 <vsiprintf+0x10>)
 8006d8c:	6800      	ldr	r0, [r0, #0]
 8006d8e:	f7ff bfe3 	b.w	8006d58 <_vsiprintf_r>
 8006d92:	bf00      	nop
 8006d94:	20000008 	.word	0x20000008

08006d98 <malloc>:
 8006d98:	4b02      	ldr	r3, [pc, #8]	; (8006da4 <malloc+0xc>)
 8006d9a:	4601      	mov	r1, r0
 8006d9c:	6818      	ldr	r0, [r3, #0]
 8006d9e:	f000 b851 	b.w	8006e44 <_malloc_r>
 8006da2:	bf00      	nop
 8006da4:	20000008 	.word	0x20000008

08006da8 <_free_r>:
 8006da8:	b538      	push	{r3, r4, r5, lr}
 8006daa:	4605      	mov	r5, r0
 8006dac:	2900      	cmp	r1, #0
 8006dae:	d045      	beq.n	8006e3c <_free_r+0x94>
 8006db0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006db4:	1f0c      	subs	r4, r1, #4
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	bfb8      	it	lt
 8006dba:	18e4      	addlt	r4, r4, r3
 8006dbc:	f001 f84b 	bl	8007e56 <__malloc_lock>
 8006dc0:	4a1f      	ldr	r2, [pc, #124]	; (8006e40 <_free_r+0x98>)
 8006dc2:	6813      	ldr	r3, [r2, #0]
 8006dc4:	4610      	mov	r0, r2
 8006dc6:	b933      	cbnz	r3, 8006dd6 <_free_r+0x2e>
 8006dc8:	6063      	str	r3, [r4, #4]
 8006dca:	6014      	str	r4, [r2, #0]
 8006dcc:	4628      	mov	r0, r5
 8006dce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006dd2:	f001 b841 	b.w	8007e58 <__malloc_unlock>
 8006dd6:	42a3      	cmp	r3, r4
 8006dd8:	d90c      	bls.n	8006df4 <_free_r+0x4c>
 8006dda:	6821      	ldr	r1, [r4, #0]
 8006ddc:	1862      	adds	r2, r4, r1
 8006dde:	4293      	cmp	r3, r2
 8006de0:	bf04      	itt	eq
 8006de2:	681a      	ldreq	r2, [r3, #0]
 8006de4:	685b      	ldreq	r3, [r3, #4]
 8006de6:	6063      	str	r3, [r4, #4]
 8006de8:	bf04      	itt	eq
 8006dea:	1852      	addeq	r2, r2, r1
 8006dec:	6022      	streq	r2, [r4, #0]
 8006dee:	6004      	str	r4, [r0, #0]
 8006df0:	e7ec      	b.n	8006dcc <_free_r+0x24>
 8006df2:	4613      	mov	r3, r2
 8006df4:	685a      	ldr	r2, [r3, #4]
 8006df6:	b10a      	cbz	r2, 8006dfc <_free_r+0x54>
 8006df8:	42a2      	cmp	r2, r4
 8006dfa:	d9fa      	bls.n	8006df2 <_free_r+0x4a>
 8006dfc:	6819      	ldr	r1, [r3, #0]
 8006dfe:	1858      	adds	r0, r3, r1
 8006e00:	42a0      	cmp	r0, r4
 8006e02:	d10b      	bne.n	8006e1c <_free_r+0x74>
 8006e04:	6820      	ldr	r0, [r4, #0]
 8006e06:	4401      	add	r1, r0
 8006e08:	1858      	adds	r0, r3, r1
 8006e0a:	4282      	cmp	r2, r0
 8006e0c:	6019      	str	r1, [r3, #0]
 8006e0e:	d1dd      	bne.n	8006dcc <_free_r+0x24>
 8006e10:	6810      	ldr	r0, [r2, #0]
 8006e12:	6852      	ldr	r2, [r2, #4]
 8006e14:	605a      	str	r2, [r3, #4]
 8006e16:	4401      	add	r1, r0
 8006e18:	6019      	str	r1, [r3, #0]
 8006e1a:	e7d7      	b.n	8006dcc <_free_r+0x24>
 8006e1c:	d902      	bls.n	8006e24 <_free_r+0x7c>
 8006e1e:	230c      	movs	r3, #12
 8006e20:	602b      	str	r3, [r5, #0]
 8006e22:	e7d3      	b.n	8006dcc <_free_r+0x24>
 8006e24:	6820      	ldr	r0, [r4, #0]
 8006e26:	1821      	adds	r1, r4, r0
 8006e28:	428a      	cmp	r2, r1
 8006e2a:	bf04      	itt	eq
 8006e2c:	6811      	ldreq	r1, [r2, #0]
 8006e2e:	6852      	ldreq	r2, [r2, #4]
 8006e30:	6062      	str	r2, [r4, #4]
 8006e32:	bf04      	itt	eq
 8006e34:	1809      	addeq	r1, r1, r0
 8006e36:	6021      	streq	r1, [r4, #0]
 8006e38:	605c      	str	r4, [r3, #4]
 8006e3a:	e7c7      	b.n	8006dcc <_free_r+0x24>
 8006e3c:	bd38      	pop	{r3, r4, r5, pc}
 8006e3e:	bf00      	nop
 8006e40:	200046ec 	.word	0x200046ec

08006e44 <_malloc_r>:
 8006e44:	b570      	push	{r4, r5, r6, lr}
 8006e46:	1ccd      	adds	r5, r1, #3
 8006e48:	f025 0503 	bic.w	r5, r5, #3
 8006e4c:	3508      	adds	r5, #8
 8006e4e:	2d0c      	cmp	r5, #12
 8006e50:	bf38      	it	cc
 8006e52:	250c      	movcc	r5, #12
 8006e54:	2d00      	cmp	r5, #0
 8006e56:	4606      	mov	r6, r0
 8006e58:	db01      	blt.n	8006e5e <_malloc_r+0x1a>
 8006e5a:	42a9      	cmp	r1, r5
 8006e5c:	d903      	bls.n	8006e66 <_malloc_r+0x22>
 8006e5e:	230c      	movs	r3, #12
 8006e60:	6033      	str	r3, [r6, #0]
 8006e62:	2000      	movs	r0, #0
 8006e64:	bd70      	pop	{r4, r5, r6, pc}
 8006e66:	f000 fff6 	bl	8007e56 <__malloc_lock>
 8006e6a:	4a21      	ldr	r2, [pc, #132]	; (8006ef0 <_malloc_r+0xac>)
 8006e6c:	6814      	ldr	r4, [r2, #0]
 8006e6e:	4621      	mov	r1, r4
 8006e70:	b991      	cbnz	r1, 8006e98 <_malloc_r+0x54>
 8006e72:	4c20      	ldr	r4, [pc, #128]	; (8006ef4 <_malloc_r+0xb0>)
 8006e74:	6823      	ldr	r3, [r4, #0]
 8006e76:	b91b      	cbnz	r3, 8006e80 <_malloc_r+0x3c>
 8006e78:	4630      	mov	r0, r6
 8006e7a:	f000 fe19 	bl	8007ab0 <_sbrk_r>
 8006e7e:	6020      	str	r0, [r4, #0]
 8006e80:	4629      	mov	r1, r5
 8006e82:	4630      	mov	r0, r6
 8006e84:	f000 fe14 	bl	8007ab0 <_sbrk_r>
 8006e88:	1c43      	adds	r3, r0, #1
 8006e8a:	d124      	bne.n	8006ed6 <_malloc_r+0x92>
 8006e8c:	230c      	movs	r3, #12
 8006e8e:	6033      	str	r3, [r6, #0]
 8006e90:	4630      	mov	r0, r6
 8006e92:	f000 ffe1 	bl	8007e58 <__malloc_unlock>
 8006e96:	e7e4      	b.n	8006e62 <_malloc_r+0x1e>
 8006e98:	680b      	ldr	r3, [r1, #0]
 8006e9a:	1b5b      	subs	r3, r3, r5
 8006e9c:	d418      	bmi.n	8006ed0 <_malloc_r+0x8c>
 8006e9e:	2b0b      	cmp	r3, #11
 8006ea0:	d90f      	bls.n	8006ec2 <_malloc_r+0x7e>
 8006ea2:	600b      	str	r3, [r1, #0]
 8006ea4:	50cd      	str	r5, [r1, r3]
 8006ea6:	18cc      	adds	r4, r1, r3
 8006ea8:	4630      	mov	r0, r6
 8006eaa:	f000 ffd5 	bl	8007e58 <__malloc_unlock>
 8006eae:	f104 000b 	add.w	r0, r4, #11
 8006eb2:	1d23      	adds	r3, r4, #4
 8006eb4:	f020 0007 	bic.w	r0, r0, #7
 8006eb8:	1ac3      	subs	r3, r0, r3
 8006eba:	d0d3      	beq.n	8006e64 <_malloc_r+0x20>
 8006ebc:	425a      	negs	r2, r3
 8006ebe:	50e2      	str	r2, [r4, r3]
 8006ec0:	e7d0      	b.n	8006e64 <_malloc_r+0x20>
 8006ec2:	428c      	cmp	r4, r1
 8006ec4:	684b      	ldr	r3, [r1, #4]
 8006ec6:	bf16      	itet	ne
 8006ec8:	6063      	strne	r3, [r4, #4]
 8006eca:	6013      	streq	r3, [r2, #0]
 8006ecc:	460c      	movne	r4, r1
 8006ece:	e7eb      	b.n	8006ea8 <_malloc_r+0x64>
 8006ed0:	460c      	mov	r4, r1
 8006ed2:	6849      	ldr	r1, [r1, #4]
 8006ed4:	e7cc      	b.n	8006e70 <_malloc_r+0x2c>
 8006ed6:	1cc4      	adds	r4, r0, #3
 8006ed8:	f024 0403 	bic.w	r4, r4, #3
 8006edc:	42a0      	cmp	r0, r4
 8006ede:	d005      	beq.n	8006eec <_malloc_r+0xa8>
 8006ee0:	1a21      	subs	r1, r4, r0
 8006ee2:	4630      	mov	r0, r6
 8006ee4:	f000 fde4 	bl	8007ab0 <_sbrk_r>
 8006ee8:	3001      	adds	r0, #1
 8006eea:	d0cf      	beq.n	8006e8c <_malloc_r+0x48>
 8006eec:	6025      	str	r5, [r4, #0]
 8006eee:	e7db      	b.n	8006ea8 <_malloc_r+0x64>
 8006ef0:	200046ec 	.word	0x200046ec
 8006ef4:	200046f0 	.word	0x200046f0

08006ef8 <__ssputs_r>:
 8006ef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006efc:	688e      	ldr	r6, [r1, #8]
 8006efe:	429e      	cmp	r6, r3
 8006f00:	4682      	mov	sl, r0
 8006f02:	460c      	mov	r4, r1
 8006f04:	4690      	mov	r8, r2
 8006f06:	4699      	mov	r9, r3
 8006f08:	d837      	bhi.n	8006f7a <__ssputs_r+0x82>
 8006f0a:	898a      	ldrh	r2, [r1, #12]
 8006f0c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006f10:	d031      	beq.n	8006f76 <__ssputs_r+0x7e>
 8006f12:	6825      	ldr	r5, [r4, #0]
 8006f14:	6909      	ldr	r1, [r1, #16]
 8006f16:	1a6f      	subs	r7, r5, r1
 8006f18:	6965      	ldr	r5, [r4, #20]
 8006f1a:	2302      	movs	r3, #2
 8006f1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006f20:	fb95 f5f3 	sdiv	r5, r5, r3
 8006f24:	f109 0301 	add.w	r3, r9, #1
 8006f28:	443b      	add	r3, r7
 8006f2a:	429d      	cmp	r5, r3
 8006f2c:	bf38      	it	cc
 8006f2e:	461d      	movcc	r5, r3
 8006f30:	0553      	lsls	r3, r2, #21
 8006f32:	d530      	bpl.n	8006f96 <__ssputs_r+0x9e>
 8006f34:	4629      	mov	r1, r5
 8006f36:	f7ff ff85 	bl	8006e44 <_malloc_r>
 8006f3a:	4606      	mov	r6, r0
 8006f3c:	b950      	cbnz	r0, 8006f54 <__ssputs_r+0x5c>
 8006f3e:	230c      	movs	r3, #12
 8006f40:	f8ca 3000 	str.w	r3, [sl]
 8006f44:	89a3      	ldrh	r3, [r4, #12]
 8006f46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f4a:	81a3      	strh	r3, [r4, #12]
 8006f4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f54:	463a      	mov	r2, r7
 8006f56:	6921      	ldr	r1, [r4, #16]
 8006f58:	f7ff fe62 	bl	8006c20 <memcpy>
 8006f5c:	89a3      	ldrh	r3, [r4, #12]
 8006f5e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006f62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f66:	81a3      	strh	r3, [r4, #12]
 8006f68:	6126      	str	r6, [r4, #16]
 8006f6a:	6165      	str	r5, [r4, #20]
 8006f6c:	443e      	add	r6, r7
 8006f6e:	1bed      	subs	r5, r5, r7
 8006f70:	6026      	str	r6, [r4, #0]
 8006f72:	60a5      	str	r5, [r4, #8]
 8006f74:	464e      	mov	r6, r9
 8006f76:	454e      	cmp	r6, r9
 8006f78:	d900      	bls.n	8006f7c <__ssputs_r+0x84>
 8006f7a:	464e      	mov	r6, r9
 8006f7c:	4632      	mov	r2, r6
 8006f7e:	4641      	mov	r1, r8
 8006f80:	6820      	ldr	r0, [r4, #0]
 8006f82:	f000 ff4f 	bl	8007e24 <memmove>
 8006f86:	68a3      	ldr	r3, [r4, #8]
 8006f88:	1b9b      	subs	r3, r3, r6
 8006f8a:	60a3      	str	r3, [r4, #8]
 8006f8c:	6823      	ldr	r3, [r4, #0]
 8006f8e:	441e      	add	r6, r3
 8006f90:	6026      	str	r6, [r4, #0]
 8006f92:	2000      	movs	r0, #0
 8006f94:	e7dc      	b.n	8006f50 <__ssputs_r+0x58>
 8006f96:	462a      	mov	r2, r5
 8006f98:	f000 ff5f 	bl	8007e5a <_realloc_r>
 8006f9c:	4606      	mov	r6, r0
 8006f9e:	2800      	cmp	r0, #0
 8006fa0:	d1e2      	bne.n	8006f68 <__ssputs_r+0x70>
 8006fa2:	6921      	ldr	r1, [r4, #16]
 8006fa4:	4650      	mov	r0, sl
 8006fa6:	f7ff feff 	bl	8006da8 <_free_r>
 8006faa:	e7c8      	b.n	8006f3e <__ssputs_r+0x46>

08006fac <_svfiprintf_r>:
 8006fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fb0:	461d      	mov	r5, r3
 8006fb2:	898b      	ldrh	r3, [r1, #12]
 8006fb4:	061f      	lsls	r7, r3, #24
 8006fb6:	b09d      	sub	sp, #116	; 0x74
 8006fb8:	4680      	mov	r8, r0
 8006fba:	460c      	mov	r4, r1
 8006fbc:	4616      	mov	r6, r2
 8006fbe:	d50f      	bpl.n	8006fe0 <_svfiprintf_r+0x34>
 8006fc0:	690b      	ldr	r3, [r1, #16]
 8006fc2:	b96b      	cbnz	r3, 8006fe0 <_svfiprintf_r+0x34>
 8006fc4:	2140      	movs	r1, #64	; 0x40
 8006fc6:	f7ff ff3d 	bl	8006e44 <_malloc_r>
 8006fca:	6020      	str	r0, [r4, #0]
 8006fcc:	6120      	str	r0, [r4, #16]
 8006fce:	b928      	cbnz	r0, 8006fdc <_svfiprintf_r+0x30>
 8006fd0:	230c      	movs	r3, #12
 8006fd2:	f8c8 3000 	str.w	r3, [r8]
 8006fd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006fda:	e0c8      	b.n	800716e <_svfiprintf_r+0x1c2>
 8006fdc:	2340      	movs	r3, #64	; 0x40
 8006fde:	6163      	str	r3, [r4, #20]
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	9309      	str	r3, [sp, #36]	; 0x24
 8006fe4:	2320      	movs	r3, #32
 8006fe6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006fea:	2330      	movs	r3, #48	; 0x30
 8006fec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006ff0:	9503      	str	r5, [sp, #12]
 8006ff2:	f04f 0b01 	mov.w	fp, #1
 8006ff6:	4637      	mov	r7, r6
 8006ff8:	463d      	mov	r5, r7
 8006ffa:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006ffe:	b10b      	cbz	r3, 8007004 <_svfiprintf_r+0x58>
 8007000:	2b25      	cmp	r3, #37	; 0x25
 8007002:	d13e      	bne.n	8007082 <_svfiprintf_r+0xd6>
 8007004:	ebb7 0a06 	subs.w	sl, r7, r6
 8007008:	d00b      	beq.n	8007022 <_svfiprintf_r+0x76>
 800700a:	4653      	mov	r3, sl
 800700c:	4632      	mov	r2, r6
 800700e:	4621      	mov	r1, r4
 8007010:	4640      	mov	r0, r8
 8007012:	f7ff ff71 	bl	8006ef8 <__ssputs_r>
 8007016:	3001      	adds	r0, #1
 8007018:	f000 80a4 	beq.w	8007164 <_svfiprintf_r+0x1b8>
 800701c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800701e:	4453      	add	r3, sl
 8007020:	9309      	str	r3, [sp, #36]	; 0x24
 8007022:	783b      	ldrb	r3, [r7, #0]
 8007024:	2b00      	cmp	r3, #0
 8007026:	f000 809d 	beq.w	8007164 <_svfiprintf_r+0x1b8>
 800702a:	2300      	movs	r3, #0
 800702c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007030:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007034:	9304      	str	r3, [sp, #16]
 8007036:	9307      	str	r3, [sp, #28]
 8007038:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800703c:	931a      	str	r3, [sp, #104]	; 0x68
 800703e:	462f      	mov	r7, r5
 8007040:	2205      	movs	r2, #5
 8007042:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007046:	4850      	ldr	r0, [pc, #320]	; (8007188 <_svfiprintf_r+0x1dc>)
 8007048:	f7f9 f8fa 	bl	8000240 <memchr>
 800704c:	9b04      	ldr	r3, [sp, #16]
 800704e:	b9d0      	cbnz	r0, 8007086 <_svfiprintf_r+0xda>
 8007050:	06d9      	lsls	r1, r3, #27
 8007052:	bf44      	itt	mi
 8007054:	2220      	movmi	r2, #32
 8007056:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800705a:	071a      	lsls	r2, r3, #28
 800705c:	bf44      	itt	mi
 800705e:	222b      	movmi	r2, #43	; 0x2b
 8007060:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007064:	782a      	ldrb	r2, [r5, #0]
 8007066:	2a2a      	cmp	r2, #42	; 0x2a
 8007068:	d015      	beq.n	8007096 <_svfiprintf_r+0xea>
 800706a:	9a07      	ldr	r2, [sp, #28]
 800706c:	462f      	mov	r7, r5
 800706e:	2000      	movs	r0, #0
 8007070:	250a      	movs	r5, #10
 8007072:	4639      	mov	r1, r7
 8007074:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007078:	3b30      	subs	r3, #48	; 0x30
 800707a:	2b09      	cmp	r3, #9
 800707c:	d94d      	bls.n	800711a <_svfiprintf_r+0x16e>
 800707e:	b1b8      	cbz	r0, 80070b0 <_svfiprintf_r+0x104>
 8007080:	e00f      	b.n	80070a2 <_svfiprintf_r+0xf6>
 8007082:	462f      	mov	r7, r5
 8007084:	e7b8      	b.n	8006ff8 <_svfiprintf_r+0x4c>
 8007086:	4a40      	ldr	r2, [pc, #256]	; (8007188 <_svfiprintf_r+0x1dc>)
 8007088:	1a80      	subs	r0, r0, r2
 800708a:	fa0b f000 	lsl.w	r0, fp, r0
 800708e:	4318      	orrs	r0, r3
 8007090:	9004      	str	r0, [sp, #16]
 8007092:	463d      	mov	r5, r7
 8007094:	e7d3      	b.n	800703e <_svfiprintf_r+0x92>
 8007096:	9a03      	ldr	r2, [sp, #12]
 8007098:	1d11      	adds	r1, r2, #4
 800709a:	6812      	ldr	r2, [r2, #0]
 800709c:	9103      	str	r1, [sp, #12]
 800709e:	2a00      	cmp	r2, #0
 80070a0:	db01      	blt.n	80070a6 <_svfiprintf_r+0xfa>
 80070a2:	9207      	str	r2, [sp, #28]
 80070a4:	e004      	b.n	80070b0 <_svfiprintf_r+0x104>
 80070a6:	4252      	negs	r2, r2
 80070a8:	f043 0302 	orr.w	r3, r3, #2
 80070ac:	9207      	str	r2, [sp, #28]
 80070ae:	9304      	str	r3, [sp, #16]
 80070b0:	783b      	ldrb	r3, [r7, #0]
 80070b2:	2b2e      	cmp	r3, #46	; 0x2e
 80070b4:	d10c      	bne.n	80070d0 <_svfiprintf_r+0x124>
 80070b6:	787b      	ldrb	r3, [r7, #1]
 80070b8:	2b2a      	cmp	r3, #42	; 0x2a
 80070ba:	d133      	bne.n	8007124 <_svfiprintf_r+0x178>
 80070bc:	9b03      	ldr	r3, [sp, #12]
 80070be:	1d1a      	adds	r2, r3, #4
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	9203      	str	r2, [sp, #12]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	bfb8      	it	lt
 80070c8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80070cc:	3702      	adds	r7, #2
 80070ce:	9305      	str	r3, [sp, #20]
 80070d0:	4d2e      	ldr	r5, [pc, #184]	; (800718c <_svfiprintf_r+0x1e0>)
 80070d2:	7839      	ldrb	r1, [r7, #0]
 80070d4:	2203      	movs	r2, #3
 80070d6:	4628      	mov	r0, r5
 80070d8:	f7f9 f8b2 	bl	8000240 <memchr>
 80070dc:	b138      	cbz	r0, 80070ee <_svfiprintf_r+0x142>
 80070de:	2340      	movs	r3, #64	; 0x40
 80070e0:	1b40      	subs	r0, r0, r5
 80070e2:	fa03 f000 	lsl.w	r0, r3, r0
 80070e6:	9b04      	ldr	r3, [sp, #16]
 80070e8:	4303      	orrs	r3, r0
 80070ea:	3701      	adds	r7, #1
 80070ec:	9304      	str	r3, [sp, #16]
 80070ee:	7839      	ldrb	r1, [r7, #0]
 80070f0:	4827      	ldr	r0, [pc, #156]	; (8007190 <_svfiprintf_r+0x1e4>)
 80070f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80070f6:	2206      	movs	r2, #6
 80070f8:	1c7e      	adds	r6, r7, #1
 80070fa:	f7f9 f8a1 	bl	8000240 <memchr>
 80070fe:	2800      	cmp	r0, #0
 8007100:	d038      	beq.n	8007174 <_svfiprintf_r+0x1c8>
 8007102:	4b24      	ldr	r3, [pc, #144]	; (8007194 <_svfiprintf_r+0x1e8>)
 8007104:	bb13      	cbnz	r3, 800714c <_svfiprintf_r+0x1a0>
 8007106:	9b03      	ldr	r3, [sp, #12]
 8007108:	3307      	adds	r3, #7
 800710a:	f023 0307 	bic.w	r3, r3, #7
 800710e:	3308      	adds	r3, #8
 8007110:	9303      	str	r3, [sp, #12]
 8007112:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007114:	444b      	add	r3, r9
 8007116:	9309      	str	r3, [sp, #36]	; 0x24
 8007118:	e76d      	b.n	8006ff6 <_svfiprintf_r+0x4a>
 800711a:	fb05 3202 	mla	r2, r5, r2, r3
 800711e:	2001      	movs	r0, #1
 8007120:	460f      	mov	r7, r1
 8007122:	e7a6      	b.n	8007072 <_svfiprintf_r+0xc6>
 8007124:	2300      	movs	r3, #0
 8007126:	3701      	adds	r7, #1
 8007128:	9305      	str	r3, [sp, #20]
 800712a:	4619      	mov	r1, r3
 800712c:	250a      	movs	r5, #10
 800712e:	4638      	mov	r0, r7
 8007130:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007134:	3a30      	subs	r2, #48	; 0x30
 8007136:	2a09      	cmp	r2, #9
 8007138:	d903      	bls.n	8007142 <_svfiprintf_r+0x196>
 800713a:	2b00      	cmp	r3, #0
 800713c:	d0c8      	beq.n	80070d0 <_svfiprintf_r+0x124>
 800713e:	9105      	str	r1, [sp, #20]
 8007140:	e7c6      	b.n	80070d0 <_svfiprintf_r+0x124>
 8007142:	fb05 2101 	mla	r1, r5, r1, r2
 8007146:	2301      	movs	r3, #1
 8007148:	4607      	mov	r7, r0
 800714a:	e7f0      	b.n	800712e <_svfiprintf_r+0x182>
 800714c:	ab03      	add	r3, sp, #12
 800714e:	9300      	str	r3, [sp, #0]
 8007150:	4622      	mov	r2, r4
 8007152:	4b11      	ldr	r3, [pc, #68]	; (8007198 <_svfiprintf_r+0x1ec>)
 8007154:	a904      	add	r1, sp, #16
 8007156:	4640      	mov	r0, r8
 8007158:	f3af 8000 	nop.w
 800715c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007160:	4681      	mov	r9, r0
 8007162:	d1d6      	bne.n	8007112 <_svfiprintf_r+0x166>
 8007164:	89a3      	ldrh	r3, [r4, #12]
 8007166:	065b      	lsls	r3, r3, #25
 8007168:	f53f af35 	bmi.w	8006fd6 <_svfiprintf_r+0x2a>
 800716c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800716e:	b01d      	add	sp, #116	; 0x74
 8007170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007174:	ab03      	add	r3, sp, #12
 8007176:	9300      	str	r3, [sp, #0]
 8007178:	4622      	mov	r2, r4
 800717a:	4b07      	ldr	r3, [pc, #28]	; (8007198 <_svfiprintf_r+0x1ec>)
 800717c:	a904      	add	r1, sp, #16
 800717e:	4640      	mov	r0, r8
 8007180:	f000 fa2c 	bl	80075dc <_printf_i>
 8007184:	e7ea      	b.n	800715c <_svfiprintf_r+0x1b0>
 8007186:	bf00      	nop
 8007188:	0800804c 	.word	0x0800804c
 800718c:	08008052 	.word	0x08008052
 8007190:	08008056 	.word	0x08008056
 8007194:	00000000 	.word	0x00000000
 8007198:	08006ef9 	.word	0x08006ef9

0800719c <_sungetc_r>:
 800719c:	b538      	push	{r3, r4, r5, lr}
 800719e:	1c4b      	adds	r3, r1, #1
 80071a0:	4614      	mov	r4, r2
 80071a2:	d103      	bne.n	80071ac <_sungetc_r+0x10>
 80071a4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80071a8:	4628      	mov	r0, r5
 80071aa:	bd38      	pop	{r3, r4, r5, pc}
 80071ac:	8993      	ldrh	r3, [r2, #12]
 80071ae:	f023 0320 	bic.w	r3, r3, #32
 80071b2:	8193      	strh	r3, [r2, #12]
 80071b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80071b6:	6852      	ldr	r2, [r2, #4]
 80071b8:	b2cd      	uxtb	r5, r1
 80071ba:	b18b      	cbz	r3, 80071e0 <_sungetc_r+0x44>
 80071bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80071be:	4293      	cmp	r3, r2
 80071c0:	dd08      	ble.n	80071d4 <_sungetc_r+0x38>
 80071c2:	6823      	ldr	r3, [r4, #0]
 80071c4:	1e5a      	subs	r2, r3, #1
 80071c6:	6022      	str	r2, [r4, #0]
 80071c8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80071cc:	6863      	ldr	r3, [r4, #4]
 80071ce:	3301      	adds	r3, #1
 80071d0:	6063      	str	r3, [r4, #4]
 80071d2:	e7e9      	b.n	80071a8 <_sungetc_r+0xc>
 80071d4:	4621      	mov	r1, r4
 80071d6:	f000 fdc7 	bl	8007d68 <__submore>
 80071da:	2800      	cmp	r0, #0
 80071dc:	d0f1      	beq.n	80071c2 <_sungetc_r+0x26>
 80071de:	e7e1      	b.n	80071a4 <_sungetc_r+0x8>
 80071e0:	6921      	ldr	r1, [r4, #16]
 80071e2:	6823      	ldr	r3, [r4, #0]
 80071e4:	b151      	cbz	r1, 80071fc <_sungetc_r+0x60>
 80071e6:	4299      	cmp	r1, r3
 80071e8:	d208      	bcs.n	80071fc <_sungetc_r+0x60>
 80071ea:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80071ee:	42a9      	cmp	r1, r5
 80071f0:	d104      	bne.n	80071fc <_sungetc_r+0x60>
 80071f2:	3b01      	subs	r3, #1
 80071f4:	3201      	adds	r2, #1
 80071f6:	6023      	str	r3, [r4, #0]
 80071f8:	6062      	str	r2, [r4, #4]
 80071fa:	e7d5      	b.n	80071a8 <_sungetc_r+0xc>
 80071fc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8007200:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007204:	6363      	str	r3, [r4, #52]	; 0x34
 8007206:	2303      	movs	r3, #3
 8007208:	63a3      	str	r3, [r4, #56]	; 0x38
 800720a:	4623      	mov	r3, r4
 800720c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8007210:	6023      	str	r3, [r4, #0]
 8007212:	2301      	movs	r3, #1
 8007214:	e7dc      	b.n	80071d0 <_sungetc_r+0x34>

08007216 <__ssrefill_r>:
 8007216:	b510      	push	{r4, lr}
 8007218:	460c      	mov	r4, r1
 800721a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800721c:	b169      	cbz	r1, 800723a <__ssrefill_r+0x24>
 800721e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007222:	4299      	cmp	r1, r3
 8007224:	d001      	beq.n	800722a <__ssrefill_r+0x14>
 8007226:	f7ff fdbf 	bl	8006da8 <_free_r>
 800722a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800722c:	6063      	str	r3, [r4, #4]
 800722e:	2000      	movs	r0, #0
 8007230:	6360      	str	r0, [r4, #52]	; 0x34
 8007232:	b113      	cbz	r3, 800723a <__ssrefill_r+0x24>
 8007234:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007236:	6023      	str	r3, [r4, #0]
 8007238:	bd10      	pop	{r4, pc}
 800723a:	6923      	ldr	r3, [r4, #16]
 800723c:	6023      	str	r3, [r4, #0]
 800723e:	2300      	movs	r3, #0
 8007240:	6063      	str	r3, [r4, #4]
 8007242:	89a3      	ldrh	r3, [r4, #12]
 8007244:	f043 0320 	orr.w	r3, r3, #32
 8007248:	81a3      	strh	r3, [r4, #12]
 800724a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800724e:	e7f3      	b.n	8007238 <__ssrefill_r+0x22>

08007250 <__ssvfiscanf_r>:
 8007250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007254:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8007258:	460c      	mov	r4, r1
 800725a:	2100      	movs	r1, #0
 800725c:	9144      	str	r1, [sp, #272]	; 0x110
 800725e:	9145      	str	r1, [sp, #276]	; 0x114
 8007260:	499f      	ldr	r1, [pc, #636]	; (80074e0 <__ssvfiscanf_r+0x290>)
 8007262:	91a0      	str	r1, [sp, #640]	; 0x280
 8007264:	f10d 0804 	add.w	r8, sp, #4
 8007268:	499e      	ldr	r1, [pc, #632]	; (80074e4 <__ssvfiscanf_r+0x294>)
 800726a:	f8df 927c 	ldr.w	r9, [pc, #636]	; 80074e8 <__ssvfiscanf_r+0x298>
 800726e:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8007272:	4606      	mov	r6, r0
 8007274:	4692      	mov	sl, r2
 8007276:	91a1      	str	r1, [sp, #644]	; 0x284
 8007278:	9300      	str	r3, [sp, #0]
 800727a:	270a      	movs	r7, #10
 800727c:	f89a 3000 	ldrb.w	r3, [sl]
 8007280:	2b00      	cmp	r3, #0
 8007282:	f000 812a 	beq.w	80074da <__ssvfiscanf_r+0x28a>
 8007286:	4655      	mov	r5, sl
 8007288:	f000 fdac 	bl	8007de4 <__locale_ctype_ptr>
 800728c:	f815 bb01 	ldrb.w	fp, [r5], #1
 8007290:	4458      	add	r0, fp
 8007292:	7843      	ldrb	r3, [r0, #1]
 8007294:	f013 0308 	ands.w	r3, r3, #8
 8007298:	d01c      	beq.n	80072d4 <__ssvfiscanf_r+0x84>
 800729a:	6863      	ldr	r3, [r4, #4]
 800729c:	2b00      	cmp	r3, #0
 800729e:	dd12      	ble.n	80072c6 <__ssvfiscanf_r+0x76>
 80072a0:	f000 fda0 	bl	8007de4 <__locale_ctype_ptr>
 80072a4:	6823      	ldr	r3, [r4, #0]
 80072a6:	781a      	ldrb	r2, [r3, #0]
 80072a8:	4410      	add	r0, r2
 80072aa:	7842      	ldrb	r2, [r0, #1]
 80072ac:	0712      	lsls	r2, r2, #28
 80072ae:	d401      	bmi.n	80072b4 <__ssvfiscanf_r+0x64>
 80072b0:	46aa      	mov	sl, r5
 80072b2:	e7e3      	b.n	800727c <__ssvfiscanf_r+0x2c>
 80072b4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80072b6:	3201      	adds	r2, #1
 80072b8:	9245      	str	r2, [sp, #276]	; 0x114
 80072ba:	6862      	ldr	r2, [r4, #4]
 80072bc:	3301      	adds	r3, #1
 80072be:	3a01      	subs	r2, #1
 80072c0:	6062      	str	r2, [r4, #4]
 80072c2:	6023      	str	r3, [r4, #0]
 80072c4:	e7e9      	b.n	800729a <__ssvfiscanf_r+0x4a>
 80072c6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80072c8:	4621      	mov	r1, r4
 80072ca:	4630      	mov	r0, r6
 80072cc:	4798      	blx	r3
 80072ce:	2800      	cmp	r0, #0
 80072d0:	d0e6      	beq.n	80072a0 <__ssvfiscanf_r+0x50>
 80072d2:	e7ed      	b.n	80072b0 <__ssvfiscanf_r+0x60>
 80072d4:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80072d8:	f040 8082 	bne.w	80073e0 <__ssvfiscanf_r+0x190>
 80072dc:	9343      	str	r3, [sp, #268]	; 0x10c
 80072de:	9341      	str	r3, [sp, #260]	; 0x104
 80072e0:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80072e4:	2b2a      	cmp	r3, #42	; 0x2a
 80072e6:	d103      	bne.n	80072f0 <__ssvfiscanf_r+0xa0>
 80072e8:	2310      	movs	r3, #16
 80072ea:	9341      	str	r3, [sp, #260]	; 0x104
 80072ec:	f10a 0502 	add.w	r5, sl, #2
 80072f0:	46aa      	mov	sl, r5
 80072f2:	f815 1b01 	ldrb.w	r1, [r5], #1
 80072f6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80072fa:	2a09      	cmp	r2, #9
 80072fc:	d922      	bls.n	8007344 <__ssvfiscanf_r+0xf4>
 80072fe:	2203      	movs	r2, #3
 8007300:	4879      	ldr	r0, [pc, #484]	; (80074e8 <__ssvfiscanf_r+0x298>)
 8007302:	f7f8 ff9d 	bl	8000240 <memchr>
 8007306:	b138      	cbz	r0, 8007318 <__ssvfiscanf_r+0xc8>
 8007308:	eba0 0309 	sub.w	r3, r0, r9
 800730c:	2001      	movs	r0, #1
 800730e:	4098      	lsls	r0, r3
 8007310:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007312:	4318      	orrs	r0, r3
 8007314:	9041      	str	r0, [sp, #260]	; 0x104
 8007316:	46aa      	mov	sl, r5
 8007318:	f89a 3000 	ldrb.w	r3, [sl]
 800731c:	2b67      	cmp	r3, #103	; 0x67
 800731e:	f10a 0501 	add.w	r5, sl, #1
 8007322:	d82b      	bhi.n	800737c <__ssvfiscanf_r+0x12c>
 8007324:	2b65      	cmp	r3, #101	; 0x65
 8007326:	f080 809f 	bcs.w	8007468 <__ssvfiscanf_r+0x218>
 800732a:	2b47      	cmp	r3, #71	; 0x47
 800732c:	d810      	bhi.n	8007350 <__ssvfiscanf_r+0x100>
 800732e:	2b45      	cmp	r3, #69	; 0x45
 8007330:	f080 809a 	bcs.w	8007468 <__ssvfiscanf_r+0x218>
 8007334:	2b00      	cmp	r3, #0
 8007336:	d06c      	beq.n	8007412 <__ssvfiscanf_r+0x1c2>
 8007338:	2b25      	cmp	r3, #37	; 0x25
 800733a:	d051      	beq.n	80073e0 <__ssvfiscanf_r+0x190>
 800733c:	2303      	movs	r3, #3
 800733e:	9347      	str	r3, [sp, #284]	; 0x11c
 8007340:	9742      	str	r7, [sp, #264]	; 0x108
 8007342:	e027      	b.n	8007394 <__ssvfiscanf_r+0x144>
 8007344:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8007346:	fb07 1303 	mla	r3, r7, r3, r1
 800734a:	3b30      	subs	r3, #48	; 0x30
 800734c:	9343      	str	r3, [sp, #268]	; 0x10c
 800734e:	e7cf      	b.n	80072f0 <__ssvfiscanf_r+0xa0>
 8007350:	2b5b      	cmp	r3, #91	; 0x5b
 8007352:	d06a      	beq.n	800742a <__ssvfiscanf_r+0x1da>
 8007354:	d80c      	bhi.n	8007370 <__ssvfiscanf_r+0x120>
 8007356:	2b58      	cmp	r3, #88	; 0x58
 8007358:	d1f0      	bne.n	800733c <__ssvfiscanf_r+0xec>
 800735a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800735c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007360:	9241      	str	r2, [sp, #260]	; 0x104
 8007362:	2210      	movs	r2, #16
 8007364:	9242      	str	r2, [sp, #264]	; 0x108
 8007366:	2b6e      	cmp	r3, #110	; 0x6e
 8007368:	bf8c      	ite	hi
 800736a:	2304      	movhi	r3, #4
 800736c:	2303      	movls	r3, #3
 800736e:	e010      	b.n	8007392 <__ssvfiscanf_r+0x142>
 8007370:	2b63      	cmp	r3, #99	; 0x63
 8007372:	d065      	beq.n	8007440 <__ssvfiscanf_r+0x1f0>
 8007374:	2b64      	cmp	r3, #100	; 0x64
 8007376:	d1e1      	bne.n	800733c <__ssvfiscanf_r+0xec>
 8007378:	9742      	str	r7, [sp, #264]	; 0x108
 800737a:	e7f4      	b.n	8007366 <__ssvfiscanf_r+0x116>
 800737c:	2b70      	cmp	r3, #112	; 0x70
 800737e:	d04b      	beq.n	8007418 <__ssvfiscanf_r+0x1c8>
 8007380:	d826      	bhi.n	80073d0 <__ssvfiscanf_r+0x180>
 8007382:	2b6e      	cmp	r3, #110	; 0x6e
 8007384:	d062      	beq.n	800744c <__ssvfiscanf_r+0x1fc>
 8007386:	d84c      	bhi.n	8007422 <__ssvfiscanf_r+0x1d2>
 8007388:	2b69      	cmp	r3, #105	; 0x69
 800738a:	d1d7      	bne.n	800733c <__ssvfiscanf_r+0xec>
 800738c:	2300      	movs	r3, #0
 800738e:	9342      	str	r3, [sp, #264]	; 0x108
 8007390:	2303      	movs	r3, #3
 8007392:	9347      	str	r3, [sp, #284]	; 0x11c
 8007394:	6863      	ldr	r3, [r4, #4]
 8007396:	2b00      	cmp	r3, #0
 8007398:	dd68      	ble.n	800746c <__ssvfiscanf_r+0x21c>
 800739a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800739c:	0659      	lsls	r1, r3, #25
 800739e:	d407      	bmi.n	80073b0 <__ssvfiscanf_r+0x160>
 80073a0:	f000 fd20 	bl	8007de4 <__locale_ctype_ptr>
 80073a4:	6823      	ldr	r3, [r4, #0]
 80073a6:	781a      	ldrb	r2, [r3, #0]
 80073a8:	4410      	add	r0, r2
 80073aa:	7842      	ldrb	r2, [r0, #1]
 80073ac:	0712      	lsls	r2, r2, #28
 80073ae:	d464      	bmi.n	800747a <__ssvfiscanf_r+0x22a>
 80073b0:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80073b2:	2b02      	cmp	r3, #2
 80073b4:	dc73      	bgt.n	800749e <__ssvfiscanf_r+0x24e>
 80073b6:	466b      	mov	r3, sp
 80073b8:	4622      	mov	r2, r4
 80073ba:	a941      	add	r1, sp, #260	; 0x104
 80073bc:	4630      	mov	r0, r6
 80073be:	f000 fa1f 	bl	8007800 <_scanf_chars>
 80073c2:	2801      	cmp	r0, #1
 80073c4:	f000 8089 	beq.w	80074da <__ssvfiscanf_r+0x28a>
 80073c8:	2802      	cmp	r0, #2
 80073ca:	f47f af71 	bne.w	80072b0 <__ssvfiscanf_r+0x60>
 80073ce:	e01d      	b.n	800740c <__ssvfiscanf_r+0x1bc>
 80073d0:	2b75      	cmp	r3, #117	; 0x75
 80073d2:	d0d1      	beq.n	8007378 <__ssvfiscanf_r+0x128>
 80073d4:	2b78      	cmp	r3, #120	; 0x78
 80073d6:	d0c0      	beq.n	800735a <__ssvfiscanf_r+0x10a>
 80073d8:	2b73      	cmp	r3, #115	; 0x73
 80073da:	d1af      	bne.n	800733c <__ssvfiscanf_r+0xec>
 80073dc:	2302      	movs	r3, #2
 80073de:	e7d8      	b.n	8007392 <__ssvfiscanf_r+0x142>
 80073e0:	6863      	ldr	r3, [r4, #4]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	dd0c      	ble.n	8007400 <__ssvfiscanf_r+0x1b0>
 80073e6:	6823      	ldr	r3, [r4, #0]
 80073e8:	781a      	ldrb	r2, [r3, #0]
 80073ea:	455a      	cmp	r2, fp
 80073ec:	d175      	bne.n	80074da <__ssvfiscanf_r+0x28a>
 80073ee:	3301      	adds	r3, #1
 80073f0:	6862      	ldr	r2, [r4, #4]
 80073f2:	6023      	str	r3, [r4, #0]
 80073f4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80073f6:	3a01      	subs	r2, #1
 80073f8:	3301      	adds	r3, #1
 80073fa:	6062      	str	r2, [r4, #4]
 80073fc:	9345      	str	r3, [sp, #276]	; 0x114
 80073fe:	e757      	b.n	80072b0 <__ssvfiscanf_r+0x60>
 8007400:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007402:	4621      	mov	r1, r4
 8007404:	4630      	mov	r0, r6
 8007406:	4798      	blx	r3
 8007408:	2800      	cmp	r0, #0
 800740a:	d0ec      	beq.n	80073e6 <__ssvfiscanf_r+0x196>
 800740c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800740e:	2800      	cmp	r0, #0
 8007410:	d159      	bne.n	80074c6 <__ssvfiscanf_r+0x276>
 8007412:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007416:	e05c      	b.n	80074d2 <__ssvfiscanf_r+0x282>
 8007418:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800741a:	f042 0220 	orr.w	r2, r2, #32
 800741e:	9241      	str	r2, [sp, #260]	; 0x104
 8007420:	e79b      	b.n	800735a <__ssvfiscanf_r+0x10a>
 8007422:	2308      	movs	r3, #8
 8007424:	9342      	str	r3, [sp, #264]	; 0x108
 8007426:	2304      	movs	r3, #4
 8007428:	e7b3      	b.n	8007392 <__ssvfiscanf_r+0x142>
 800742a:	4629      	mov	r1, r5
 800742c:	4640      	mov	r0, r8
 800742e:	f000 fb4f 	bl	8007ad0 <__sccl>
 8007432:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007434:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007438:	9341      	str	r3, [sp, #260]	; 0x104
 800743a:	4605      	mov	r5, r0
 800743c:	2301      	movs	r3, #1
 800743e:	e7a8      	b.n	8007392 <__ssvfiscanf_r+0x142>
 8007440:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007442:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007446:	9341      	str	r3, [sp, #260]	; 0x104
 8007448:	2300      	movs	r3, #0
 800744a:	e7a2      	b.n	8007392 <__ssvfiscanf_r+0x142>
 800744c:	9841      	ldr	r0, [sp, #260]	; 0x104
 800744e:	06c3      	lsls	r3, r0, #27
 8007450:	f53f af2e 	bmi.w	80072b0 <__ssvfiscanf_r+0x60>
 8007454:	9b00      	ldr	r3, [sp, #0]
 8007456:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007458:	1d19      	adds	r1, r3, #4
 800745a:	9100      	str	r1, [sp, #0]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	07c0      	lsls	r0, r0, #31
 8007460:	bf4c      	ite	mi
 8007462:	801a      	strhmi	r2, [r3, #0]
 8007464:	601a      	strpl	r2, [r3, #0]
 8007466:	e723      	b.n	80072b0 <__ssvfiscanf_r+0x60>
 8007468:	2305      	movs	r3, #5
 800746a:	e792      	b.n	8007392 <__ssvfiscanf_r+0x142>
 800746c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800746e:	4621      	mov	r1, r4
 8007470:	4630      	mov	r0, r6
 8007472:	4798      	blx	r3
 8007474:	2800      	cmp	r0, #0
 8007476:	d090      	beq.n	800739a <__ssvfiscanf_r+0x14a>
 8007478:	e7c8      	b.n	800740c <__ssvfiscanf_r+0x1bc>
 800747a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800747c:	3201      	adds	r2, #1
 800747e:	9245      	str	r2, [sp, #276]	; 0x114
 8007480:	6862      	ldr	r2, [r4, #4]
 8007482:	3a01      	subs	r2, #1
 8007484:	2a00      	cmp	r2, #0
 8007486:	6062      	str	r2, [r4, #4]
 8007488:	dd02      	ble.n	8007490 <__ssvfiscanf_r+0x240>
 800748a:	3301      	adds	r3, #1
 800748c:	6023      	str	r3, [r4, #0]
 800748e:	e787      	b.n	80073a0 <__ssvfiscanf_r+0x150>
 8007490:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007492:	4621      	mov	r1, r4
 8007494:	4630      	mov	r0, r6
 8007496:	4798      	blx	r3
 8007498:	2800      	cmp	r0, #0
 800749a:	d081      	beq.n	80073a0 <__ssvfiscanf_r+0x150>
 800749c:	e7b6      	b.n	800740c <__ssvfiscanf_r+0x1bc>
 800749e:	2b04      	cmp	r3, #4
 80074a0:	dc06      	bgt.n	80074b0 <__ssvfiscanf_r+0x260>
 80074a2:	466b      	mov	r3, sp
 80074a4:	4622      	mov	r2, r4
 80074a6:	a941      	add	r1, sp, #260	; 0x104
 80074a8:	4630      	mov	r0, r6
 80074aa:	f000 fa0d 	bl	80078c8 <_scanf_i>
 80074ae:	e788      	b.n	80073c2 <__ssvfiscanf_r+0x172>
 80074b0:	4b0e      	ldr	r3, [pc, #56]	; (80074ec <__ssvfiscanf_r+0x29c>)
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	f43f aefc 	beq.w	80072b0 <__ssvfiscanf_r+0x60>
 80074b8:	466b      	mov	r3, sp
 80074ba:	4622      	mov	r2, r4
 80074bc:	a941      	add	r1, sp, #260	; 0x104
 80074be:	4630      	mov	r0, r6
 80074c0:	f3af 8000 	nop.w
 80074c4:	e77d      	b.n	80073c2 <__ssvfiscanf_r+0x172>
 80074c6:	89a3      	ldrh	r3, [r4, #12]
 80074c8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80074cc:	bf18      	it	ne
 80074ce:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80074d2:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80074d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074da:	9844      	ldr	r0, [sp, #272]	; 0x110
 80074dc:	e7f9      	b.n	80074d2 <__ssvfiscanf_r+0x282>
 80074de:	bf00      	nop
 80074e0:	0800719d 	.word	0x0800719d
 80074e4:	08007217 	.word	0x08007217
 80074e8:	08008052 	.word	0x08008052
 80074ec:	00000000 	.word	0x00000000

080074f0 <_printf_common>:
 80074f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074f4:	4691      	mov	r9, r2
 80074f6:	461f      	mov	r7, r3
 80074f8:	688a      	ldr	r2, [r1, #8]
 80074fa:	690b      	ldr	r3, [r1, #16]
 80074fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007500:	4293      	cmp	r3, r2
 8007502:	bfb8      	it	lt
 8007504:	4613      	movlt	r3, r2
 8007506:	f8c9 3000 	str.w	r3, [r9]
 800750a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800750e:	4606      	mov	r6, r0
 8007510:	460c      	mov	r4, r1
 8007512:	b112      	cbz	r2, 800751a <_printf_common+0x2a>
 8007514:	3301      	adds	r3, #1
 8007516:	f8c9 3000 	str.w	r3, [r9]
 800751a:	6823      	ldr	r3, [r4, #0]
 800751c:	0699      	lsls	r1, r3, #26
 800751e:	bf42      	ittt	mi
 8007520:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007524:	3302      	addmi	r3, #2
 8007526:	f8c9 3000 	strmi.w	r3, [r9]
 800752a:	6825      	ldr	r5, [r4, #0]
 800752c:	f015 0506 	ands.w	r5, r5, #6
 8007530:	d107      	bne.n	8007542 <_printf_common+0x52>
 8007532:	f104 0a19 	add.w	sl, r4, #25
 8007536:	68e3      	ldr	r3, [r4, #12]
 8007538:	f8d9 2000 	ldr.w	r2, [r9]
 800753c:	1a9b      	subs	r3, r3, r2
 800753e:	42ab      	cmp	r3, r5
 8007540:	dc28      	bgt.n	8007594 <_printf_common+0xa4>
 8007542:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007546:	6822      	ldr	r2, [r4, #0]
 8007548:	3300      	adds	r3, #0
 800754a:	bf18      	it	ne
 800754c:	2301      	movne	r3, #1
 800754e:	0692      	lsls	r2, r2, #26
 8007550:	d42d      	bmi.n	80075ae <_printf_common+0xbe>
 8007552:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007556:	4639      	mov	r1, r7
 8007558:	4630      	mov	r0, r6
 800755a:	47c0      	blx	r8
 800755c:	3001      	adds	r0, #1
 800755e:	d020      	beq.n	80075a2 <_printf_common+0xb2>
 8007560:	6823      	ldr	r3, [r4, #0]
 8007562:	68e5      	ldr	r5, [r4, #12]
 8007564:	f8d9 2000 	ldr.w	r2, [r9]
 8007568:	f003 0306 	and.w	r3, r3, #6
 800756c:	2b04      	cmp	r3, #4
 800756e:	bf08      	it	eq
 8007570:	1aad      	subeq	r5, r5, r2
 8007572:	68a3      	ldr	r3, [r4, #8]
 8007574:	6922      	ldr	r2, [r4, #16]
 8007576:	bf0c      	ite	eq
 8007578:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800757c:	2500      	movne	r5, #0
 800757e:	4293      	cmp	r3, r2
 8007580:	bfc4      	itt	gt
 8007582:	1a9b      	subgt	r3, r3, r2
 8007584:	18ed      	addgt	r5, r5, r3
 8007586:	f04f 0900 	mov.w	r9, #0
 800758a:	341a      	adds	r4, #26
 800758c:	454d      	cmp	r5, r9
 800758e:	d11a      	bne.n	80075c6 <_printf_common+0xd6>
 8007590:	2000      	movs	r0, #0
 8007592:	e008      	b.n	80075a6 <_printf_common+0xb6>
 8007594:	2301      	movs	r3, #1
 8007596:	4652      	mov	r2, sl
 8007598:	4639      	mov	r1, r7
 800759a:	4630      	mov	r0, r6
 800759c:	47c0      	blx	r8
 800759e:	3001      	adds	r0, #1
 80075a0:	d103      	bne.n	80075aa <_printf_common+0xba>
 80075a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80075a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075aa:	3501      	adds	r5, #1
 80075ac:	e7c3      	b.n	8007536 <_printf_common+0x46>
 80075ae:	18e1      	adds	r1, r4, r3
 80075b0:	1c5a      	adds	r2, r3, #1
 80075b2:	2030      	movs	r0, #48	; 0x30
 80075b4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80075b8:	4422      	add	r2, r4
 80075ba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80075be:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80075c2:	3302      	adds	r3, #2
 80075c4:	e7c5      	b.n	8007552 <_printf_common+0x62>
 80075c6:	2301      	movs	r3, #1
 80075c8:	4622      	mov	r2, r4
 80075ca:	4639      	mov	r1, r7
 80075cc:	4630      	mov	r0, r6
 80075ce:	47c0      	blx	r8
 80075d0:	3001      	adds	r0, #1
 80075d2:	d0e6      	beq.n	80075a2 <_printf_common+0xb2>
 80075d4:	f109 0901 	add.w	r9, r9, #1
 80075d8:	e7d8      	b.n	800758c <_printf_common+0x9c>
	...

080075dc <_printf_i>:
 80075dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80075e0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80075e4:	460c      	mov	r4, r1
 80075e6:	7e09      	ldrb	r1, [r1, #24]
 80075e8:	b085      	sub	sp, #20
 80075ea:	296e      	cmp	r1, #110	; 0x6e
 80075ec:	4617      	mov	r7, r2
 80075ee:	4606      	mov	r6, r0
 80075f0:	4698      	mov	r8, r3
 80075f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80075f4:	f000 80b3 	beq.w	800775e <_printf_i+0x182>
 80075f8:	d822      	bhi.n	8007640 <_printf_i+0x64>
 80075fa:	2963      	cmp	r1, #99	; 0x63
 80075fc:	d036      	beq.n	800766c <_printf_i+0x90>
 80075fe:	d80a      	bhi.n	8007616 <_printf_i+0x3a>
 8007600:	2900      	cmp	r1, #0
 8007602:	f000 80b9 	beq.w	8007778 <_printf_i+0x19c>
 8007606:	2958      	cmp	r1, #88	; 0x58
 8007608:	f000 8083 	beq.w	8007712 <_printf_i+0x136>
 800760c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007610:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007614:	e032      	b.n	800767c <_printf_i+0xa0>
 8007616:	2964      	cmp	r1, #100	; 0x64
 8007618:	d001      	beq.n	800761e <_printf_i+0x42>
 800761a:	2969      	cmp	r1, #105	; 0x69
 800761c:	d1f6      	bne.n	800760c <_printf_i+0x30>
 800761e:	6820      	ldr	r0, [r4, #0]
 8007620:	6813      	ldr	r3, [r2, #0]
 8007622:	0605      	lsls	r5, r0, #24
 8007624:	f103 0104 	add.w	r1, r3, #4
 8007628:	d52a      	bpl.n	8007680 <_printf_i+0xa4>
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	6011      	str	r1, [r2, #0]
 800762e:	2b00      	cmp	r3, #0
 8007630:	da03      	bge.n	800763a <_printf_i+0x5e>
 8007632:	222d      	movs	r2, #45	; 0x2d
 8007634:	425b      	negs	r3, r3
 8007636:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800763a:	486f      	ldr	r0, [pc, #444]	; (80077f8 <_printf_i+0x21c>)
 800763c:	220a      	movs	r2, #10
 800763e:	e039      	b.n	80076b4 <_printf_i+0xd8>
 8007640:	2973      	cmp	r1, #115	; 0x73
 8007642:	f000 809d 	beq.w	8007780 <_printf_i+0x1a4>
 8007646:	d808      	bhi.n	800765a <_printf_i+0x7e>
 8007648:	296f      	cmp	r1, #111	; 0x6f
 800764a:	d020      	beq.n	800768e <_printf_i+0xb2>
 800764c:	2970      	cmp	r1, #112	; 0x70
 800764e:	d1dd      	bne.n	800760c <_printf_i+0x30>
 8007650:	6823      	ldr	r3, [r4, #0]
 8007652:	f043 0320 	orr.w	r3, r3, #32
 8007656:	6023      	str	r3, [r4, #0]
 8007658:	e003      	b.n	8007662 <_printf_i+0x86>
 800765a:	2975      	cmp	r1, #117	; 0x75
 800765c:	d017      	beq.n	800768e <_printf_i+0xb2>
 800765e:	2978      	cmp	r1, #120	; 0x78
 8007660:	d1d4      	bne.n	800760c <_printf_i+0x30>
 8007662:	2378      	movs	r3, #120	; 0x78
 8007664:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007668:	4864      	ldr	r0, [pc, #400]	; (80077fc <_printf_i+0x220>)
 800766a:	e055      	b.n	8007718 <_printf_i+0x13c>
 800766c:	6813      	ldr	r3, [r2, #0]
 800766e:	1d19      	adds	r1, r3, #4
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	6011      	str	r1, [r2, #0]
 8007674:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007678:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800767c:	2301      	movs	r3, #1
 800767e:	e08c      	b.n	800779a <_printf_i+0x1be>
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	6011      	str	r1, [r2, #0]
 8007684:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007688:	bf18      	it	ne
 800768a:	b21b      	sxthne	r3, r3
 800768c:	e7cf      	b.n	800762e <_printf_i+0x52>
 800768e:	6813      	ldr	r3, [r2, #0]
 8007690:	6825      	ldr	r5, [r4, #0]
 8007692:	1d18      	adds	r0, r3, #4
 8007694:	6010      	str	r0, [r2, #0]
 8007696:	0628      	lsls	r0, r5, #24
 8007698:	d501      	bpl.n	800769e <_printf_i+0xc2>
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	e002      	b.n	80076a4 <_printf_i+0xc8>
 800769e:	0668      	lsls	r0, r5, #25
 80076a0:	d5fb      	bpl.n	800769a <_printf_i+0xbe>
 80076a2:	881b      	ldrh	r3, [r3, #0]
 80076a4:	4854      	ldr	r0, [pc, #336]	; (80077f8 <_printf_i+0x21c>)
 80076a6:	296f      	cmp	r1, #111	; 0x6f
 80076a8:	bf14      	ite	ne
 80076aa:	220a      	movne	r2, #10
 80076ac:	2208      	moveq	r2, #8
 80076ae:	2100      	movs	r1, #0
 80076b0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80076b4:	6865      	ldr	r5, [r4, #4]
 80076b6:	60a5      	str	r5, [r4, #8]
 80076b8:	2d00      	cmp	r5, #0
 80076ba:	f2c0 8095 	blt.w	80077e8 <_printf_i+0x20c>
 80076be:	6821      	ldr	r1, [r4, #0]
 80076c0:	f021 0104 	bic.w	r1, r1, #4
 80076c4:	6021      	str	r1, [r4, #0]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d13d      	bne.n	8007746 <_printf_i+0x16a>
 80076ca:	2d00      	cmp	r5, #0
 80076cc:	f040 808e 	bne.w	80077ec <_printf_i+0x210>
 80076d0:	4665      	mov	r5, ip
 80076d2:	2a08      	cmp	r2, #8
 80076d4:	d10b      	bne.n	80076ee <_printf_i+0x112>
 80076d6:	6823      	ldr	r3, [r4, #0]
 80076d8:	07db      	lsls	r3, r3, #31
 80076da:	d508      	bpl.n	80076ee <_printf_i+0x112>
 80076dc:	6923      	ldr	r3, [r4, #16]
 80076de:	6862      	ldr	r2, [r4, #4]
 80076e0:	429a      	cmp	r2, r3
 80076e2:	bfde      	ittt	le
 80076e4:	2330      	movle	r3, #48	; 0x30
 80076e6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80076ea:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80076ee:	ebac 0305 	sub.w	r3, ip, r5
 80076f2:	6123      	str	r3, [r4, #16]
 80076f4:	f8cd 8000 	str.w	r8, [sp]
 80076f8:	463b      	mov	r3, r7
 80076fa:	aa03      	add	r2, sp, #12
 80076fc:	4621      	mov	r1, r4
 80076fe:	4630      	mov	r0, r6
 8007700:	f7ff fef6 	bl	80074f0 <_printf_common>
 8007704:	3001      	adds	r0, #1
 8007706:	d14d      	bne.n	80077a4 <_printf_i+0x1c8>
 8007708:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800770c:	b005      	add	sp, #20
 800770e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007712:	4839      	ldr	r0, [pc, #228]	; (80077f8 <_printf_i+0x21c>)
 8007714:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007718:	6813      	ldr	r3, [r2, #0]
 800771a:	6821      	ldr	r1, [r4, #0]
 800771c:	1d1d      	adds	r5, r3, #4
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	6015      	str	r5, [r2, #0]
 8007722:	060a      	lsls	r2, r1, #24
 8007724:	d50b      	bpl.n	800773e <_printf_i+0x162>
 8007726:	07ca      	lsls	r2, r1, #31
 8007728:	bf44      	itt	mi
 800772a:	f041 0120 	orrmi.w	r1, r1, #32
 800772e:	6021      	strmi	r1, [r4, #0]
 8007730:	b91b      	cbnz	r3, 800773a <_printf_i+0x15e>
 8007732:	6822      	ldr	r2, [r4, #0]
 8007734:	f022 0220 	bic.w	r2, r2, #32
 8007738:	6022      	str	r2, [r4, #0]
 800773a:	2210      	movs	r2, #16
 800773c:	e7b7      	b.n	80076ae <_printf_i+0xd2>
 800773e:	064d      	lsls	r5, r1, #25
 8007740:	bf48      	it	mi
 8007742:	b29b      	uxthmi	r3, r3
 8007744:	e7ef      	b.n	8007726 <_printf_i+0x14a>
 8007746:	4665      	mov	r5, ip
 8007748:	fbb3 f1f2 	udiv	r1, r3, r2
 800774c:	fb02 3311 	mls	r3, r2, r1, r3
 8007750:	5cc3      	ldrb	r3, [r0, r3]
 8007752:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007756:	460b      	mov	r3, r1
 8007758:	2900      	cmp	r1, #0
 800775a:	d1f5      	bne.n	8007748 <_printf_i+0x16c>
 800775c:	e7b9      	b.n	80076d2 <_printf_i+0xf6>
 800775e:	6813      	ldr	r3, [r2, #0]
 8007760:	6825      	ldr	r5, [r4, #0]
 8007762:	6961      	ldr	r1, [r4, #20]
 8007764:	1d18      	adds	r0, r3, #4
 8007766:	6010      	str	r0, [r2, #0]
 8007768:	0628      	lsls	r0, r5, #24
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	d501      	bpl.n	8007772 <_printf_i+0x196>
 800776e:	6019      	str	r1, [r3, #0]
 8007770:	e002      	b.n	8007778 <_printf_i+0x19c>
 8007772:	066a      	lsls	r2, r5, #25
 8007774:	d5fb      	bpl.n	800776e <_printf_i+0x192>
 8007776:	8019      	strh	r1, [r3, #0]
 8007778:	2300      	movs	r3, #0
 800777a:	6123      	str	r3, [r4, #16]
 800777c:	4665      	mov	r5, ip
 800777e:	e7b9      	b.n	80076f4 <_printf_i+0x118>
 8007780:	6813      	ldr	r3, [r2, #0]
 8007782:	1d19      	adds	r1, r3, #4
 8007784:	6011      	str	r1, [r2, #0]
 8007786:	681d      	ldr	r5, [r3, #0]
 8007788:	6862      	ldr	r2, [r4, #4]
 800778a:	2100      	movs	r1, #0
 800778c:	4628      	mov	r0, r5
 800778e:	f7f8 fd57 	bl	8000240 <memchr>
 8007792:	b108      	cbz	r0, 8007798 <_printf_i+0x1bc>
 8007794:	1b40      	subs	r0, r0, r5
 8007796:	6060      	str	r0, [r4, #4]
 8007798:	6863      	ldr	r3, [r4, #4]
 800779a:	6123      	str	r3, [r4, #16]
 800779c:	2300      	movs	r3, #0
 800779e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077a2:	e7a7      	b.n	80076f4 <_printf_i+0x118>
 80077a4:	6923      	ldr	r3, [r4, #16]
 80077a6:	462a      	mov	r2, r5
 80077a8:	4639      	mov	r1, r7
 80077aa:	4630      	mov	r0, r6
 80077ac:	47c0      	blx	r8
 80077ae:	3001      	adds	r0, #1
 80077b0:	d0aa      	beq.n	8007708 <_printf_i+0x12c>
 80077b2:	6823      	ldr	r3, [r4, #0]
 80077b4:	079b      	lsls	r3, r3, #30
 80077b6:	d413      	bmi.n	80077e0 <_printf_i+0x204>
 80077b8:	68e0      	ldr	r0, [r4, #12]
 80077ba:	9b03      	ldr	r3, [sp, #12]
 80077bc:	4298      	cmp	r0, r3
 80077be:	bfb8      	it	lt
 80077c0:	4618      	movlt	r0, r3
 80077c2:	e7a3      	b.n	800770c <_printf_i+0x130>
 80077c4:	2301      	movs	r3, #1
 80077c6:	464a      	mov	r2, r9
 80077c8:	4639      	mov	r1, r7
 80077ca:	4630      	mov	r0, r6
 80077cc:	47c0      	blx	r8
 80077ce:	3001      	adds	r0, #1
 80077d0:	d09a      	beq.n	8007708 <_printf_i+0x12c>
 80077d2:	3501      	adds	r5, #1
 80077d4:	68e3      	ldr	r3, [r4, #12]
 80077d6:	9a03      	ldr	r2, [sp, #12]
 80077d8:	1a9b      	subs	r3, r3, r2
 80077da:	42ab      	cmp	r3, r5
 80077dc:	dcf2      	bgt.n	80077c4 <_printf_i+0x1e8>
 80077de:	e7eb      	b.n	80077b8 <_printf_i+0x1dc>
 80077e0:	2500      	movs	r5, #0
 80077e2:	f104 0919 	add.w	r9, r4, #25
 80077e6:	e7f5      	b.n	80077d4 <_printf_i+0x1f8>
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d1ac      	bne.n	8007746 <_printf_i+0x16a>
 80077ec:	7803      	ldrb	r3, [r0, #0]
 80077ee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80077f2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80077f6:	e76c      	b.n	80076d2 <_printf_i+0xf6>
 80077f8:	0800805d 	.word	0x0800805d
 80077fc:	0800806e 	.word	0x0800806e

08007800 <_scanf_chars>:
 8007800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007804:	4615      	mov	r5, r2
 8007806:	688a      	ldr	r2, [r1, #8]
 8007808:	4680      	mov	r8, r0
 800780a:	460c      	mov	r4, r1
 800780c:	b932      	cbnz	r2, 800781c <_scanf_chars+0x1c>
 800780e:	698a      	ldr	r2, [r1, #24]
 8007810:	2a00      	cmp	r2, #0
 8007812:	bf14      	ite	ne
 8007814:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8007818:	2201      	moveq	r2, #1
 800781a:	608a      	str	r2, [r1, #8]
 800781c:	6822      	ldr	r2, [r4, #0]
 800781e:	06d1      	lsls	r1, r2, #27
 8007820:	bf5f      	itttt	pl
 8007822:	681a      	ldrpl	r2, [r3, #0]
 8007824:	1d11      	addpl	r1, r2, #4
 8007826:	6019      	strpl	r1, [r3, #0]
 8007828:	6817      	ldrpl	r7, [r2, #0]
 800782a:	2600      	movs	r6, #0
 800782c:	69a3      	ldr	r3, [r4, #24]
 800782e:	b1db      	cbz	r3, 8007868 <_scanf_chars+0x68>
 8007830:	2b01      	cmp	r3, #1
 8007832:	d107      	bne.n	8007844 <_scanf_chars+0x44>
 8007834:	682b      	ldr	r3, [r5, #0]
 8007836:	6962      	ldr	r2, [r4, #20]
 8007838:	781b      	ldrb	r3, [r3, #0]
 800783a:	5cd3      	ldrb	r3, [r2, r3]
 800783c:	b9a3      	cbnz	r3, 8007868 <_scanf_chars+0x68>
 800783e:	2e00      	cmp	r6, #0
 8007840:	d132      	bne.n	80078a8 <_scanf_chars+0xa8>
 8007842:	e006      	b.n	8007852 <_scanf_chars+0x52>
 8007844:	2b02      	cmp	r3, #2
 8007846:	d007      	beq.n	8007858 <_scanf_chars+0x58>
 8007848:	2e00      	cmp	r6, #0
 800784a:	d12d      	bne.n	80078a8 <_scanf_chars+0xa8>
 800784c:	69a3      	ldr	r3, [r4, #24]
 800784e:	2b01      	cmp	r3, #1
 8007850:	d12a      	bne.n	80078a8 <_scanf_chars+0xa8>
 8007852:	2001      	movs	r0, #1
 8007854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007858:	f000 fac4 	bl	8007de4 <__locale_ctype_ptr>
 800785c:	682b      	ldr	r3, [r5, #0]
 800785e:	781b      	ldrb	r3, [r3, #0]
 8007860:	4418      	add	r0, r3
 8007862:	7843      	ldrb	r3, [r0, #1]
 8007864:	071b      	lsls	r3, r3, #28
 8007866:	d4ef      	bmi.n	8007848 <_scanf_chars+0x48>
 8007868:	6823      	ldr	r3, [r4, #0]
 800786a:	06da      	lsls	r2, r3, #27
 800786c:	bf5e      	ittt	pl
 800786e:	682b      	ldrpl	r3, [r5, #0]
 8007870:	781b      	ldrbpl	r3, [r3, #0]
 8007872:	703b      	strbpl	r3, [r7, #0]
 8007874:	682a      	ldr	r2, [r5, #0]
 8007876:	686b      	ldr	r3, [r5, #4]
 8007878:	f102 0201 	add.w	r2, r2, #1
 800787c:	602a      	str	r2, [r5, #0]
 800787e:	68a2      	ldr	r2, [r4, #8]
 8007880:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8007884:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8007888:	606b      	str	r3, [r5, #4]
 800788a:	f106 0601 	add.w	r6, r6, #1
 800788e:	bf58      	it	pl
 8007890:	3701      	addpl	r7, #1
 8007892:	60a2      	str	r2, [r4, #8]
 8007894:	b142      	cbz	r2, 80078a8 <_scanf_chars+0xa8>
 8007896:	2b00      	cmp	r3, #0
 8007898:	dcc8      	bgt.n	800782c <_scanf_chars+0x2c>
 800789a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800789e:	4629      	mov	r1, r5
 80078a0:	4640      	mov	r0, r8
 80078a2:	4798      	blx	r3
 80078a4:	2800      	cmp	r0, #0
 80078a6:	d0c1      	beq.n	800782c <_scanf_chars+0x2c>
 80078a8:	6823      	ldr	r3, [r4, #0]
 80078aa:	f013 0310 	ands.w	r3, r3, #16
 80078ae:	d105      	bne.n	80078bc <_scanf_chars+0xbc>
 80078b0:	68e2      	ldr	r2, [r4, #12]
 80078b2:	3201      	adds	r2, #1
 80078b4:	60e2      	str	r2, [r4, #12]
 80078b6:	69a2      	ldr	r2, [r4, #24]
 80078b8:	b102      	cbz	r2, 80078bc <_scanf_chars+0xbc>
 80078ba:	703b      	strb	r3, [r7, #0]
 80078bc:	6923      	ldr	r3, [r4, #16]
 80078be:	441e      	add	r6, r3
 80078c0:	6126      	str	r6, [r4, #16]
 80078c2:	2000      	movs	r0, #0
 80078c4:	e7c6      	b.n	8007854 <_scanf_chars+0x54>
	...

080078c8 <_scanf_i>:
 80078c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078cc:	469a      	mov	sl, r3
 80078ce:	4b74      	ldr	r3, [pc, #464]	; (8007aa0 <_scanf_i+0x1d8>)
 80078d0:	460c      	mov	r4, r1
 80078d2:	4683      	mov	fp, r0
 80078d4:	4616      	mov	r6, r2
 80078d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80078da:	b087      	sub	sp, #28
 80078dc:	ab03      	add	r3, sp, #12
 80078de:	68a7      	ldr	r7, [r4, #8]
 80078e0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80078e4:	4b6f      	ldr	r3, [pc, #444]	; (8007aa4 <_scanf_i+0x1dc>)
 80078e6:	69a1      	ldr	r1, [r4, #24]
 80078e8:	4a6f      	ldr	r2, [pc, #444]	; (8007aa8 <_scanf_i+0x1e0>)
 80078ea:	2903      	cmp	r1, #3
 80078ec:	bf08      	it	eq
 80078ee:	461a      	moveq	r2, r3
 80078f0:	1e7b      	subs	r3, r7, #1
 80078f2:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 80078f6:	bf84      	itt	hi
 80078f8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80078fc:	60a3      	strhi	r3, [r4, #8]
 80078fe:	6823      	ldr	r3, [r4, #0]
 8007900:	9200      	str	r2, [sp, #0]
 8007902:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8007906:	bf88      	it	hi
 8007908:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800790c:	f104 091c 	add.w	r9, r4, #28
 8007910:	6023      	str	r3, [r4, #0]
 8007912:	bf8c      	ite	hi
 8007914:	197f      	addhi	r7, r7, r5
 8007916:	2700      	movls	r7, #0
 8007918:	464b      	mov	r3, r9
 800791a:	f04f 0800 	mov.w	r8, #0
 800791e:	9301      	str	r3, [sp, #4]
 8007920:	6831      	ldr	r1, [r6, #0]
 8007922:	ab03      	add	r3, sp, #12
 8007924:	2202      	movs	r2, #2
 8007926:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800792a:	7809      	ldrb	r1, [r1, #0]
 800792c:	f7f8 fc88 	bl	8000240 <memchr>
 8007930:	9b01      	ldr	r3, [sp, #4]
 8007932:	b330      	cbz	r0, 8007982 <_scanf_i+0xba>
 8007934:	f1b8 0f01 	cmp.w	r8, #1
 8007938:	d15a      	bne.n	80079f0 <_scanf_i+0x128>
 800793a:	6862      	ldr	r2, [r4, #4]
 800793c:	b92a      	cbnz	r2, 800794a <_scanf_i+0x82>
 800793e:	6822      	ldr	r2, [r4, #0]
 8007940:	2108      	movs	r1, #8
 8007942:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007946:	6061      	str	r1, [r4, #4]
 8007948:	6022      	str	r2, [r4, #0]
 800794a:	6822      	ldr	r2, [r4, #0]
 800794c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8007950:	6022      	str	r2, [r4, #0]
 8007952:	68a2      	ldr	r2, [r4, #8]
 8007954:	1e51      	subs	r1, r2, #1
 8007956:	60a1      	str	r1, [r4, #8]
 8007958:	b19a      	cbz	r2, 8007982 <_scanf_i+0xba>
 800795a:	6832      	ldr	r2, [r6, #0]
 800795c:	1c51      	adds	r1, r2, #1
 800795e:	6031      	str	r1, [r6, #0]
 8007960:	7812      	ldrb	r2, [r2, #0]
 8007962:	701a      	strb	r2, [r3, #0]
 8007964:	1c5d      	adds	r5, r3, #1
 8007966:	6873      	ldr	r3, [r6, #4]
 8007968:	3b01      	subs	r3, #1
 800796a:	2b00      	cmp	r3, #0
 800796c:	6073      	str	r3, [r6, #4]
 800796e:	dc07      	bgt.n	8007980 <_scanf_i+0xb8>
 8007970:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007974:	4631      	mov	r1, r6
 8007976:	4658      	mov	r0, fp
 8007978:	4798      	blx	r3
 800797a:	2800      	cmp	r0, #0
 800797c:	f040 8086 	bne.w	8007a8c <_scanf_i+0x1c4>
 8007980:	462b      	mov	r3, r5
 8007982:	f108 0801 	add.w	r8, r8, #1
 8007986:	f1b8 0f03 	cmp.w	r8, #3
 800798a:	d1c8      	bne.n	800791e <_scanf_i+0x56>
 800798c:	6862      	ldr	r2, [r4, #4]
 800798e:	b90a      	cbnz	r2, 8007994 <_scanf_i+0xcc>
 8007990:	220a      	movs	r2, #10
 8007992:	6062      	str	r2, [r4, #4]
 8007994:	6862      	ldr	r2, [r4, #4]
 8007996:	4945      	ldr	r1, [pc, #276]	; (8007aac <_scanf_i+0x1e4>)
 8007998:	6960      	ldr	r0, [r4, #20]
 800799a:	9301      	str	r3, [sp, #4]
 800799c:	1a89      	subs	r1, r1, r2
 800799e:	f000 f897 	bl	8007ad0 <__sccl>
 80079a2:	9b01      	ldr	r3, [sp, #4]
 80079a4:	f04f 0800 	mov.w	r8, #0
 80079a8:	461d      	mov	r5, r3
 80079aa:	68a3      	ldr	r3, [r4, #8]
 80079ac:	6822      	ldr	r2, [r4, #0]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d03a      	beq.n	8007a28 <_scanf_i+0x160>
 80079b2:	6831      	ldr	r1, [r6, #0]
 80079b4:	6960      	ldr	r0, [r4, #20]
 80079b6:	f891 c000 	ldrb.w	ip, [r1]
 80079ba:	f810 000c 	ldrb.w	r0, [r0, ip]
 80079be:	2800      	cmp	r0, #0
 80079c0:	d032      	beq.n	8007a28 <_scanf_i+0x160>
 80079c2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80079c6:	d121      	bne.n	8007a0c <_scanf_i+0x144>
 80079c8:	0510      	lsls	r0, r2, #20
 80079ca:	d51f      	bpl.n	8007a0c <_scanf_i+0x144>
 80079cc:	f108 0801 	add.w	r8, r8, #1
 80079d0:	b117      	cbz	r7, 80079d8 <_scanf_i+0x110>
 80079d2:	3301      	adds	r3, #1
 80079d4:	3f01      	subs	r7, #1
 80079d6:	60a3      	str	r3, [r4, #8]
 80079d8:	6873      	ldr	r3, [r6, #4]
 80079da:	3b01      	subs	r3, #1
 80079dc:	2b00      	cmp	r3, #0
 80079de:	6073      	str	r3, [r6, #4]
 80079e0:	dd1b      	ble.n	8007a1a <_scanf_i+0x152>
 80079e2:	6833      	ldr	r3, [r6, #0]
 80079e4:	3301      	adds	r3, #1
 80079e6:	6033      	str	r3, [r6, #0]
 80079e8:	68a3      	ldr	r3, [r4, #8]
 80079ea:	3b01      	subs	r3, #1
 80079ec:	60a3      	str	r3, [r4, #8]
 80079ee:	e7dc      	b.n	80079aa <_scanf_i+0xe2>
 80079f0:	f1b8 0f02 	cmp.w	r8, #2
 80079f4:	d1ad      	bne.n	8007952 <_scanf_i+0x8a>
 80079f6:	6822      	ldr	r2, [r4, #0]
 80079f8:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80079fc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8007a00:	d1bf      	bne.n	8007982 <_scanf_i+0xba>
 8007a02:	2110      	movs	r1, #16
 8007a04:	6061      	str	r1, [r4, #4]
 8007a06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a0a:	e7a1      	b.n	8007950 <_scanf_i+0x88>
 8007a0c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8007a10:	6022      	str	r2, [r4, #0]
 8007a12:	780b      	ldrb	r3, [r1, #0]
 8007a14:	702b      	strb	r3, [r5, #0]
 8007a16:	3501      	adds	r5, #1
 8007a18:	e7de      	b.n	80079d8 <_scanf_i+0x110>
 8007a1a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007a1e:	4631      	mov	r1, r6
 8007a20:	4658      	mov	r0, fp
 8007a22:	4798      	blx	r3
 8007a24:	2800      	cmp	r0, #0
 8007a26:	d0df      	beq.n	80079e8 <_scanf_i+0x120>
 8007a28:	6823      	ldr	r3, [r4, #0]
 8007a2a:	05d9      	lsls	r1, r3, #23
 8007a2c:	d50c      	bpl.n	8007a48 <_scanf_i+0x180>
 8007a2e:	454d      	cmp	r5, r9
 8007a30:	d908      	bls.n	8007a44 <_scanf_i+0x17c>
 8007a32:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007a36:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007a3a:	4632      	mov	r2, r6
 8007a3c:	4658      	mov	r0, fp
 8007a3e:	4798      	blx	r3
 8007a40:	1e6f      	subs	r7, r5, #1
 8007a42:	463d      	mov	r5, r7
 8007a44:	454d      	cmp	r5, r9
 8007a46:	d029      	beq.n	8007a9c <_scanf_i+0x1d4>
 8007a48:	6822      	ldr	r2, [r4, #0]
 8007a4a:	f012 0210 	ands.w	r2, r2, #16
 8007a4e:	d113      	bne.n	8007a78 <_scanf_i+0x1b0>
 8007a50:	702a      	strb	r2, [r5, #0]
 8007a52:	6863      	ldr	r3, [r4, #4]
 8007a54:	9e00      	ldr	r6, [sp, #0]
 8007a56:	4649      	mov	r1, r9
 8007a58:	4658      	mov	r0, fp
 8007a5a:	47b0      	blx	r6
 8007a5c:	f8da 3000 	ldr.w	r3, [sl]
 8007a60:	6821      	ldr	r1, [r4, #0]
 8007a62:	1d1a      	adds	r2, r3, #4
 8007a64:	f8ca 2000 	str.w	r2, [sl]
 8007a68:	f011 0f20 	tst.w	r1, #32
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	d010      	beq.n	8007a92 <_scanf_i+0x1ca>
 8007a70:	6018      	str	r0, [r3, #0]
 8007a72:	68e3      	ldr	r3, [r4, #12]
 8007a74:	3301      	adds	r3, #1
 8007a76:	60e3      	str	r3, [r4, #12]
 8007a78:	eba5 0509 	sub.w	r5, r5, r9
 8007a7c:	44a8      	add	r8, r5
 8007a7e:	6925      	ldr	r5, [r4, #16]
 8007a80:	4445      	add	r5, r8
 8007a82:	6125      	str	r5, [r4, #16]
 8007a84:	2000      	movs	r0, #0
 8007a86:	b007      	add	sp, #28
 8007a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a8c:	f04f 0800 	mov.w	r8, #0
 8007a90:	e7ca      	b.n	8007a28 <_scanf_i+0x160>
 8007a92:	07ca      	lsls	r2, r1, #31
 8007a94:	bf4c      	ite	mi
 8007a96:	8018      	strhmi	r0, [r3, #0]
 8007a98:	6018      	strpl	r0, [r3, #0]
 8007a9a:	e7ea      	b.n	8007a72 <_scanf_i+0x1aa>
 8007a9c:	2001      	movs	r0, #1
 8007a9e:	e7f2      	b.n	8007a86 <_scanf_i+0x1be>
 8007aa0:	08008038 	.word	0x08008038
 8007aa4:	08007c2d 	.word	0x08007c2d
 8007aa8:	08007d45 	.word	0x08007d45
 8007aac:	0800808f 	.word	0x0800808f

08007ab0 <_sbrk_r>:
 8007ab0:	b538      	push	{r3, r4, r5, lr}
 8007ab2:	4c06      	ldr	r4, [pc, #24]	; (8007acc <_sbrk_r+0x1c>)
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	4605      	mov	r5, r0
 8007ab8:	4608      	mov	r0, r1
 8007aba:	6023      	str	r3, [r4, #0]
 8007abc:	f7ff f81a 	bl	8006af4 <_sbrk>
 8007ac0:	1c43      	adds	r3, r0, #1
 8007ac2:	d102      	bne.n	8007aca <_sbrk_r+0x1a>
 8007ac4:	6823      	ldr	r3, [r4, #0]
 8007ac6:	b103      	cbz	r3, 8007aca <_sbrk_r+0x1a>
 8007ac8:	602b      	str	r3, [r5, #0]
 8007aca:	bd38      	pop	{r3, r4, r5, pc}
 8007acc:	20004840 	.word	0x20004840

08007ad0 <__sccl>:
 8007ad0:	b570      	push	{r4, r5, r6, lr}
 8007ad2:	780b      	ldrb	r3, [r1, #0]
 8007ad4:	2b5e      	cmp	r3, #94	; 0x5e
 8007ad6:	bf13      	iteet	ne
 8007ad8:	1c4a      	addne	r2, r1, #1
 8007ada:	1c8a      	addeq	r2, r1, #2
 8007adc:	784b      	ldrbeq	r3, [r1, #1]
 8007ade:	2100      	movne	r1, #0
 8007ae0:	bf08      	it	eq
 8007ae2:	2101      	moveq	r1, #1
 8007ae4:	1e44      	subs	r4, r0, #1
 8007ae6:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8007aea:	f804 1f01 	strb.w	r1, [r4, #1]!
 8007aee:	42ac      	cmp	r4, r5
 8007af0:	d1fb      	bne.n	8007aea <__sccl+0x1a>
 8007af2:	b913      	cbnz	r3, 8007afa <__sccl+0x2a>
 8007af4:	3a01      	subs	r2, #1
 8007af6:	4610      	mov	r0, r2
 8007af8:	bd70      	pop	{r4, r5, r6, pc}
 8007afa:	f081 0401 	eor.w	r4, r1, #1
 8007afe:	54c4      	strb	r4, [r0, r3]
 8007b00:	1c51      	adds	r1, r2, #1
 8007b02:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8007b06:	2d2d      	cmp	r5, #45	; 0x2d
 8007b08:	f101 36ff 	add.w	r6, r1, #4294967295	; 0xffffffff
 8007b0c:	460a      	mov	r2, r1
 8007b0e:	d006      	beq.n	8007b1e <__sccl+0x4e>
 8007b10:	2d5d      	cmp	r5, #93	; 0x5d
 8007b12:	d0f0      	beq.n	8007af6 <__sccl+0x26>
 8007b14:	b90d      	cbnz	r5, 8007b1a <__sccl+0x4a>
 8007b16:	4632      	mov	r2, r6
 8007b18:	e7ed      	b.n	8007af6 <__sccl+0x26>
 8007b1a:	462b      	mov	r3, r5
 8007b1c:	e7ef      	b.n	8007afe <__sccl+0x2e>
 8007b1e:	780e      	ldrb	r6, [r1, #0]
 8007b20:	2e5d      	cmp	r6, #93	; 0x5d
 8007b22:	d0fa      	beq.n	8007b1a <__sccl+0x4a>
 8007b24:	42b3      	cmp	r3, r6
 8007b26:	dcf8      	bgt.n	8007b1a <__sccl+0x4a>
 8007b28:	3301      	adds	r3, #1
 8007b2a:	429e      	cmp	r6, r3
 8007b2c:	54c4      	strb	r4, [r0, r3]
 8007b2e:	dcfb      	bgt.n	8007b28 <__sccl+0x58>
 8007b30:	3102      	adds	r1, #2
 8007b32:	e7e6      	b.n	8007b02 <__sccl+0x32>

08007b34 <_strtol_l.isra.0>:
 8007b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b38:	4680      	mov	r8, r0
 8007b3a:	4689      	mov	r9, r1
 8007b3c:	4692      	mov	sl, r2
 8007b3e:	461e      	mov	r6, r3
 8007b40:	460f      	mov	r7, r1
 8007b42:	463d      	mov	r5, r7
 8007b44:	9808      	ldr	r0, [sp, #32]
 8007b46:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007b4a:	f000 f947 	bl	8007ddc <__locale_ctype_ptr_l>
 8007b4e:	4420      	add	r0, r4
 8007b50:	7843      	ldrb	r3, [r0, #1]
 8007b52:	f013 0308 	ands.w	r3, r3, #8
 8007b56:	d132      	bne.n	8007bbe <_strtol_l.isra.0+0x8a>
 8007b58:	2c2d      	cmp	r4, #45	; 0x2d
 8007b5a:	d132      	bne.n	8007bc2 <_strtol_l.isra.0+0x8e>
 8007b5c:	787c      	ldrb	r4, [r7, #1]
 8007b5e:	1cbd      	adds	r5, r7, #2
 8007b60:	2201      	movs	r2, #1
 8007b62:	2e00      	cmp	r6, #0
 8007b64:	d05d      	beq.n	8007c22 <_strtol_l.isra.0+0xee>
 8007b66:	2e10      	cmp	r6, #16
 8007b68:	d109      	bne.n	8007b7e <_strtol_l.isra.0+0x4a>
 8007b6a:	2c30      	cmp	r4, #48	; 0x30
 8007b6c:	d107      	bne.n	8007b7e <_strtol_l.isra.0+0x4a>
 8007b6e:	782b      	ldrb	r3, [r5, #0]
 8007b70:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007b74:	2b58      	cmp	r3, #88	; 0x58
 8007b76:	d14f      	bne.n	8007c18 <_strtol_l.isra.0+0xe4>
 8007b78:	786c      	ldrb	r4, [r5, #1]
 8007b7a:	2610      	movs	r6, #16
 8007b7c:	3502      	adds	r5, #2
 8007b7e:	2a00      	cmp	r2, #0
 8007b80:	bf14      	ite	ne
 8007b82:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8007b86:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8007b8a:	2700      	movs	r7, #0
 8007b8c:	fbb1 fcf6 	udiv	ip, r1, r6
 8007b90:	4638      	mov	r0, r7
 8007b92:	fb06 1e1c 	mls	lr, r6, ip, r1
 8007b96:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8007b9a:	2b09      	cmp	r3, #9
 8007b9c:	d817      	bhi.n	8007bce <_strtol_l.isra.0+0x9a>
 8007b9e:	461c      	mov	r4, r3
 8007ba0:	42a6      	cmp	r6, r4
 8007ba2:	dd23      	ble.n	8007bec <_strtol_l.isra.0+0xb8>
 8007ba4:	1c7b      	adds	r3, r7, #1
 8007ba6:	d007      	beq.n	8007bb8 <_strtol_l.isra.0+0x84>
 8007ba8:	4584      	cmp	ip, r0
 8007baa:	d31c      	bcc.n	8007be6 <_strtol_l.isra.0+0xb2>
 8007bac:	d101      	bne.n	8007bb2 <_strtol_l.isra.0+0x7e>
 8007bae:	45a6      	cmp	lr, r4
 8007bb0:	db19      	blt.n	8007be6 <_strtol_l.isra.0+0xb2>
 8007bb2:	fb00 4006 	mla	r0, r0, r6, r4
 8007bb6:	2701      	movs	r7, #1
 8007bb8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007bbc:	e7eb      	b.n	8007b96 <_strtol_l.isra.0+0x62>
 8007bbe:	462f      	mov	r7, r5
 8007bc0:	e7bf      	b.n	8007b42 <_strtol_l.isra.0+0xe>
 8007bc2:	2c2b      	cmp	r4, #43	; 0x2b
 8007bc4:	bf04      	itt	eq
 8007bc6:	1cbd      	addeq	r5, r7, #2
 8007bc8:	787c      	ldrbeq	r4, [r7, #1]
 8007bca:	461a      	mov	r2, r3
 8007bcc:	e7c9      	b.n	8007b62 <_strtol_l.isra.0+0x2e>
 8007bce:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8007bd2:	2b19      	cmp	r3, #25
 8007bd4:	d801      	bhi.n	8007bda <_strtol_l.isra.0+0xa6>
 8007bd6:	3c37      	subs	r4, #55	; 0x37
 8007bd8:	e7e2      	b.n	8007ba0 <_strtol_l.isra.0+0x6c>
 8007bda:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8007bde:	2b19      	cmp	r3, #25
 8007be0:	d804      	bhi.n	8007bec <_strtol_l.isra.0+0xb8>
 8007be2:	3c57      	subs	r4, #87	; 0x57
 8007be4:	e7dc      	b.n	8007ba0 <_strtol_l.isra.0+0x6c>
 8007be6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007bea:	e7e5      	b.n	8007bb8 <_strtol_l.isra.0+0x84>
 8007bec:	1c7b      	adds	r3, r7, #1
 8007bee:	d108      	bne.n	8007c02 <_strtol_l.isra.0+0xce>
 8007bf0:	2322      	movs	r3, #34	; 0x22
 8007bf2:	f8c8 3000 	str.w	r3, [r8]
 8007bf6:	4608      	mov	r0, r1
 8007bf8:	f1ba 0f00 	cmp.w	sl, #0
 8007bfc:	d107      	bne.n	8007c0e <_strtol_l.isra.0+0xda>
 8007bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c02:	b102      	cbz	r2, 8007c06 <_strtol_l.isra.0+0xd2>
 8007c04:	4240      	negs	r0, r0
 8007c06:	f1ba 0f00 	cmp.w	sl, #0
 8007c0a:	d0f8      	beq.n	8007bfe <_strtol_l.isra.0+0xca>
 8007c0c:	b10f      	cbz	r7, 8007c12 <_strtol_l.isra.0+0xde>
 8007c0e:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8007c12:	f8ca 9000 	str.w	r9, [sl]
 8007c16:	e7f2      	b.n	8007bfe <_strtol_l.isra.0+0xca>
 8007c18:	2430      	movs	r4, #48	; 0x30
 8007c1a:	2e00      	cmp	r6, #0
 8007c1c:	d1af      	bne.n	8007b7e <_strtol_l.isra.0+0x4a>
 8007c1e:	2608      	movs	r6, #8
 8007c20:	e7ad      	b.n	8007b7e <_strtol_l.isra.0+0x4a>
 8007c22:	2c30      	cmp	r4, #48	; 0x30
 8007c24:	d0a3      	beq.n	8007b6e <_strtol_l.isra.0+0x3a>
 8007c26:	260a      	movs	r6, #10
 8007c28:	e7a9      	b.n	8007b7e <_strtol_l.isra.0+0x4a>
	...

08007c2c <_strtol_r>:
 8007c2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c2e:	4c06      	ldr	r4, [pc, #24]	; (8007c48 <_strtol_r+0x1c>)
 8007c30:	4d06      	ldr	r5, [pc, #24]	; (8007c4c <_strtol_r+0x20>)
 8007c32:	6824      	ldr	r4, [r4, #0]
 8007c34:	6a24      	ldr	r4, [r4, #32]
 8007c36:	2c00      	cmp	r4, #0
 8007c38:	bf08      	it	eq
 8007c3a:	462c      	moveq	r4, r5
 8007c3c:	9400      	str	r4, [sp, #0]
 8007c3e:	f7ff ff79 	bl	8007b34 <_strtol_l.isra.0>
 8007c42:	b003      	add	sp, #12
 8007c44:	bd30      	pop	{r4, r5, pc}
 8007c46:	bf00      	nop
 8007c48:	20000008 	.word	0x20000008
 8007c4c:	2000006c 	.word	0x2000006c

08007c50 <_strtoul_l.isra.0>:
 8007c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c54:	4680      	mov	r8, r0
 8007c56:	4689      	mov	r9, r1
 8007c58:	4692      	mov	sl, r2
 8007c5a:	461e      	mov	r6, r3
 8007c5c:	460f      	mov	r7, r1
 8007c5e:	463d      	mov	r5, r7
 8007c60:	9808      	ldr	r0, [sp, #32]
 8007c62:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007c66:	f000 f8b9 	bl	8007ddc <__locale_ctype_ptr_l>
 8007c6a:	4420      	add	r0, r4
 8007c6c:	7843      	ldrb	r3, [r0, #1]
 8007c6e:	f013 0308 	ands.w	r3, r3, #8
 8007c72:	d130      	bne.n	8007cd6 <_strtoul_l.isra.0+0x86>
 8007c74:	2c2d      	cmp	r4, #45	; 0x2d
 8007c76:	d130      	bne.n	8007cda <_strtoul_l.isra.0+0x8a>
 8007c78:	787c      	ldrb	r4, [r7, #1]
 8007c7a:	1cbd      	adds	r5, r7, #2
 8007c7c:	2101      	movs	r1, #1
 8007c7e:	2e00      	cmp	r6, #0
 8007c80:	d05c      	beq.n	8007d3c <_strtoul_l.isra.0+0xec>
 8007c82:	2e10      	cmp	r6, #16
 8007c84:	d109      	bne.n	8007c9a <_strtoul_l.isra.0+0x4a>
 8007c86:	2c30      	cmp	r4, #48	; 0x30
 8007c88:	d107      	bne.n	8007c9a <_strtoul_l.isra.0+0x4a>
 8007c8a:	782b      	ldrb	r3, [r5, #0]
 8007c8c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007c90:	2b58      	cmp	r3, #88	; 0x58
 8007c92:	d14e      	bne.n	8007d32 <_strtoul_l.isra.0+0xe2>
 8007c94:	786c      	ldrb	r4, [r5, #1]
 8007c96:	2610      	movs	r6, #16
 8007c98:	3502      	adds	r5, #2
 8007c9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	fbb2 f2f6 	udiv	r2, r2, r6
 8007ca4:	fb06 fc02 	mul.w	ip, r6, r2
 8007ca8:	ea6f 0c0c 	mvn.w	ip, ip
 8007cac:	4618      	mov	r0, r3
 8007cae:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8007cb2:	2f09      	cmp	r7, #9
 8007cb4:	d817      	bhi.n	8007ce6 <_strtoul_l.isra.0+0x96>
 8007cb6:	463c      	mov	r4, r7
 8007cb8:	42a6      	cmp	r6, r4
 8007cba:	dd23      	ble.n	8007d04 <_strtoul_l.isra.0+0xb4>
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	db1e      	blt.n	8007cfe <_strtoul_l.isra.0+0xae>
 8007cc0:	4282      	cmp	r2, r0
 8007cc2:	d31c      	bcc.n	8007cfe <_strtoul_l.isra.0+0xae>
 8007cc4:	d101      	bne.n	8007cca <_strtoul_l.isra.0+0x7a>
 8007cc6:	45a4      	cmp	ip, r4
 8007cc8:	db19      	blt.n	8007cfe <_strtoul_l.isra.0+0xae>
 8007cca:	fb00 4006 	mla	r0, r0, r6, r4
 8007cce:	2301      	movs	r3, #1
 8007cd0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007cd4:	e7eb      	b.n	8007cae <_strtoul_l.isra.0+0x5e>
 8007cd6:	462f      	mov	r7, r5
 8007cd8:	e7c1      	b.n	8007c5e <_strtoul_l.isra.0+0xe>
 8007cda:	2c2b      	cmp	r4, #43	; 0x2b
 8007cdc:	bf04      	itt	eq
 8007cde:	1cbd      	addeq	r5, r7, #2
 8007ce0:	787c      	ldrbeq	r4, [r7, #1]
 8007ce2:	4619      	mov	r1, r3
 8007ce4:	e7cb      	b.n	8007c7e <_strtoul_l.isra.0+0x2e>
 8007ce6:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007cea:	2f19      	cmp	r7, #25
 8007cec:	d801      	bhi.n	8007cf2 <_strtoul_l.isra.0+0xa2>
 8007cee:	3c37      	subs	r4, #55	; 0x37
 8007cf0:	e7e2      	b.n	8007cb8 <_strtoul_l.isra.0+0x68>
 8007cf2:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8007cf6:	2f19      	cmp	r7, #25
 8007cf8:	d804      	bhi.n	8007d04 <_strtoul_l.isra.0+0xb4>
 8007cfa:	3c57      	subs	r4, #87	; 0x57
 8007cfc:	e7dc      	b.n	8007cb8 <_strtoul_l.isra.0+0x68>
 8007cfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d02:	e7e5      	b.n	8007cd0 <_strtoul_l.isra.0+0x80>
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	da09      	bge.n	8007d1c <_strtoul_l.isra.0+0xcc>
 8007d08:	2322      	movs	r3, #34	; 0x22
 8007d0a:	f8c8 3000 	str.w	r3, [r8]
 8007d0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d12:	f1ba 0f00 	cmp.w	sl, #0
 8007d16:	d107      	bne.n	8007d28 <_strtoul_l.isra.0+0xd8>
 8007d18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d1c:	b101      	cbz	r1, 8007d20 <_strtoul_l.isra.0+0xd0>
 8007d1e:	4240      	negs	r0, r0
 8007d20:	f1ba 0f00 	cmp.w	sl, #0
 8007d24:	d0f8      	beq.n	8007d18 <_strtoul_l.isra.0+0xc8>
 8007d26:	b10b      	cbz	r3, 8007d2c <_strtoul_l.isra.0+0xdc>
 8007d28:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8007d2c:	f8ca 9000 	str.w	r9, [sl]
 8007d30:	e7f2      	b.n	8007d18 <_strtoul_l.isra.0+0xc8>
 8007d32:	2430      	movs	r4, #48	; 0x30
 8007d34:	2e00      	cmp	r6, #0
 8007d36:	d1b0      	bne.n	8007c9a <_strtoul_l.isra.0+0x4a>
 8007d38:	2608      	movs	r6, #8
 8007d3a:	e7ae      	b.n	8007c9a <_strtoul_l.isra.0+0x4a>
 8007d3c:	2c30      	cmp	r4, #48	; 0x30
 8007d3e:	d0a4      	beq.n	8007c8a <_strtoul_l.isra.0+0x3a>
 8007d40:	260a      	movs	r6, #10
 8007d42:	e7aa      	b.n	8007c9a <_strtoul_l.isra.0+0x4a>

08007d44 <_strtoul_r>:
 8007d44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007d46:	4c06      	ldr	r4, [pc, #24]	; (8007d60 <_strtoul_r+0x1c>)
 8007d48:	4d06      	ldr	r5, [pc, #24]	; (8007d64 <_strtoul_r+0x20>)
 8007d4a:	6824      	ldr	r4, [r4, #0]
 8007d4c:	6a24      	ldr	r4, [r4, #32]
 8007d4e:	2c00      	cmp	r4, #0
 8007d50:	bf08      	it	eq
 8007d52:	462c      	moveq	r4, r5
 8007d54:	9400      	str	r4, [sp, #0]
 8007d56:	f7ff ff7b 	bl	8007c50 <_strtoul_l.isra.0>
 8007d5a:	b003      	add	sp, #12
 8007d5c:	bd30      	pop	{r4, r5, pc}
 8007d5e:	bf00      	nop
 8007d60:	20000008 	.word	0x20000008
 8007d64:	2000006c 	.word	0x2000006c

08007d68 <__submore>:
 8007d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d6c:	460c      	mov	r4, r1
 8007d6e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007d70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d74:	4299      	cmp	r1, r3
 8007d76:	d11d      	bne.n	8007db4 <__submore+0x4c>
 8007d78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007d7c:	f7ff f862 	bl	8006e44 <_malloc_r>
 8007d80:	b918      	cbnz	r0, 8007d8a <__submore+0x22>
 8007d82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d8e:	63a3      	str	r3, [r4, #56]	; 0x38
 8007d90:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8007d94:	6360      	str	r0, [r4, #52]	; 0x34
 8007d96:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8007d9a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007d9e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8007da2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007da6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8007daa:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8007dae:	6020      	str	r0, [r4, #0]
 8007db0:	2000      	movs	r0, #0
 8007db2:	e7e8      	b.n	8007d86 <__submore+0x1e>
 8007db4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8007db6:	0077      	lsls	r7, r6, #1
 8007db8:	463a      	mov	r2, r7
 8007dba:	f000 f84e 	bl	8007e5a <_realloc_r>
 8007dbe:	4605      	mov	r5, r0
 8007dc0:	2800      	cmp	r0, #0
 8007dc2:	d0de      	beq.n	8007d82 <__submore+0x1a>
 8007dc4:	eb00 0806 	add.w	r8, r0, r6
 8007dc8:	4601      	mov	r1, r0
 8007dca:	4632      	mov	r2, r6
 8007dcc:	4640      	mov	r0, r8
 8007dce:	f7fe ff27 	bl	8006c20 <memcpy>
 8007dd2:	f8c4 8000 	str.w	r8, [r4]
 8007dd6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8007dda:	e7e9      	b.n	8007db0 <__submore+0x48>

08007ddc <__locale_ctype_ptr_l>:
 8007ddc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8007de0:	4770      	bx	lr
	...

08007de4 <__locale_ctype_ptr>:
 8007de4:	4b04      	ldr	r3, [pc, #16]	; (8007df8 <__locale_ctype_ptr+0x14>)
 8007de6:	4a05      	ldr	r2, [pc, #20]	; (8007dfc <__locale_ctype_ptr+0x18>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	6a1b      	ldr	r3, [r3, #32]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	bf08      	it	eq
 8007df0:	4613      	moveq	r3, r2
 8007df2:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8007df6:	4770      	bx	lr
 8007df8:	20000008 	.word	0x20000008
 8007dfc:	2000006c 	.word	0x2000006c

08007e00 <__ascii_mbtowc>:
 8007e00:	b082      	sub	sp, #8
 8007e02:	b901      	cbnz	r1, 8007e06 <__ascii_mbtowc+0x6>
 8007e04:	a901      	add	r1, sp, #4
 8007e06:	b142      	cbz	r2, 8007e1a <__ascii_mbtowc+0x1a>
 8007e08:	b14b      	cbz	r3, 8007e1e <__ascii_mbtowc+0x1e>
 8007e0a:	7813      	ldrb	r3, [r2, #0]
 8007e0c:	600b      	str	r3, [r1, #0]
 8007e0e:	7812      	ldrb	r2, [r2, #0]
 8007e10:	1c10      	adds	r0, r2, #0
 8007e12:	bf18      	it	ne
 8007e14:	2001      	movne	r0, #1
 8007e16:	b002      	add	sp, #8
 8007e18:	4770      	bx	lr
 8007e1a:	4610      	mov	r0, r2
 8007e1c:	e7fb      	b.n	8007e16 <__ascii_mbtowc+0x16>
 8007e1e:	f06f 0001 	mvn.w	r0, #1
 8007e22:	e7f8      	b.n	8007e16 <__ascii_mbtowc+0x16>

08007e24 <memmove>:
 8007e24:	4288      	cmp	r0, r1
 8007e26:	b510      	push	{r4, lr}
 8007e28:	eb01 0302 	add.w	r3, r1, r2
 8007e2c:	d807      	bhi.n	8007e3e <memmove+0x1a>
 8007e2e:	1e42      	subs	r2, r0, #1
 8007e30:	4299      	cmp	r1, r3
 8007e32:	d00a      	beq.n	8007e4a <memmove+0x26>
 8007e34:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e38:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007e3c:	e7f8      	b.n	8007e30 <memmove+0xc>
 8007e3e:	4283      	cmp	r3, r0
 8007e40:	d9f5      	bls.n	8007e2e <memmove+0xa>
 8007e42:	1881      	adds	r1, r0, r2
 8007e44:	1ad2      	subs	r2, r2, r3
 8007e46:	42d3      	cmn	r3, r2
 8007e48:	d100      	bne.n	8007e4c <memmove+0x28>
 8007e4a:	bd10      	pop	{r4, pc}
 8007e4c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e50:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007e54:	e7f7      	b.n	8007e46 <memmove+0x22>

08007e56 <__malloc_lock>:
 8007e56:	4770      	bx	lr

08007e58 <__malloc_unlock>:
 8007e58:	4770      	bx	lr

08007e5a <_realloc_r>:
 8007e5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e5c:	4607      	mov	r7, r0
 8007e5e:	4614      	mov	r4, r2
 8007e60:	460e      	mov	r6, r1
 8007e62:	b921      	cbnz	r1, 8007e6e <_realloc_r+0x14>
 8007e64:	4611      	mov	r1, r2
 8007e66:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007e6a:	f7fe bfeb 	b.w	8006e44 <_malloc_r>
 8007e6e:	b922      	cbnz	r2, 8007e7a <_realloc_r+0x20>
 8007e70:	f7fe ff9a 	bl	8006da8 <_free_r>
 8007e74:	4625      	mov	r5, r4
 8007e76:	4628      	mov	r0, r5
 8007e78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e7a:	f000 f821 	bl	8007ec0 <_malloc_usable_size_r>
 8007e7e:	42a0      	cmp	r0, r4
 8007e80:	d20f      	bcs.n	8007ea2 <_realloc_r+0x48>
 8007e82:	4621      	mov	r1, r4
 8007e84:	4638      	mov	r0, r7
 8007e86:	f7fe ffdd 	bl	8006e44 <_malloc_r>
 8007e8a:	4605      	mov	r5, r0
 8007e8c:	2800      	cmp	r0, #0
 8007e8e:	d0f2      	beq.n	8007e76 <_realloc_r+0x1c>
 8007e90:	4631      	mov	r1, r6
 8007e92:	4622      	mov	r2, r4
 8007e94:	f7fe fec4 	bl	8006c20 <memcpy>
 8007e98:	4631      	mov	r1, r6
 8007e9a:	4638      	mov	r0, r7
 8007e9c:	f7fe ff84 	bl	8006da8 <_free_r>
 8007ea0:	e7e9      	b.n	8007e76 <_realloc_r+0x1c>
 8007ea2:	4635      	mov	r5, r6
 8007ea4:	e7e7      	b.n	8007e76 <_realloc_r+0x1c>

08007ea6 <__ascii_wctomb>:
 8007ea6:	b149      	cbz	r1, 8007ebc <__ascii_wctomb+0x16>
 8007ea8:	2aff      	cmp	r2, #255	; 0xff
 8007eaa:	bf85      	ittet	hi
 8007eac:	238a      	movhi	r3, #138	; 0x8a
 8007eae:	6003      	strhi	r3, [r0, #0]
 8007eb0:	700a      	strbls	r2, [r1, #0]
 8007eb2:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007eb6:	bf98      	it	ls
 8007eb8:	2001      	movls	r0, #1
 8007eba:	4770      	bx	lr
 8007ebc:	4608      	mov	r0, r1
 8007ebe:	4770      	bx	lr

08007ec0 <_malloc_usable_size_r>:
 8007ec0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ec4:	1f18      	subs	r0, r3, #4
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	bfbc      	itt	lt
 8007eca:	580b      	ldrlt	r3, [r1, r0]
 8007ecc:	18c0      	addlt	r0, r0, r3
 8007ece:	4770      	bx	lr

08007ed0 <_init>:
 8007ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ed2:	bf00      	nop
 8007ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ed6:	bc08      	pop	{r3}
 8007ed8:	469e      	mov	lr, r3
 8007eda:	4770      	bx	lr

08007edc <_fini>:
 8007edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ede:	bf00      	nop
 8007ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ee2:	bc08      	pop	{r3}
 8007ee4:	469e      	mov	lr, r3
 8007ee6:	4770      	bx	lr
